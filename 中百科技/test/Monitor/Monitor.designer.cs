#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DasherStation.Monitor
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DasherStation")]
	public partial class MonitorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTemperatureNo(TemperatureNo instance);
    partial void UpdateTemperatureNo(TemperatureNo instance);
    partial void DeleteTemperatureNo(TemperatureNo instance);
    partial void InsertFlowmeterNo(FlowmeterNo instance);
    partial void UpdateFlowmeterNo(FlowmeterNo instance);
    partial void DeleteFlowmeterNo(FlowmeterNo instance);
    partial void InsertLiquidPositionNo(LiquidPositionNo instance);
    partial void UpdateLiquidPositionNo(LiquidPositionNo instance);
    partial void DeleteLiquidPositionNo(LiquidPositionNo instance);
    #endregion
		
		public MonitorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MonitorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MonitorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MonitorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TemperatureNo> TemperatureNo
		{
			get
			{
				return this.GetTable<TemperatureNo>();
			}
		}
		
		public System.Data.Linq.Table<FlowmeterNo> FlowmeterNo
		{
			get
			{
				return this.GetTable<FlowmeterNo>();
			}
		}
		
		public System.Data.Linq.Table<LiquidPositionNo> LiquidPositionNo
		{
			get
			{
				return this.GetTable<LiquidPositionNo>();
			}
		}
	}
	
	[Table(Name="dbo.temperatureNo")]
	public partial class TemperatureNo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _no;
		
		private string _name;
		
		private string _position;
		
		private string _remark;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private System.Nullable<decimal> _minTemperature;
		
		private System.Nullable<decimal> _maxTemperature;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnminTemperatureChanging(System.Nullable<decimal> value);
    partial void OnminTemperatureChanged();
    partial void OnmaxTemperatureChanging(System.Nullable<decimal> value);
    partial void OnmaxTemperatureChanged();
    #endregion
		
		public TemperatureNo()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_no", DbType="VarChar(50)")]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="VarChar(200)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_minTemperature", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> minTemperature
		{
			get
			{
				return this._minTemperature;
			}
			set
			{
				if ((this._minTemperature != value))
				{
					this.OnminTemperatureChanging(value);
					this.SendPropertyChanging();
					this._minTemperature = value;
					this.SendPropertyChanged("minTemperature");
					this.OnminTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_maxTemperature", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> maxTemperature
		{
			get
			{
				return this._maxTemperature;
			}
			set
			{
				if ((this._maxTemperature != value))
				{
					this.OnmaxTemperatureChanging(value);
					this.SendPropertyChanging();
					this._maxTemperature = value;
					this.SendPropertyChanged("maxTemperature");
					this.OnmaxTemperatureChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.flowmeterNo")]
	public partial class FlowmeterNo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _no;
		
		private string _name;
		
		private string _position;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private string _remark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    #endregion
		
		public FlowmeterNo()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_no", DbType="VarChar(50)")]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="VarChar(50)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.liquidPositionNo")]
	public partial class LiquidPositionNo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _no;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private string _remark;
		
		private System.Nullable<decimal> _minValue;
		
		private System.Nullable<decimal> _maxValue;
		
		private string _position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnminValueChanging(System.Nullable<decimal> value);
    partial void OnminValueChanged();
    partial void OnmaxValueChanging(System.Nullable<decimal> value);
    partial void OnmaxValueChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    #endregion
		
		public LiquidPositionNo()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_no", DbType="VarChar(50)")]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_minValue", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> minValue
		{
			get
			{
				return this._minValue;
			}
			set
			{
				if ((this._minValue != value))
				{
					this.OnminValueChanging(value);
					this.SendPropertyChanging();
					this._minValue = value;
					this.SendPropertyChanged("minValue");
					this.OnminValueChanged();
				}
			}
		}
		
		[Column(Storage="_maxValue", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> maxValue
		{
			get
			{
				return this._maxValue;
			}
			set
			{
				if ((this._maxValue != value))
				{
					this.OnmaxValueChanging(value);
					this.SendPropertyChanging();
					this._maxValue = value;
					this.SendPropertyChanged("maxValue");
					this.OnmaxValueChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="VarChar(50)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
