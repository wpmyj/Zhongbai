//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DasherStation.dataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RebuildAsphaltConsumeDailyStatisticsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RebuildAsphaltConsumeDailyStatisticsDataSet : global::System.Data.DataSet {
        
        private rebuildAsphaltConsumeDailyStatisticsDataTable tablerebuildAsphaltConsumeDailyStatistics;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RebuildAsphaltConsumeDailyStatisticsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RebuildAsphaltConsumeDailyStatisticsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["rebuildAsphaltConsumeDailyStatistics"] != null)) {
                    base.Tables.Add(new rebuildAsphaltConsumeDailyStatisticsDataTable(ds.Tables["rebuildAsphaltConsumeDailyStatistics"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rebuildAsphaltConsumeDailyStatisticsDataTable rebuildAsphaltConsumeDailyStatistics {
            get {
                return this.tablerebuildAsphaltConsumeDailyStatistics;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RebuildAsphaltConsumeDailyStatisticsDataSet cln = ((RebuildAsphaltConsumeDailyStatisticsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["rebuildAsphaltConsumeDailyStatistics"] != null)) {
                    base.Tables.Add(new rebuildAsphaltConsumeDailyStatisticsDataTable(ds.Tables["rebuildAsphaltConsumeDailyStatistics"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablerebuildAsphaltConsumeDailyStatistics = ((rebuildAsphaltConsumeDailyStatisticsDataTable)(base.Tables["rebuildAsphaltConsumeDailyStatistics"]));
            if ((initTable == true)) {
                if ((this.tablerebuildAsphaltConsumeDailyStatistics != null)) {
                    this.tablerebuildAsphaltConsumeDailyStatistics.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RebuildAsphaltConsumeDailyStatisticsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RebuildAsphaltConsumeDailyStatisticsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablerebuildAsphaltConsumeDailyStatistics = new rebuildAsphaltConsumeDailyStatisticsDataTable();
            base.Tables.Add(this.tablerebuildAsphaltConsumeDailyStatistics);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerebuildAsphaltConsumeDailyStatistics() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RebuildAsphaltConsumeDailyStatisticsDataSet ds = new RebuildAsphaltConsumeDailyStatisticsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void rebuildAsphaltConsumeDailyStatisticsRowChangeEventHandler(object sender, rebuildAsphaltConsumeDailyStatisticsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rebuildAsphaltConsumeDailyStatisticsDataTable : global::System.Data.TypedTableBase<rebuildAsphaltConsumeDailyStatisticsRow> {
            
            private global::System.Data.DataColumn columnproduceDate;
            
            private global::System.Data.DataColumn columnconsumeCoulometry;
            
            private global::System.Data.DataColumn columnconsumeRate1;
            
            private global::System.Data.DataColumn columnconsumeRate2;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn column材料名;
            
            private global::System.Data.DataColumn column材料型号;
            
            private global::System.Data.DataColumn columndasherName;
            
            private global::System.Data.DataColumn column燃油消耗量;
            
            private global::System.Data.DataColumn column产量;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rebuildAsphaltConsumeDailyStatisticsDataTable() {
                this.TableName = "rebuildAsphaltConsumeDailyStatistics";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rebuildAsphaltConsumeDailyStatisticsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rebuildAsphaltConsumeDailyStatisticsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn produceDateColumn {
                get {
                    return this.columnproduceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn consumeCoulometryColumn {
                get {
                    return this.columnconsumeCoulometry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn consumeRate1Column {
                get {
                    return this.columnconsumeRate1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn consumeRate2Column {
                get {
                    return this.columnconsumeRate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 材料名Column {
                get {
                    return this.column材料名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 材料型号Column {
                get {
                    return this.column材料型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dasherNameColumn {
                get {
                    return this.columndasherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃油消耗量Column {
                get {
                    return this.column燃油消耗量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产量Column {
                get {
                    return this.column产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rebuildAsphaltConsumeDailyStatisticsRow this[int index] {
                get {
                    return ((rebuildAsphaltConsumeDailyStatisticsRow)(this.Rows[index]));
                }
            }
            
            public event rebuildAsphaltConsumeDailyStatisticsRowChangeEventHandler rebuildAsphaltConsumeDailyStatisticsRowChanging;
            
            public event rebuildAsphaltConsumeDailyStatisticsRowChangeEventHandler rebuildAsphaltConsumeDailyStatisticsRowChanged;
            
            public event rebuildAsphaltConsumeDailyStatisticsRowChangeEventHandler rebuildAsphaltConsumeDailyStatisticsRowDeleting;
            
            public event rebuildAsphaltConsumeDailyStatisticsRowChangeEventHandler rebuildAsphaltConsumeDailyStatisticsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrebuildAsphaltConsumeDailyStatisticsRow(rebuildAsphaltConsumeDailyStatisticsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rebuildAsphaltConsumeDailyStatisticsRow AddrebuildAsphaltConsumeDailyStatisticsRow(System.DateTime produceDate, double consumeCoulometry, double consumeRate1, double consumeRate2, string no, string name, string model, string 材料名, string 材料型号, string dasherName, double 燃油消耗量, double 产量) {
                rebuildAsphaltConsumeDailyStatisticsRow rowrebuildAsphaltConsumeDailyStatisticsRow = ((rebuildAsphaltConsumeDailyStatisticsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        produceDate,
                        consumeCoulometry,
                        consumeRate1,
                        consumeRate2,
                        no,
                        name,
                        model,
                        材料名,
                        材料型号,
                        dasherName,
                        燃油消耗量,
                        产量};
                rowrebuildAsphaltConsumeDailyStatisticsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrebuildAsphaltConsumeDailyStatisticsRow);
                return rowrebuildAsphaltConsumeDailyStatisticsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rebuildAsphaltConsumeDailyStatisticsDataTable cln = ((rebuildAsphaltConsumeDailyStatisticsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rebuildAsphaltConsumeDailyStatisticsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproduceDate = base.Columns["produceDate"];
                this.columnconsumeCoulometry = base.Columns["consumeCoulometry"];
                this.columnconsumeRate1 = base.Columns["consumeRate1"];
                this.columnconsumeRate2 = base.Columns["consumeRate2"];
                this.columnno = base.Columns["no"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.column材料名 = base.Columns["材料名"];
                this.column材料型号 = base.Columns["材料型号"];
                this.columndasherName = base.Columns["dasherName"];
                this.column燃油消耗量 = base.Columns["燃油消耗量"];
                this.column产量 = base.Columns["产量"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproduceDate = new global::System.Data.DataColumn("produceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduceDate);
                this.columnconsumeCoulometry = new global::System.Data.DataColumn("consumeCoulometry", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconsumeCoulometry);
                this.columnconsumeRate1 = new global::System.Data.DataColumn("consumeRate1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconsumeRate1);
                this.columnconsumeRate2 = new global::System.Data.DataColumn("consumeRate2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconsumeRate2);
                this.columnno = new global::System.Data.DataColumn("no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.column材料名 = new global::System.Data.DataColumn("材料名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column材料名);
                this.column材料型号 = new global::System.Data.DataColumn("材料型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column材料型号);
                this.columndasherName = new global::System.Data.DataColumn("dasherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndasherName);
                this.column燃油消耗量 = new global::System.Data.DataColumn("燃油消耗量", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃油消耗量);
                this.column产量 = new global::System.Data.DataColumn("产量", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产量);
                this.columnno.MaxLength = 50;
                this.columnname.MaxLength = 50;
                this.columnmodel.MaxLength = 50;
                this.column材料名.MaxLength = 50;
                this.column材料型号.MaxLength = 50;
                this.columndasherName.MaxLength = 50;
                this.column燃油消耗量.ReadOnly = true;
                this.column产量.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rebuildAsphaltConsumeDailyStatisticsRow NewrebuildAsphaltConsumeDailyStatisticsRow() {
                return ((rebuildAsphaltConsumeDailyStatisticsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rebuildAsphaltConsumeDailyStatisticsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rebuildAsphaltConsumeDailyStatisticsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rebuildAsphaltConsumeDailyStatisticsRowChanged != null)) {
                    this.rebuildAsphaltConsumeDailyStatisticsRowChanged(this, new rebuildAsphaltConsumeDailyStatisticsRowChangeEvent(((rebuildAsphaltConsumeDailyStatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rebuildAsphaltConsumeDailyStatisticsRowChanging != null)) {
                    this.rebuildAsphaltConsumeDailyStatisticsRowChanging(this, new rebuildAsphaltConsumeDailyStatisticsRowChangeEvent(((rebuildAsphaltConsumeDailyStatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rebuildAsphaltConsumeDailyStatisticsRowDeleted != null)) {
                    this.rebuildAsphaltConsumeDailyStatisticsRowDeleted(this, new rebuildAsphaltConsumeDailyStatisticsRowChangeEvent(((rebuildAsphaltConsumeDailyStatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rebuildAsphaltConsumeDailyStatisticsRowDeleting != null)) {
                    this.rebuildAsphaltConsumeDailyStatisticsRowDeleting(this, new rebuildAsphaltConsumeDailyStatisticsRowChangeEvent(((rebuildAsphaltConsumeDailyStatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverebuildAsphaltConsumeDailyStatisticsRow(rebuildAsphaltConsumeDailyStatisticsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RebuildAsphaltConsumeDailyStatisticsDataSet ds = new RebuildAsphaltConsumeDailyStatisticsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rebuildAsphaltConsumeDailyStatisticsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rebuildAsphaltConsumeDailyStatisticsRow : global::System.Data.DataRow {
            
            private rebuildAsphaltConsumeDailyStatisticsDataTable tablerebuildAsphaltConsumeDailyStatistics;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rebuildAsphaltConsumeDailyStatisticsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerebuildAsphaltConsumeDailyStatistics = ((rebuildAsphaltConsumeDailyStatisticsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime produceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablerebuildAsphaltConsumeDailyStatistics.produceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“produceDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.produceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double consumeCoulometry {
                get {
                    try {
                        return ((double)(this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeCoulometryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“consumeCoulometry”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeCoulometryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double consumeRate1 {
                get {
                    try {
                        return ((double)(this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“consumeRate1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double consumeRate2 {
                get {
                    try {
                        return ((double)(this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“consumeRate2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string no {
                get {
                    try {
                        return ((string)(this[this.tablerebuildAsphaltConsumeDailyStatistics.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“no”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablerebuildAsphaltConsumeDailyStatistics.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tablerebuildAsphaltConsumeDailyStatistics.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 材料名 {
                get {
                    try {
                        return ((string)(this[this.tablerebuildAsphaltConsumeDailyStatistics.材料名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“材料名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.材料名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 材料型号 {
                get {
                    try {
                        return ((string)(this[this.tablerebuildAsphaltConsumeDailyStatistics.材料型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“材料型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.材料型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dasherName {
                get {
                    try {
                        return ((string)(this[this.tablerebuildAsphaltConsumeDailyStatistics.dasherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“dasherName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.dasherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 燃油消耗量 {
                get {
                    try {
                        return ((double)(this[this.tablerebuildAsphaltConsumeDailyStatistics.燃油消耗量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“燃油消耗量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.燃油消耗量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 产量 {
                get {
                    try {
                        return ((double)(this[this.tablerebuildAsphaltConsumeDailyStatistics.产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rebuildAsphaltConsumeDailyStatistics”中列“产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerebuildAsphaltConsumeDailyStatistics.产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproduceDateNull() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.produceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproduceDateNull() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.produceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconsumeCoulometryNull() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.consumeCoulometryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconsumeCoulometryNull() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeCoulometryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconsumeRate1Null() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconsumeRate1Null() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconsumeRate2Null() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconsumeRate2Null() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.consumeRate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is材料名Null() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.材料名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set材料名Null() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.材料名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is材料型号Null() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.材料型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set材料型号Null() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.材料型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdasherNameNull() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.dasherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdasherNameNull() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.dasherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃油消耗量Null() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.燃油消耗量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃油消耗量Null() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.燃油消耗量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产量Null() {
                return this.IsNull(this.tablerebuildAsphaltConsumeDailyStatistics.产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产量Null() {
                this[this.tablerebuildAsphaltConsumeDailyStatistics.产量Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rebuildAsphaltConsumeDailyStatisticsRowChangeEvent : global::System.EventArgs {
            
            private rebuildAsphaltConsumeDailyStatisticsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rebuildAsphaltConsumeDailyStatisticsRowChangeEvent(rebuildAsphaltConsumeDailyStatisticsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rebuildAsphaltConsumeDailyStatisticsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DasherStation.dataSet.RebuildAsphaltConsumeDailyStatisticsDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class rebuildAsphaltConsumeDailyStatisticsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rebuildAsphaltConsumeDailyStatisticsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "rebuildAsphaltConsumeDailyStatistics";
            tableMapping.ColumnMappings.Add("produceDate", "produceDate");
            tableMapping.ColumnMappings.Add("consumeCoulometry", "consumeCoulometry");
            tableMapping.ColumnMappings.Add("consumeRate1", "consumeRate1");
            tableMapping.ColumnMappings.Add("consumeRate2", "consumeRate2");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("model", "model");
            tableMapping.ColumnMappings.Add("材料名", "材料名");
            tableMapping.ColumnMappings.Add("材料型号", "材料型号");
            tableMapping.ColumnMappings.Add("dasherName", "dasherName");
            tableMapping.ColumnMappings.Add("燃油消耗量", "燃油消耗量");
            tableMapping.ColumnMappings.Add("产量", "产量");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DasherStation.Properties.Settings.Default.DasherStationConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  equipmentInformation.no, productName.name, productModel.model, materialNa" +
                "me.name AS 材料名, materialModel.model AS 材料型号, basicInfo.dasherName, \r\n           " +
                "    rebuildAsphaltConsumeDailyStatistics_1.produceDate, rebuildAsphaltConsumeDai" +
                "lyStatistics_1.consumeCoulometry,\r\n                   (SELECT  COALESCE (fuelWas" +
                "tage1, fuelWastage2) AS Expr1\r\n                    FROM     rebuildAsphaltConsum" +
                "eDailyStatistics\r\n                    WHERE  (id = @id)) AS 燃油消耗量,\r\n            " +
                "       (SELECT  COALESCE (quantity2, quantity1) AS Expr1\r\n                    FR" +
                "OM     rebuildAsphaltConsumeDailyStatistics AS rebuildAsphaltConsumeDailyStatist" +
                "ics_2\r\n                    WHERE  (id = @id)) AS 产量, rebuildAsphaltConsumeDailyS" +
                "tatistics_1.consumeRate1, rebuildAsphaltConsumeDailyStatistics_1.consumeRate2\r\nF" +
                "ROM     materialModel INNER JOIN\r\n               material ON materialModel.id = " +
                "material.mmId INNER JOIN\r\n               materialName ON material.mnId = materia" +
                "lName.id INNER JOIN\r\n               rebuildAsphaltConsumeDailyStatistics AS rebu" +
                "ildAsphaltConsumeDailyStatistics_1 INNER JOIN\r\n               equipmentInformati" +
                "on ON rebuildAsphaltConsumeDailyStatistics_1.eiId = equipmentInformation.id INNE" +
                "R JOIN\r\n               product ON rebuildAsphaltConsumeDailyStatistics_1.pId = p" +
                "roduct.id INNER JOIN\r\n               productModel ON product.pmId = productModel" +
                ".id INNER JOIN\r\n               productName ON product.pnId = productName.id ON m" +
                "aterial.id = rebuildAsphaltConsumeDailyStatistics_1.mId CROSS JOIN\r\n            " +
                "   basicInfo\r\nWHERE  (rebuildAsphaltConsumeDailyStatistics_1.id = @id)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RebuildAsphaltConsumeDailyStatisticsDataSet.rebuildAsphaltConsumeDailyStatisticsDataTable dataTable, long id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(id));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RebuildAsphaltConsumeDailyStatisticsDataSet.rebuildAsphaltConsumeDailyStatisticsDataTable GetData(long id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(id));
            RebuildAsphaltConsumeDailyStatisticsDataSet.rebuildAsphaltConsumeDailyStatisticsDataTable dataTable = new RebuildAsphaltConsumeDailyStatisticsDataSet.rebuildAsphaltConsumeDailyStatisticsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(RebuildAsphaltConsumeDailyStatisticsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(RebuildAsphaltConsumeDailyStatisticsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(RebuildAsphaltConsumeDailyStatisticsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(RebuildAsphaltConsumeDailyStatisticsDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591