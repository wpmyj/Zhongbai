//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DasherStation.dataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MaterialTestAccountDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MaterialTestAccountDataSet : global::System.Data.DataSet {
        
        private materialTestAccountDataTable tablematerialTestAccount;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MaterialTestAccountDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MaterialTestAccountDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["materialTestAccount"] != null)) {
                    base.Tables.Add(new materialTestAccountDataTable(ds.Tables["materialTestAccount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public materialTestAccountDataTable materialTestAccount {
            get {
                return this.tablematerialTestAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MaterialTestAccountDataSet cln = ((MaterialTestAccountDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["materialTestAccount"] != null)) {
                    base.Tables.Add(new materialTestAccountDataTable(ds.Tables["materialTestAccount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablematerialTestAccount = ((materialTestAccountDataTable)(base.Tables["materialTestAccount"]));
            if ((initTable == true)) {
                if ((this.tablematerialTestAccount != null)) {
                    this.tablematerialTestAccount.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MaterialTestAccountDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MaterialTestAccountDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablematerialTestAccount = new materialTestAccountDataTable();
            base.Tables.Add(this.tablematerialTestAccount);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializematerialTestAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MaterialTestAccountDataSet ds = new MaterialTestAccountDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void materialTestAccountRowChangeEventHandler(object sender, materialTestAccountRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class materialTestAccountDataTable : global::System.Data.TypedTableBase<materialTestAccountRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnmId;
            
            private global::System.Data.DataColumn columnmkId;
            
            private global::System.Data.DataColumn column材料种类;
            
            private global::System.Data.DataColumn columnmnId;
            
            private global::System.Data.DataColumn column材料名称;
            
            private global::System.Data.DataColumn columnmmId;
            
            private global::System.Data.DataColumn column材料规格;
            
            private global::System.Data.DataColumn column当日进货量;
            
            private global::System.Data.DataColumn column累计进货量;
            
            private global::System.Data.DataColumn column试验编号;
            
            private global::System.Data.DataColumn column试验名称;
            
            private global::System.Data.DataColumn column试验员;
            
            private global::System.Data.DataColumn column试验结果;
            
            private global::System.Data.DataColumn column设定频率;
            
            private global::System.Data.DataColumn column实际频率;
            
            private global::System.Data.DataColumn column备注;
            
            private global::System.Data.DataColumn column录入时间;
            
            private global::System.Data.DataColumn column录入人员;
            
            private global::System.Data.DataColumn column合格指标;
            
            private global::System.Data.DataColumn column是否合格;
            
            private global::System.Data.DataColumn column台帐日期;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public materialTestAccountDataTable() {
                this.TableName = "materialTestAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal materialTestAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected materialTestAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mIdColumn {
                get {
                    return this.columnmId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mkIdColumn {
                get {
                    return this.columnmkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 材料种类Column {
                get {
                    return this.column材料种类;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mnIdColumn {
                get {
                    return this.columnmnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 材料名称Column {
                get {
                    return this.column材料名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mmIdColumn {
                get {
                    return this.columnmmId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 材料规格Column {
                get {
                    return this.column材料规格;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 当日进货量Column {
                get {
                    return this.column当日进货量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 累计进货量Column {
                get {
                    return this.column累计进货量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验编号Column {
                get {
                    return this.column试验编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验名称Column {
                get {
                    return this.column试验名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验员Column {
                get {
                    return this.column试验员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验结果Column {
                get {
                    return this.column试验结果;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设定频率Column {
                get {
                    return this.column设定频率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 实际频率Column {
                get {
                    return this.column实际频率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 录入时间Column {
                get {
                    return this.column录入时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 录入人员Column {
                get {
                    return this.column录入人员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 合格指标Column {
                get {
                    return this.column合格指标;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 是否合格Column {
                get {
                    return this.column是否合格;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 台帐日期Column {
                get {
                    return this.column台帐日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public materialTestAccountRow this[int index] {
                get {
                    return ((materialTestAccountRow)(this.Rows[index]));
                }
            }
            
            public event materialTestAccountRowChangeEventHandler materialTestAccountRowChanging;
            
            public event materialTestAccountRowChangeEventHandler materialTestAccountRowChanged;
            
            public event materialTestAccountRowChangeEventHandler materialTestAccountRowDeleting;
            
            public event materialTestAccountRowChangeEventHandler materialTestAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmaterialTestAccountRow(materialTestAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public materialTestAccountRow AddmaterialTestAccountRow(
                        long mId, 
                        string 材料种类, 
                        string 材料名称, 
                        string 材料规格, 
                        double 当日进货量, 
                        double 累计进货量, 
                        string 试验编号, 
                        string 试验名称, 
                        string 试验员, 
                        string 试验结果, 
                        string 设定频率, 
                        string 实际频率, 
                        string 备注, 
                        System.DateTime 录入时间, 
                        string 录入人员, 
                        string 合格指标, 
                        string 是否合格, 
                        string 台帐日期) {
                materialTestAccountRow rowmaterialTestAccountRow = ((materialTestAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        mId,
                        null,
                        材料种类,
                        null,
                        材料名称,
                        null,
                        材料规格,
                        当日进货量,
                        累计进货量,
                        试验编号,
                        试验名称,
                        试验员,
                        试验结果,
                        设定频率,
                        实际频率,
                        备注,
                        录入时间,
                        录入人员,
                        合格指标,
                        是否合格,
                        台帐日期};
                rowmaterialTestAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmaterialTestAccountRow);
                return rowmaterialTestAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public materialTestAccountRow FindByid(long id) {
                return ((materialTestAccountRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                materialTestAccountDataTable cln = ((materialTestAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new materialTestAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnmId = base.Columns["mId"];
                this.columnmkId = base.Columns["mkId"];
                this.column材料种类 = base.Columns["材料种类"];
                this.columnmnId = base.Columns["mnId"];
                this.column材料名称 = base.Columns["材料名称"];
                this.columnmmId = base.Columns["mmId"];
                this.column材料规格 = base.Columns["材料规格"];
                this.column当日进货量 = base.Columns["当日进货量"];
                this.column累计进货量 = base.Columns["累计进货量"];
                this.column试验编号 = base.Columns["试验编号"];
                this.column试验名称 = base.Columns["试验名称"];
                this.column试验员 = base.Columns["试验员"];
                this.column试验结果 = base.Columns["试验结果"];
                this.column设定频率 = base.Columns["设定频率"];
                this.column实际频率 = base.Columns["实际频率"];
                this.column备注 = base.Columns["备注"];
                this.column录入时间 = base.Columns["录入时间"];
                this.column录入人员 = base.Columns["录入人员"];
                this.column合格指标 = base.Columns["合格指标"];
                this.column是否合格 = base.Columns["是否合格"];
                this.column台帐日期 = base.Columns["台帐日期"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnmId = new global::System.Data.DataColumn("mId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmId);
                this.columnmkId = new global::System.Data.DataColumn("mkId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmkId);
                this.column材料种类 = new global::System.Data.DataColumn("材料种类", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column材料种类);
                this.columnmnId = new global::System.Data.DataColumn("mnId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmnId);
                this.column材料名称 = new global::System.Data.DataColumn("材料名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column材料名称);
                this.columnmmId = new global::System.Data.DataColumn("mmId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmmId);
                this.column材料规格 = new global::System.Data.DataColumn("材料规格", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column材料规格);
                this.column当日进货量 = new global::System.Data.DataColumn("当日进货量", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column当日进货量);
                this.column累计进货量 = new global::System.Data.DataColumn("累计进货量", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column累计进货量);
                this.column试验编号 = new global::System.Data.DataColumn("试验编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验编号);
                this.column试验名称 = new global::System.Data.DataColumn("试验名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验名称);
                this.column试验员 = new global::System.Data.DataColumn("试验员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验员);
                this.column试验结果 = new global::System.Data.DataColumn("试验结果", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验结果);
                this.column设定频率 = new global::System.Data.DataColumn("设定频率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设定频率);
                this.column实际频率 = new global::System.Data.DataColumn("实际频率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column实际频率);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.column录入时间 = new global::System.Data.DataColumn("录入时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column录入时间);
                this.column录入人员 = new global::System.Data.DataColumn("录入人员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column录入人员);
                this.column合格指标 = new global::System.Data.DataColumn("合格指标", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column合格指标);
                this.column是否合格 = new global::System.Data.DataColumn("是否合格", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column是否合格);
                this.column台帐日期 = new global::System.Data.DataColumn("台帐日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column台帐日期);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = -1;
                this.columnid.AutoIncrementStep = -1;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnmkId.AutoIncrement = true;
                this.columnmkId.AutoIncrementSeed = -1;
                this.columnmkId.AutoIncrementStep = -1;
                this.columnmkId.AllowDBNull = false;
                this.columnmkId.ReadOnly = true;
                this.column材料种类.MaxLength = 50;
                this.columnmnId.AutoIncrement = true;
                this.columnmnId.AutoIncrementSeed = -1;
                this.columnmnId.AutoIncrementStep = -1;
                this.columnmnId.AllowDBNull = false;
                this.columnmnId.ReadOnly = true;
                this.column材料名称.MaxLength = 50;
                this.columnmmId.AutoIncrement = true;
                this.columnmmId.AutoIncrementSeed = -1;
                this.columnmmId.AutoIncrementStep = -1;
                this.columnmmId.AllowDBNull = false;
                this.columnmmId.ReadOnly = true;
                this.column材料规格.MaxLength = 50;
                this.column试验编号.MaxLength = 200;
                this.column试验名称.MaxLength = 200;
                this.column试验员.MaxLength = 50;
                this.column试验结果.MaxLength = 2147483647;
                this.column设定频率.MaxLength = 50;
                this.column实际频率.MaxLength = 50;
                this.column备注.MaxLength = 2147483647;
                this.column录入人员.MaxLength = 50;
                this.column合格指标.MaxLength = 200;
                this.column是否合格.ReadOnly = true;
                this.column是否合格.MaxLength = 2;
                this.column台帐日期.ReadOnly = true;
                this.column台帐日期.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public materialTestAccountRow NewmaterialTestAccountRow() {
                return ((materialTestAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new materialTestAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(materialTestAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.materialTestAccountRowChanged != null)) {
                    this.materialTestAccountRowChanged(this, new materialTestAccountRowChangeEvent(((materialTestAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.materialTestAccountRowChanging != null)) {
                    this.materialTestAccountRowChanging(this, new materialTestAccountRowChangeEvent(((materialTestAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.materialTestAccountRowDeleted != null)) {
                    this.materialTestAccountRowDeleted(this, new materialTestAccountRowChangeEvent(((materialTestAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.materialTestAccountRowDeleting != null)) {
                    this.materialTestAccountRowDeleting(this, new materialTestAccountRowChangeEvent(((materialTestAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovematerialTestAccountRow(materialTestAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MaterialTestAccountDataSet ds = new MaterialTestAccountDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "materialTestAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class materialTestAccountRow : global::System.Data.DataRow {
            
            private materialTestAccountDataTable tablematerialTestAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal materialTestAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablematerialTestAccount = ((materialTestAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long id {
                get {
                    return ((long)(this[this.tablematerialTestAccount.idColumn]));
                }
                set {
                    this[this.tablematerialTestAccount.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long mId {
                get {
                    try {
                        return ((long)(this[this.tablematerialTestAccount.mIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“mId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.mIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long mkId {
                get {
                    return ((long)(this[this.tablematerialTestAccount.mkIdColumn]));
                }
                set {
                    this[this.tablematerialTestAccount.mkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 材料种类 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.材料种类Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“材料种类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.材料种类Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long mnId {
                get {
                    return ((long)(this[this.tablematerialTestAccount.mnIdColumn]));
                }
                set {
                    this[this.tablematerialTestAccount.mnIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 材料名称 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.材料名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“材料名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.材料名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long mmId {
                get {
                    return ((long)(this[this.tablematerialTestAccount.mmIdColumn]));
                }
                set {
                    this[this.tablematerialTestAccount.mmIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 材料规格 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.材料规格Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“材料规格”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.材料规格Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 当日进货量 {
                get {
                    try {
                        return ((double)(this[this.tablematerialTestAccount.当日进货量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“当日进货量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.当日进货量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 累计进货量 {
                get {
                    try {
                        return ((double)(this[this.tablematerialTestAccount.累计进货量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“累计进货量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.累计进货量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验编号 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.试验编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“试验编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.试验编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验名称 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.试验名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“试验名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.试验名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验员 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.试验员Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“试验员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.试验员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验结果 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.试验结果Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“试验结果”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.试验结果Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设定频率 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.设定频率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“设定频率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.设定频率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 实际频率 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.实际频率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“实际频率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.实际频率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 录入时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablematerialTestAccount.录入时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“录入时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.录入时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 录入人员 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.录入人员Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“录入人员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.录入人员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 合格指标 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.合格指标Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“合格指标”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.合格指标Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 是否合格 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.是否合格Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“是否合格”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.是否合格Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 台帐日期 {
                get {
                    try {
                        return ((string)(this[this.tablematerialTestAccount.台帐日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“materialTestAccount”中列“台帐日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematerialTestAccount.台帐日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmIdNull() {
                return this.IsNull(this.tablematerialTestAccount.mIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmIdNull() {
                this[this.tablematerialTestAccount.mIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is材料种类Null() {
                return this.IsNull(this.tablematerialTestAccount.材料种类Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set材料种类Null() {
                this[this.tablematerialTestAccount.材料种类Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is材料名称Null() {
                return this.IsNull(this.tablematerialTestAccount.材料名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set材料名称Null() {
                this[this.tablematerialTestAccount.材料名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is材料规格Null() {
                return this.IsNull(this.tablematerialTestAccount.材料规格Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set材料规格Null() {
                this[this.tablematerialTestAccount.材料规格Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is当日进货量Null() {
                return this.IsNull(this.tablematerialTestAccount.当日进货量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set当日进货量Null() {
                this[this.tablematerialTestAccount.当日进货量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is累计进货量Null() {
                return this.IsNull(this.tablematerialTestAccount.累计进货量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set累计进货量Null() {
                this[this.tablematerialTestAccount.累计进货量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is试验编号Null() {
                return this.IsNull(this.tablematerialTestAccount.试验编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set试验编号Null() {
                this[this.tablematerialTestAccount.试验编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is试验名称Null() {
                return this.IsNull(this.tablematerialTestAccount.试验名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set试验名称Null() {
                this[this.tablematerialTestAccount.试验名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is试验员Null() {
                return this.IsNull(this.tablematerialTestAccount.试验员Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set试验员Null() {
                this[this.tablematerialTestAccount.试验员Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is试验结果Null() {
                return this.IsNull(this.tablematerialTestAccount.试验结果Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set试验结果Null() {
                this[this.tablematerialTestAccount.试验结果Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设定频率Null() {
                return this.IsNull(this.tablematerialTestAccount.设定频率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设定频率Null() {
                this[this.tablematerialTestAccount.设定频率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is实际频率Null() {
                return this.IsNull(this.tablematerialTestAccount.实际频率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set实际频率Null() {
                this[this.tablematerialTestAccount.实际频率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.tablematerialTestAccount.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.tablematerialTestAccount.备注Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is录入时间Null() {
                return this.IsNull(this.tablematerialTestAccount.录入时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set录入时间Null() {
                this[this.tablematerialTestAccount.录入时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is录入人员Null() {
                return this.IsNull(this.tablematerialTestAccount.录入人员Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set录入人员Null() {
                this[this.tablematerialTestAccount.录入人员Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is合格指标Null() {
                return this.IsNull(this.tablematerialTestAccount.合格指标Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set合格指标Null() {
                this[this.tablematerialTestAccount.合格指标Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is是否合格Null() {
                return this.IsNull(this.tablematerialTestAccount.是否合格Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set是否合格Null() {
                this[this.tablematerialTestAccount.是否合格Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is台帐日期Null() {
                return this.IsNull(this.tablematerialTestAccount.台帐日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set台帐日期Null() {
                this[this.tablematerialTestAccount.台帐日期Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class materialTestAccountRowChangeEvent : global::System.EventArgs {
            
            private materialTestAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public materialTestAccountRowChangeEvent(materialTestAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public materialTestAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DasherStation.dataSet.MaterialTestAccountDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class materialTestAccountTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public materialTestAccountTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "materialTestAccount";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("mId", "mId");
            tableMapping.ColumnMappings.Add("mkId", "mkId");
            tableMapping.ColumnMappings.Add("材料种类", "材料种类");
            tableMapping.ColumnMappings.Add("mnId", "mnId");
            tableMapping.ColumnMappings.Add("材料名称", "材料名称");
            tableMapping.ColumnMappings.Add("mmId", "mmId");
            tableMapping.ColumnMappings.Add("材料规格", "材料规格");
            tableMapping.ColumnMappings.Add("当日进货量", "当日进货量");
            tableMapping.ColumnMappings.Add("累计进货量", "累计进货量");
            tableMapping.ColumnMappings.Add("试验编号", "试验编号");
            tableMapping.ColumnMappings.Add("试验名称", "试验名称");
            tableMapping.ColumnMappings.Add("试验员", "试验员");
            tableMapping.ColumnMappings.Add("试验结果", "试验结果");
            tableMapping.ColumnMappings.Add("设定频率", "设定频率");
            tableMapping.ColumnMappings.Add("实际频率", "实际频率");
            tableMapping.ColumnMappings.Add("备注", "备注");
            tableMapping.ColumnMappings.Add("录入时间", "录入时间");
            tableMapping.ColumnMappings.Add("录入人员", "录入人员");
            tableMapping.ColumnMappings.Add("合格指标", "合格指标");
            tableMapping.ColumnMappings.Add("是否合格", "是否合格");
            tableMapping.ColumnMappings.Add("台帐日期", "台帐日期");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DasherStation.Properties.Settings.Default.DasherStationConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT  materialTestAccount.id, materialTestAccount.mId, CONVERT(varchar(10), materialTestAccount.accountDate, 120) AS 台帐日期, materialKind.id AS mkId, 
               materialKind.sort AS 材料种类, materialName.id AS mnId, materialName.name AS 材料名称, materialModel.id AS mmId, materialModel.model AS 材料规格, 
               materialTestAccount.dayQuantity AS 当日进货量, materialTestAccount.totalQuantity AS 累计进货量, materialTestAccount.no AS 试验编号, 
               materialTestAccount.name AS 试验名称, materialTestAccount.man AS 试验员, materialTestAccount.result AS 试验结果, 
               CASE materialTestAccount.mark WHEN 'False' THEN '否' WHEN 'True' THEN '是' END AS 是否合格, materialTestGuideline.frequency AS 设定频率, 
               materialTestAccount.frequency AS 实际频率, materialTestAccount.remark AS 备注, materialTestAccount.inputDate AS 录入时间, 
               materialTestAccount.inputMan AS 录入人员, materialTestGuideline.testGuideline AS 合格指标
FROM     materialTestAccount LEFT OUTER JOIN
               materialTestGuideline ON materialTestAccount.mId = materialTestGuideline.mId INNER JOIN
               material ON materialTestAccount.mId = material.id INNER JOIN
               materialName ON material.mnId = materialName.id INNER JOIN
               materialModel ON material.mmId = materialModel.id INNER JOIN
               materialKind ON materialName.mkId = materialKind.id
WHERE  (materialTestAccount.accountDate >= @date) AND (materialTestAccount.accountDate < DATEADD(day, 1, @date))";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "accountDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MaterialTestAccountDataSet.materialTestAccountDataTable dataTable, global::System.Nullable<global::System.DateTime> date) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MaterialTestAccountDataSet.materialTestAccountDataTable GetData(global::System.Nullable<global::System.DateTime> date) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MaterialTestAccountDataSet.materialTestAccountDataTable dataTable = new MaterialTestAccountDataSet.materialTestAccountDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(MaterialTestAccountDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(MaterialTestAccountDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(MaterialTestAccountDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(MaterialTestAccountDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591