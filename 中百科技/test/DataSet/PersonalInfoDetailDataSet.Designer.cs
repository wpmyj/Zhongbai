//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DasherStation.dataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PersonalInfoDetailDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PersonalInfoDetailDataSet : global::System.Data.DataSet {
        
        private personnelInfoDataTable tablepersonnelInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PersonalInfoDetailDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PersonalInfoDetailDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["personnelInfo"] != null)) {
                    base.Tables.Add(new personnelInfoDataTable(ds.Tables["personnelInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public personnelInfoDataTable personnelInfo {
            get {
                return this.tablepersonnelInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PersonalInfoDetailDataSet cln = ((PersonalInfoDetailDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["personnelInfo"] != null)) {
                    base.Tables.Add(new personnelInfoDataTable(ds.Tables["personnelInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablepersonnelInfo = ((personnelInfoDataTable)(base.Tables["personnelInfo"]));
            if ((initTable == true)) {
                if ((this.tablepersonnelInfo != null)) {
                    this.tablepersonnelInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PersonalInfoDetailDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PersonalInfoDetailDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablepersonnelInfo = new personnelInfoDataTable();
            base.Tables.Add(this.tablepersonnelInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepersonnelInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PersonalInfoDetailDataSet ds = new PersonalInfoDetailDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void personnelInfoRowChangeEventHandler(object sender, personnelInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class personnelInfoDataTable : global::System.Data.TypedTableBase<personnelInfoRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columnjudgeMarry;
            
            private global::System.Data.DataColumn columnpoliticalVisage;
            
            private global::System.Data.DataColumn columnbirthday;
            
            private global::System.Data.DataColumn columntiptopDegree;
            
            private global::System.Data.DataColumn columnspecialty;
            
            private global::System.Data.DataColumn columncompetencyCertificate;
            
            private global::System.Data.DataColumn columnIDCard;
            
            private global::System.Data.DataColumn columncontactMethod;
            
            private global::System.Data.DataColumn columnnationality;
            
            private global::System.Data.DataColumn columncontractNo;
            
            private global::System.Data.DataColumn columnaddress;
            
            private global::System.Data.DataColumn columnfunctionAssessDate;
            
            private global::System.Data.DataColumn columnnativePlace;
            
            private global::System.Data.DataColumn columndId;
            
            private global::System.Data.DataColumn columnstartWorkDate;
            
            private global::System.Data.DataColumn columnsalaryMethod;
            
            private global::System.Data.DataColumn columnresume;
            
            private global::System.Data.DataColumn columnhortationCastigate;
            
            private global::System.Data.DataColumn columndimissionDate;
            
            private global::System.Data.DataColumn columndimissionReason;
            
            private global::System.Data.DataColumn columnworkDate;
            
            private global::System.Data.DataColumn columnremark;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnsex;
            
            private global::System.Data.DataColumn columninputDate;
            
            private global::System.Data.DataColumn columninputMan;
            
            private global::System.Data.DataColumn columnkind;
            
            private global::System.Data.DataColumn columnptId;
            
            private global::System.Data.DataColumn columnmark;
            
            private global::System.Data.DataColumn columnbasicSalary;
            
            private global::System.Data.DataColumn columnpId;
            
            private global::System.Data.DataColumn column职位;
            
            private global::System.Data.DataColumn column部门;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personnelInfoDataTable() {
                this.TableName = "personnelInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personnelInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected personnelInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn judgeMarryColumn {
                get {
                    return this.columnjudgeMarry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn politicalVisageColumn {
                get {
                    return this.columnpoliticalVisage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn birthdayColumn {
                get {
                    return this.columnbirthday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tiptopDegreeColumn {
                get {
                    return this.columntiptopDegree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn specialtyColumn {
                get {
                    return this.columnspecialty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn competencyCertificateColumn {
                get {
                    return this.columncompetencyCertificate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDCardColumn {
                get {
                    return this.columnIDCard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contactMethodColumn {
                get {
                    return this.columncontactMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nationalityColumn {
                get {
                    return this.columnnationality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contractNoColumn {
                get {
                    return this.columncontractNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn functionAssessDateColumn {
                get {
                    return this.columnfunctionAssessDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nativePlaceColumn {
                get {
                    return this.columnnativePlace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dIdColumn {
                get {
                    return this.columndId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startWorkDateColumn {
                get {
                    return this.columnstartWorkDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn salaryMethodColumn {
                get {
                    return this.columnsalaryMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn resumeColumn {
                get {
                    return this.columnresume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hortationCastigateColumn {
                get {
                    return this.columnhortationCastigate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dimissionDateColumn {
                get {
                    return this.columndimissionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dimissionReasonColumn {
                get {
                    return this.columndimissionReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn workDateColumn {
                get {
                    return this.columnworkDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn remarkColumn {
                get {
                    return this.columnremark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputDateColumn {
                get {
                    return this.columninputDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputManColumn {
                get {
                    return this.columninputMan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kindColumn {
                get {
                    return this.columnkind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ptIdColumn {
                get {
                    return this.columnptId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn markColumn {
                get {
                    return this.columnmark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn basicSalaryColumn {
                get {
                    return this.columnbasicSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pIdColumn {
                get {
                    return this.columnpId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 职位Column {
                get {
                    return this.column职位;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 部门Column {
                get {
                    return this.column部门;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personnelInfoRow this[int index] {
                get {
                    return ((personnelInfoRow)(this.Rows[index]));
                }
            }
            
            public event personnelInfoRowChangeEventHandler personnelInfoRowChanging;
            
            public event personnelInfoRowChangeEventHandler personnelInfoRowChanged;
            
            public event personnelInfoRowChangeEventHandler personnelInfoRowDeleting;
            
            public event personnelInfoRowChangeEventHandler personnelInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpersonnelInfoRow(personnelInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personnelInfoRow AddpersonnelInfoRow(
                        string no, 
                        string judgeMarry, 
                        string politicalVisage, 
                        System.DateTime birthday, 
                        string tiptopDegree, 
                        string specialty, 
                        string competencyCertificate, 
                        string IDCard, 
                        string contactMethod, 
                        string nationality, 
                        string contractNo, 
                        string address, 
                        System.DateTime functionAssessDate, 
                        string nativePlace, 
                        long dId, 
                        System.DateTime startWorkDate, 
                        string salaryMethod, 
                        string resume, 
                        string hortationCastigate, 
                        System.DateTime dimissionDate, 
                        string dimissionReason, 
                        System.DateTime workDate, 
                        string remark, 
                        string name, 
                        string sex, 
                        System.DateTime inputDate, 
                        string inputMan, 
                        bool kind, 
                        long ptId, 
                        bool mark, 
                        decimal basicSalary, 
                        long pId, 
                        string 职位, 
                        string 部门) {
                personnelInfoRow rowpersonnelInfoRow = ((personnelInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        no,
                        judgeMarry,
                        politicalVisage,
                        birthday,
                        tiptopDegree,
                        specialty,
                        competencyCertificate,
                        IDCard,
                        contactMethod,
                        nationality,
                        contractNo,
                        address,
                        functionAssessDate,
                        nativePlace,
                        dId,
                        startWorkDate,
                        salaryMethod,
                        resume,
                        hortationCastigate,
                        dimissionDate,
                        dimissionReason,
                        workDate,
                        remark,
                        name,
                        sex,
                        inputDate,
                        inputMan,
                        kind,
                        ptId,
                        mark,
                        basicSalary,
                        pId,
                        职位,
                        部门};
                rowpersonnelInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpersonnelInfoRow);
                return rowpersonnelInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personnelInfoRow FindByid(long id) {
                return ((personnelInfoRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                personnelInfoDataTable cln = ((personnelInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new personnelInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnno = base.Columns["no"];
                this.columnjudgeMarry = base.Columns["judgeMarry"];
                this.columnpoliticalVisage = base.Columns["politicalVisage"];
                this.columnbirthday = base.Columns["birthday"];
                this.columntiptopDegree = base.Columns["tiptopDegree"];
                this.columnspecialty = base.Columns["specialty"];
                this.columncompetencyCertificate = base.Columns["competencyCertificate"];
                this.columnIDCard = base.Columns["IDCard"];
                this.columncontactMethod = base.Columns["contactMethod"];
                this.columnnationality = base.Columns["nationality"];
                this.columncontractNo = base.Columns["contractNo"];
                this.columnaddress = base.Columns["address"];
                this.columnfunctionAssessDate = base.Columns["functionAssessDate"];
                this.columnnativePlace = base.Columns["nativePlace"];
                this.columndId = base.Columns["dId"];
                this.columnstartWorkDate = base.Columns["startWorkDate"];
                this.columnsalaryMethod = base.Columns["salaryMethod"];
                this.columnresume = base.Columns["resume"];
                this.columnhortationCastigate = base.Columns["hortationCastigate"];
                this.columndimissionDate = base.Columns["dimissionDate"];
                this.columndimissionReason = base.Columns["dimissionReason"];
                this.columnworkDate = base.Columns["workDate"];
                this.columnremark = base.Columns["remark"];
                this.columnname = base.Columns["name"];
                this.columnsex = base.Columns["sex"];
                this.columninputDate = base.Columns["inputDate"];
                this.columninputMan = base.Columns["inputMan"];
                this.columnkind = base.Columns["kind"];
                this.columnptId = base.Columns["ptId"];
                this.columnmark = base.Columns["mark"];
                this.columnbasicSalary = base.Columns["basicSalary"];
                this.columnpId = base.Columns["pId"];
                this.column职位 = base.Columns["职位"];
                this.column部门 = base.Columns["部门"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnno = new global::System.Data.DataColumn("no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columnjudgeMarry = new global::System.Data.DataColumn("judgeMarry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjudgeMarry);
                this.columnpoliticalVisage = new global::System.Data.DataColumn("politicalVisage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpoliticalVisage);
                this.columnbirthday = new global::System.Data.DataColumn("birthday", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbirthday);
                this.columntiptopDegree = new global::System.Data.DataColumn("tiptopDegree", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntiptopDegree);
                this.columnspecialty = new global::System.Data.DataColumn("specialty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspecialty);
                this.columncompetencyCertificate = new global::System.Data.DataColumn("competencyCertificate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncompetencyCertificate);
                this.columnIDCard = new global::System.Data.DataColumn("IDCard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCard);
                this.columncontactMethod = new global::System.Data.DataColumn("contactMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontactMethod);
                this.columnnationality = new global::System.Data.DataColumn("nationality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnationality);
                this.columncontractNo = new global::System.Data.DataColumn("contractNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontractNo);
                this.columnaddress = new global::System.Data.DataColumn("address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddress);
                this.columnfunctionAssessDate = new global::System.Data.DataColumn("functionAssessDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfunctionAssessDate);
                this.columnnativePlace = new global::System.Data.DataColumn("nativePlace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnativePlace);
                this.columndId = new global::System.Data.DataColumn("dId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndId);
                this.columnstartWorkDate = new global::System.Data.DataColumn("startWorkDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartWorkDate);
                this.columnsalaryMethod = new global::System.Data.DataColumn("salaryMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsalaryMethod);
                this.columnresume = new global::System.Data.DataColumn("resume", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresume);
                this.columnhortationCastigate = new global::System.Data.DataColumn("hortationCastigate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhortationCastigate);
                this.columndimissionDate = new global::System.Data.DataColumn("dimissionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndimissionDate);
                this.columndimissionReason = new global::System.Data.DataColumn("dimissionReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndimissionReason);
                this.columnworkDate = new global::System.Data.DataColumn("workDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkDate);
                this.columnremark = new global::System.Data.DataColumn("remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremark);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnsex = new global::System.Data.DataColumn("sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsex);
                this.columninputDate = new global::System.Data.DataColumn("inputDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputDate);
                this.columninputMan = new global::System.Data.DataColumn("inputMan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputMan);
                this.columnkind = new global::System.Data.DataColumn("kind", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkind);
                this.columnptId = new global::System.Data.DataColumn("ptId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnptId);
                this.columnmark = new global::System.Data.DataColumn("mark", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmark);
                this.columnbasicSalary = new global::System.Data.DataColumn("basicSalary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbasicSalary);
                this.columnpId = new global::System.Data.DataColumn("pId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpId);
                this.column职位 = new global::System.Data.DataColumn("职位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column职位);
                this.column部门 = new global::System.Data.DataColumn("部门", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column部门);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = -1;
                this.columnid.AutoIncrementStep = -1;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnno.MaxLength = 50;
                this.columnjudgeMarry.MaxLength = 50;
                this.columnpoliticalVisage.MaxLength = 50;
                this.columntiptopDegree.MaxLength = 50;
                this.columnspecialty.MaxLength = 50;
                this.columncompetencyCertificate.MaxLength = 50;
                this.columnIDCard.MaxLength = 50;
                this.columncontactMethod.MaxLength = 50;
                this.columnnationality.MaxLength = 50;
                this.columncontractNo.MaxLength = 50;
                this.columnaddress.MaxLength = 50;
                this.columnnativePlace.MaxLength = 50;
                this.columnsalaryMethod.MaxLength = 50;
                this.columnresume.MaxLength = 2147483647;
                this.columnhortationCastigate.MaxLength = 2147483647;
                this.columndimissionReason.MaxLength = 2147483647;
                this.columnremark.MaxLength = 2147483647;
                this.columnname.MaxLength = 50;
                this.columnsex.MaxLength = 50;
                this.columninputMan.MaxLength = 50;
                this.column职位.MaxLength = 50;
                this.column部门.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personnelInfoRow NewpersonnelInfoRow() {
                return ((personnelInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new personnelInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(personnelInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.personnelInfoRowChanged != null)) {
                    this.personnelInfoRowChanged(this, new personnelInfoRowChangeEvent(((personnelInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.personnelInfoRowChanging != null)) {
                    this.personnelInfoRowChanging(this, new personnelInfoRowChangeEvent(((personnelInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.personnelInfoRowDeleted != null)) {
                    this.personnelInfoRowDeleted(this, new personnelInfoRowChangeEvent(((personnelInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.personnelInfoRowDeleting != null)) {
                    this.personnelInfoRowDeleting(this, new personnelInfoRowChangeEvent(((personnelInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepersonnelInfoRow(personnelInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PersonalInfoDetailDataSet ds = new PersonalInfoDetailDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "personnelInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class personnelInfoRow : global::System.Data.DataRow {
            
            private personnelInfoDataTable tablepersonnelInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personnelInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepersonnelInfo = ((personnelInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long id {
                get {
                    return ((long)(this[this.tablepersonnelInfo.idColumn]));
                }
                set {
                    this[this.tablepersonnelInfo.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string no {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“no”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string judgeMarry {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.judgeMarryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“judgeMarry”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.judgeMarryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string politicalVisage {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.politicalVisageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“politicalVisage”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.politicalVisageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime birthday {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepersonnelInfo.birthdayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“birthday”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.birthdayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tiptopDegree {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.tiptopDegreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“tiptopDegree”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.tiptopDegreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string specialty {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.specialtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“specialty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.specialtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string competencyCertificate {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.competencyCertificateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“competencyCertificate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.competencyCertificateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDCard {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.IDCardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“IDCard”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.IDCardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string contactMethod {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.contactMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“contactMethod”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.contactMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nationality {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.nationalityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“nationality”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.nationalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string contractNo {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.contractNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“contractNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.contractNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.addressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“address”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.addressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime functionAssessDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepersonnelInfo.functionAssessDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“functionAssessDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.functionAssessDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nativePlace {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.nativePlaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“nativePlace”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.nativePlaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long dId {
                get {
                    try {
                        return ((long)(this[this.tablepersonnelInfo.dIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“dId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.dIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startWorkDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepersonnelInfo.startWorkDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“startWorkDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.startWorkDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string salaryMethod {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.salaryMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“salaryMethod”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.salaryMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resume {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.resumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“resume”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.resumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hortationCastigate {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.hortationCastigateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“hortationCastigate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.hortationCastigateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dimissionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepersonnelInfo.dimissionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“dimissionDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.dimissionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dimissionReason {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.dimissionReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“dimissionReason”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.dimissionReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime workDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepersonnelInfo.workDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“workDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.workDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remark {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.remarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.remarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.sexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“sex”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.sexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime inputDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepersonnelInfo.inputDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“inputDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.inputDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inputMan {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.inputManColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“inputMan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.inputManColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool kind {
                get {
                    try {
                        return ((bool)(this[this.tablepersonnelInfo.kindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“kind”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.kindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ptId {
                get {
                    try {
                        return ((long)(this[this.tablepersonnelInfo.ptIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“ptId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.ptIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool mark {
                get {
                    try {
                        return ((bool)(this[this.tablepersonnelInfo.markColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“mark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.markColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal basicSalary {
                get {
                    try {
                        return ((decimal)(this[this.tablepersonnelInfo.basicSalaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“basicSalary”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.basicSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long pId {
                get {
                    try {
                        return ((long)(this[this.tablepersonnelInfo.pIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“pId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.pIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 职位 {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.职位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“职位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.职位Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 部门 {
                get {
                    try {
                        return ((string)(this[this.tablepersonnelInfo.部门Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“personnelInfo”中列“部门”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepersonnelInfo.部门Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tablepersonnelInfo.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tablepersonnelInfo.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjudgeMarryNull() {
                return this.IsNull(this.tablepersonnelInfo.judgeMarryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjudgeMarryNull() {
                this[this.tablepersonnelInfo.judgeMarryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspoliticalVisageNull() {
                return this.IsNull(this.tablepersonnelInfo.politicalVisageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpoliticalVisageNull() {
                this[this.tablepersonnelInfo.politicalVisageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbirthdayNull() {
                return this.IsNull(this.tablepersonnelInfo.birthdayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbirthdayNull() {
                this[this.tablepersonnelInfo.birthdayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstiptopDegreeNull() {
                return this.IsNull(this.tablepersonnelInfo.tiptopDegreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettiptopDegreeNull() {
                this[this.tablepersonnelInfo.tiptopDegreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspecialtyNull() {
                return this.IsNull(this.tablepersonnelInfo.specialtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspecialtyNull() {
                this[this.tablepersonnelInfo.specialtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscompetencyCertificateNull() {
                return this.IsNull(this.tablepersonnelInfo.competencyCertificateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcompetencyCertificateNull() {
                this[this.tablepersonnelInfo.competencyCertificateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDCardNull() {
                return this.IsNull(this.tablepersonnelInfo.IDCardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDCardNull() {
                this[this.tablepersonnelInfo.IDCardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontactMethodNull() {
                return this.IsNull(this.tablepersonnelInfo.contactMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontactMethodNull() {
                this[this.tablepersonnelInfo.contactMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationalityNull() {
                return this.IsNull(this.tablepersonnelInfo.nationalityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationalityNull() {
                this[this.tablepersonnelInfo.nationalityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontractNoNull() {
                return this.IsNull(this.tablepersonnelInfo.contractNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontractNoNull() {
                this[this.tablepersonnelInfo.contractNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddressNull() {
                return this.IsNull(this.tablepersonnelInfo.addressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddressNull() {
                this[this.tablepersonnelInfo.addressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfunctionAssessDateNull() {
                return this.IsNull(this.tablepersonnelInfo.functionAssessDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfunctionAssessDateNull() {
                this[this.tablepersonnelInfo.functionAssessDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnativePlaceNull() {
                return this.IsNull(this.tablepersonnelInfo.nativePlaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnativePlaceNull() {
                this[this.tablepersonnelInfo.nativePlaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdIdNull() {
                return this.IsNull(this.tablepersonnelInfo.dIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdIdNull() {
                this[this.tablepersonnelInfo.dIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartWorkDateNull() {
                return this.IsNull(this.tablepersonnelInfo.startWorkDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartWorkDateNull() {
                this[this.tablepersonnelInfo.startWorkDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssalaryMethodNull() {
                return this.IsNull(this.tablepersonnelInfo.salaryMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsalaryMethodNull() {
                this[this.tablepersonnelInfo.salaryMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresumeNull() {
                return this.IsNull(this.tablepersonnelInfo.resumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresumeNull() {
                this[this.tablepersonnelInfo.resumeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshortationCastigateNull() {
                return this.IsNull(this.tablepersonnelInfo.hortationCastigateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethortationCastigateNull() {
                this[this.tablepersonnelInfo.hortationCastigateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdimissionDateNull() {
                return this.IsNull(this.tablepersonnelInfo.dimissionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdimissionDateNull() {
                this[this.tablepersonnelInfo.dimissionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdimissionReasonNull() {
                return this.IsNull(this.tablepersonnelInfo.dimissionReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdimissionReasonNull() {
                this[this.tablepersonnelInfo.dimissionReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworkDateNull() {
                return this.IsNull(this.tablepersonnelInfo.workDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworkDateNull() {
                this[this.tablepersonnelInfo.workDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremarkNull() {
                return this.IsNull(this.tablepersonnelInfo.remarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremarkNull() {
                this[this.tablepersonnelInfo.remarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablepersonnelInfo.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablepersonnelInfo.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssexNull() {
                return this.IsNull(this.tablepersonnelInfo.sexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsexNull() {
                this[this.tablepersonnelInfo.sexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputDateNull() {
                return this.IsNull(this.tablepersonnelInfo.inputDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputDateNull() {
                this[this.tablepersonnelInfo.inputDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputManNull() {
                return this.IsNull(this.tablepersonnelInfo.inputManColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputManNull() {
                this[this.tablepersonnelInfo.inputManColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskindNull() {
                return this.IsNull(this.tablepersonnelInfo.kindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkindNull() {
                this[this.tablepersonnelInfo.kindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsptIdNull() {
                return this.IsNull(this.tablepersonnelInfo.ptIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetptIdNull() {
                this[this.tablepersonnelInfo.ptIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarkNull() {
                return this.IsNull(this.tablepersonnelInfo.markColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarkNull() {
                this[this.tablepersonnelInfo.markColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbasicSalaryNull() {
                return this.IsNull(this.tablepersonnelInfo.basicSalaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbasicSalaryNull() {
                this[this.tablepersonnelInfo.basicSalaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspIdNull() {
                return this.IsNull(this.tablepersonnelInfo.pIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpIdNull() {
                this[this.tablepersonnelInfo.pIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is职位Null() {
                return this.IsNull(this.tablepersonnelInfo.职位Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set职位Null() {
                this[this.tablepersonnelInfo.职位Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is部门Null() {
                return this.IsNull(this.tablepersonnelInfo.部门Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set部门Null() {
                this[this.tablepersonnelInfo.部门Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class personnelInfoRowChangeEvent : global::System.EventArgs {
            
            private personnelInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personnelInfoRowChangeEvent(personnelInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personnelInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DasherStation.dataSet.PersonalInfoDetailDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class personnelInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public personnelInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "personnelInfo";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("judgeMarry", "judgeMarry");
            tableMapping.ColumnMappings.Add("politicalVisage", "politicalVisage");
            tableMapping.ColumnMappings.Add("birthday", "birthday");
            tableMapping.ColumnMappings.Add("tiptopDegree", "tiptopDegree");
            tableMapping.ColumnMappings.Add("specialty", "specialty");
            tableMapping.ColumnMappings.Add("competencyCertificate", "competencyCertificate");
            tableMapping.ColumnMappings.Add("IDCard", "IDCard");
            tableMapping.ColumnMappings.Add("contactMethod", "contactMethod");
            tableMapping.ColumnMappings.Add("nationality", "nationality");
            tableMapping.ColumnMappings.Add("contractNo", "contractNo");
            tableMapping.ColumnMappings.Add("address", "address");
            tableMapping.ColumnMappings.Add("functionAssessDate", "functionAssessDate");
            tableMapping.ColumnMappings.Add("nativePlace", "nativePlace");
            tableMapping.ColumnMappings.Add("dId", "dId");
            tableMapping.ColumnMappings.Add("startWorkDate", "startWorkDate");
            tableMapping.ColumnMappings.Add("salaryMethod", "salaryMethod");
            tableMapping.ColumnMappings.Add("resume", "resume");
            tableMapping.ColumnMappings.Add("hortationCastigate", "hortationCastigate");
            tableMapping.ColumnMappings.Add("dimissionDate", "dimissionDate");
            tableMapping.ColumnMappings.Add("dimissionReason", "dimissionReason");
            tableMapping.ColumnMappings.Add("workDate", "workDate");
            tableMapping.ColumnMappings.Add("remark", "remark");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("sex", "sex");
            tableMapping.ColumnMappings.Add("inputDate", "inputDate");
            tableMapping.ColumnMappings.Add("inputMan", "inputMan");
            tableMapping.ColumnMappings.Add("kind", "kind");
            tableMapping.ColumnMappings.Add("ptId", "ptId");
            tableMapping.ColumnMappings.Add("mark", "mark");
            tableMapping.ColumnMappings.Add("basicSalary", "basicSalary");
            tableMapping.ColumnMappings.Add("pId", "pId");
            tableMapping.ColumnMappings.Add("职位", "职位");
            tableMapping.ColumnMappings.Add("部门", "部门");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DasherStation.Properties.Settings.Default.DasherStationConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     personnelInfo.id, personnelInfo.no, personnelInfo.judgeMarry, personnelInfo.politicalVisage, personnelInfo.birthday, personnelInfo.tiptopDegree, 
                      personnelInfo.specialty, personnelInfo.competencyCertificate, personnelInfo.IDCard, personnelInfo.contactMethod, personnelInfo.nationality, 
                      personnelInfo.contractNo, personnelInfo.address, personnelInfo.functionAssessDate, personnelInfo.nativePlace, personnelInfo.dId, 
                      personnelInfo.startWorkDate, personnelInfo.salaryMethod, personnelInfo.resume, personnelInfo.hortationCastigate, personnelInfo.dimissionDate, 
                      personnelInfo.dimissionReason, personnelInfo.workDate, personnelInfo.remark, personnelInfo.name, personnelInfo.sex, personnelInfo.inputDate, 
                      personnelInfo.inputMan, personnelInfo.kind, personnelInfo.ptId, personnelInfo.mark, personnelInfo.basicSalary, personnelInfo.pId, 
                      position.name AS '职位', department.name AS '部门'
FROM         personnelInfo LEFT OUTER JOIN
                      position ON personnelInfo.pId = position.id LEFT OUTER JOIN
                      department ON personnelInfo.dId = department.id
WHERE     (department.name LIKE '%' + @name + '%')";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "部门", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PersonalInfoDetailDataSet.personnelInfoDataTable dataTable, string name) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((name == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(name));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PersonalInfoDetailDataSet.personnelInfoDataTable GetData(string name) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((name == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(name));
            }
            PersonalInfoDetailDataSet.personnelInfoDataTable dataTable = new PersonalInfoDetailDataSet.personnelInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(PersonalInfoDetailDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(PersonalInfoDetailDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(PersonalInfoDetailDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(PersonalInfoDetailDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591