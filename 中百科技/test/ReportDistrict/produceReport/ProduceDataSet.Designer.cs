//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DasherStation.ReportDistrict.produceReport
{
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProduceDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProduceDataSet : global::System.Data.DataSet {
        
        private YearProducePlanDataTable tableYearProducePlan;
        
        private YearMaterialRequirementsPlanningDataTable tableYearMaterialRequirementsPlanning;
        
        private ProduceInfoDataTable tableProduceInfo;
        
        private 生产配合比信息DataTable table生产配合比信息;
        
        private 目标配合比信息DataTable table目标配合比信息;
        
        private 混合料生产情况记录DataTable table混合料生产情况记录;
        
        private 沥青生产情况记录DataTable table沥青生产情况记录;
        
        private 沥青加温生产情况记录DataTable table沥青加温生产情况记录;
        
        private 生产月统计报表DataTable table生产月统计报表;
        
        private 生产日统计报表DataTable table生产日统计报表;
        
        private 能源消耗统计DataTable table能源消耗统计;
        
        private 混合能源消耗记录DataTable table混合能源消耗记录;
        
        private 改性沥青生产能源消耗记录DataTable table改性沥青生产能源消耗记录;
        
        private 乳化沥青生产能源消耗记录DataTable table乳化沥青生产能源消耗记录;
        
        private 热油炉能源消耗记录DataTable table热油炉能源消耗记录;
        
        private 热油炉用煤详细记录DataTable table热油炉用煤详细记录;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProduceDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProduceDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["YearProducePlan"] != null)) {
                    base.Tables.Add(new YearProducePlanDataTable(ds.Tables["YearProducePlan"]));
                }
                if ((ds.Tables["YearMaterialRequirementsPlanning"] != null)) {
                    base.Tables.Add(new YearMaterialRequirementsPlanningDataTable(ds.Tables["YearMaterialRequirementsPlanning"]));
                }
                if ((ds.Tables["ProduceInfo"] != null)) {
                    base.Tables.Add(new ProduceInfoDataTable(ds.Tables["ProduceInfo"]));
                }
                if ((ds.Tables["生产配合比信息"] != null)) {
                    base.Tables.Add(new 生产配合比信息DataTable(ds.Tables["生产配合比信息"]));
                }
                if ((ds.Tables["目标配合比信息"] != null)) {
                    base.Tables.Add(new 目标配合比信息DataTable(ds.Tables["目标配合比信息"]));
                }
                if ((ds.Tables["混合料生产情况记录"] != null)) {
                    base.Tables.Add(new 混合料生产情况记录DataTable(ds.Tables["混合料生产情况记录"]));
                }
                if ((ds.Tables["沥青生产情况记录"] != null)) {
                    base.Tables.Add(new 沥青生产情况记录DataTable(ds.Tables["沥青生产情况记录"]));
                }
                if ((ds.Tables["沥青加温生产情况记录"] != null)) {
                    base.Tables.Add(new 沥青加温生产情况记录DataTable(ds.Tables["沥青加温生产情况记录"]));
                }
                if ((ds.Tables["生产月统计报表"] != null)) {
                    base.Tables.Add(new 生产月统计报表DataTable(ds.Tables["生产月统计报表"]));
                }
                if ((ds.Tables["生产日统计报表"] != null)) {
                    base.Tables.Add(new 生产日统计报表DataTable(ds.Tables["生产日统计报表"]));
                }
                if ((ds.Tables["能源消耗统计"] != null)) {
                    base.Tables.Add(new 能源消耗统计DataTable(ds.Tables["能源消耗统计"]));
                }
                if ((ds.Tables["混合能源消耗记录"] != null)) {
                    base.Tables.Add(new 混合能源消耗记录DataTable(ds.Tables["混合能源消耗记录"]));
                }
                if ((ds.Tables["改性沥青生产能源消耗记录"] != null)) {
                    base.Tables.Add(new 改性沥青生产能源消耗记录DataTable(ds.Tables["改性沥青生产能源消耗记录"]));
                }
                if ((ds.Tables["乳化沥青生产能源消耗记录"] != null)) {
                    base.Tables.Add(new 乳化沥青生产能源消耗记录DataTable(ds.Tables["乳化沥青生产能源消耗记录"]));
                }
                if ((ds.Tables["热油炉能源消耗记录"] != null)) {
                    base.Tables.Add(new 热油炉能源消耗记录DataTable(ds.Tables["热油炉能源消耗记录"]));
                }
                if ((ds.Tables["热油炉用煤详细记录"] != null)) {
                    base.Tables.Add(new 热油炉用煤详细记录DataTable(ds.Tables["热油炉用煤详细记录"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YearProducePlanDataTable YearProducePlan {
            get {
                return this.tableYearProducePlan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YearMaterialRequirementsPlanningDataTable YearMaterialRequirementsPlanning {
            get {
                return this.tableYearMaterialRequirementsPlanning;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProduceInfoDataTable ProduceInfo {
            get {
                return this.tableProduceInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 生产配合比信息DataTable 生产配合比信息 {
            get {
                return this.table生产配合比信息;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 目标配合比信息DataTable 目标配合比信息 {
            get {
                return this.table目标配合比信息;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 混合料生产情况记录DataTable 混合料生产情况记录 {
            get {
                return this.table混合料生产情况记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 沥青生产情况记录DataTable 沥青生产情况记录 {
            get {
                return this.table沥青生产情况记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 沥青加温生产情况记录DataTable 沥青加温生产情况记录 {
            get {
                return this.table沥青加温生产情况记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 生产月统计报表DataTable 生产月统计报表 {
            get {
                return this.table生产月统计报表;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 生产日统计报表DataTable 生产日统计报表 {
            get {
                return this.table生产日统计报表;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 能源消耗统计DataTable 能源消耗统计 {
            get {
                return this.table能源消耗统计;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 混合能源消耗记录DataTable 混合能源消耗记录 {
            get {
                return this.table混合能源消耗记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 改性沥青生产能源消耗记录DataTable 改性沥青生产能源消耗记录 {
            get {
                return this.table改性沥青生产能源消耗记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 乳化沥青生产能源消耗记录DataTable 乳化沥青生产能源消耗记录 {
            get {
                return this.table乳化沥青生产能源消耗记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 热油炉能源消耗记录DataTable 热油炉能源消耗记录 {
            get {
                return this.table热油炉能源消耗记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 热油炉用煤详细记录DataTable 热油炉用煤详细记录 {
            get {
                return this.table热油炉用煤详细记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProduceDataSet cln = ((ProduceDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["YearProducePlan"] != null)) {
                    base.Tables.Add(new YearProducePlanDataTable(ds.Tables["YearProducePlan"]));
                }
                if ((ds.Tables["YearMaterialRequirementsPlanning"] != null)) {
                    base.Tables.Add(new YearMaterialRequirementsPlanningDataTable(ds.Tables["YearMaterialRequirementsPlanning"]));
                }
                if ((ds.Tables["ProduceInfo"] != null)) {
                    base.Tables.Add(new ProduceInfoDataTable(ds.Tables["ProduceInfo"]));
                }
                if ((ds.Tables["生产配合比信息"] != null)) {
                    base.Tables.Add(new 生产配合比信息DataTable(ds.Tables["生产配合比信息"]));
                }
                if ((ds.Tables["目标配合比信息"] != null)) {
                    base.Tables.Add(new 目标配合比信息DataTable(ds.Tables["目标配合比信息"]));
                }
                if ((ds.Tables["混合料生产情况记录"] != null)) {
                    base.Tables.Add(new 混合料生产情况记录DataTable(ds.Tables["混合料生产情况记录"]));
                }
                if ((ds.Tables["沥青生产情况记录"] != null)) {
                    base.Tables.Add(new 沥青生产情况记录DataTable(ds.Tables["沥青生产情况记录"]));
                }
                if ((ds.Tables["沥青加温生产情况记录"] != null)) {
                    base.Tables.Add(new 沥青加温生产情况记录DataTable(ds.Tables["沥青加温生产情况记录"]));
                }
                if ((ds.Tables["生产月统计报表"] != null)) {
                    base.Tables.Add(new 生产月统计报表DataTable(ds.Tables["生产月统计报表"]));
                }
                if ((ds.Tables["生产日统计报表"] != null)) {
                    base.Tables.Add(new 生产日统计报表DataTable(ds.Tables["生产日统计报表"]));
                }
                if ((ds.Tables["能源消耗统计"] != null)) {
                    base.Tables.Add(new 能源消耗统计DataTable(ds.Tables["能源消耗统计"]));
                }
                if ((ds.Tables["混合能源消耗记录"] != null)) {
                    base.Tables.Add(new 混合能源消耗记录DataTable(ds.Tables["混合能源消耗记录"]));
                }
                if ((ds.Tables["改性沥青生产能源消耗记录"] != null)) {
                    base.Tables.Add(new 改性沥青生产能源消耗记录DataTable(ds.Tables["改性沥青生产能源消耗记录"]));
                }
                if ((ds.Tables["乳化沥青生产能源消耗记录"] != null)) {
                    base.Tables.Add(new 乳化沥青生产能源消耗记录DataTable(ds.Tables["乳化沥青生产能源消耗记录"]));
                }
                if ((ds.Tables["热油炉能源消耗记录"] != null)) {
                    base.Tables.Add(new 热油炉能源消耗记录DataTable(ds.Tables["热油炉能源消耗记录"]));
                }
                if ((ds.Tables["热油炉用煤详细记录"] != null)) {
                    base.Tables.Add(new 热油炉用煤详细记录DataTable(ds.Tables["热油炉用煤详细记录"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableYearProducePlan = ((YearProducePlanDataTable)(base.Tables["YearProducePlan"]));
            if ((initTable == true)) {
                if ((this.tableYearProducePlan != null)) {
                    this.tableYearProducePlan.InitVars();
                }
            }
            this.tableYearMaterialRequirementsPlanning = ((YearMaterialRequirementsPlanningDataTable)(base.Tables["YearMaterialRequirementsPlanning"]));
            if ((initTable == true)) {
                if ((this.tableYearMaterialRequirementsPlanning != null)) {
                    this.tableYearMaterialRequirementsPlanning.InitVars();
                }
            }
            this.tableProduceInfo = ((ProduceInfoDataTable)(base.Tables["ProduceInfo"]));
            if ((initTable == true)) {
                if ((this.tableProduceInfo != null)) {
                    this.tableProduceInfo.InitVars();
                }
            }
            this.table生产配合比信息 = ((生产配合比信息DataTable)(base.Tables["生产配合比信息"]));
            if ((initTable == true)) {
                if ((this.table生产配合比信息 != null)) {
                    this.table生产配合比信息.InitVars();
                }
            }
            this.table目标配合比信息 = ((目标配合比信息DataTable)(base.Tables["目标配合比信息"]));
            if ((initTable == true)) {
                if ((this.table目标配合比信息 != null)) {
                    this.table目标配合比信息.InitVars();
                }
            }
            this.table混合料生产情况记录 = ((混合料生产情况记录DataTable)(base.Tables["混合料生产情况记录"]));
            if ((initTable == true)) {
                if ((this.table混合料生产情况记录 != null)) {
                    this.table混合料生产情况记录.InitVars();
                }
            }
            this.table沥青生产情况记录 = ((沥青生产情况记录DataTable)(base.Tables["沥青生产情况记录"]));
            if ((initTable == true)) {
                if ((this.table沥青生产情况记录 != null)) {
                    this.table沥青生产情况记录.InitVars();
                }
            }
            this.table沥青加温生产情况记录 = ((沥青加温生产情况记录DataTable)(base.Tables["沥青加温生产情况记录"]));
            if ((initTable == true)) {
                if ((this.table沥青加温生产情况记录 != null)) {
                    this.table沥青加温生产情况记录.InitVars();
                }
            }
            this.table生产月统计报表 = ((生产月统计报表DataTable)(base.Tables["生产月统计报表"]));
            if ((initTable == true)) {
                if ((this.table生产月统计报表 != null)) {
                    this.table生产月统计报表.InitVars();
                }
            }
            this.table生产日统计报表 = ((生产日统计报表DataTable)(base.Tables["生产日统计报表"]));
            if ((initTable == true)) {
                if ((this.table生产日统计报表 != null)) {
                    this.table生产日统计报表.InitVars();
                }
            }
            this.table能源消耗统计 = ((能源消耗统计DataTable)(base.Tables["能源消耗统计"]));
            if ((initTable == true)) {
                if ((this.table能源消耗统计 != null)) {
                    this.table能源消耗统计.InitVars();
                }
            }
            this.table混合能源消耗记录 = ((混合能源消耗记录DataTable)(base.Tables["混合能源消耗记录"]));
            if ((initTable == true)) {
                if ((this.table混合能源消耗记录 != null)) {
                    this.table混合能源消耗记录.InitVars();
                }
            }
            this.table改性沥青生产能源消耗记录 = ((改性沥青生产能源消耗记录DataTable)(base.Tables["改性沥青生产能源消耗记录"]));
            if ((initTable == true)) {
                if ((this.table改性沥青生产能源消耗记录 != null)) {
                    this.table改性沥青生产能源消耗记录.InitVars();
                }
            }
            this.table乳化沥青生产能源消耗记录 = ((乳化沥青生产能源消耗记录DataTable)(base.Tables["乳化沥青生产能源消耗记录"]));
            if ((initTable == true)) {
                if ((this.table乳化沥青生产能源消耗记录 != null)) {
                    this.table乳化沥青生产能源消耗记录.InitVars();
                }
            }
            this.table热油炉能源消耗记录 = ((热油炉能源消耗记录DataTable)(base.Tables["热油炉能源消耗记录"]));
            if ((initTable == true)) {
                if ((this.table热油炉能源消耗记录 != null)) {
                    this.table热油炉能源消耗记录.InitVars();
                }
            }
            this.table热油炉用煤详细记录 = ((热油炉用煤详细记录DataTable)(base.Tables["热油炉用煤详细记录"]));
            if ((initTable == true)) {
                if ((this.table热油炉用煤详细记录 != null)) {
                    this.table热油炉用煤详细记录.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProduceDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProduceDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableYearProducePlan = new YearProducePlanDataTable();
            base.Tables.Add(this.tableYearProducePlan);
            this.tableYearMaterialRequirementsPlanning = new YearMaterialRequirementsPlanningDataTable();
            base.Tables.Add(this.tableYearMaterialRequirementsPlanning);
            this.tableProduceInfo = new ProduceInfoDataTable();
            base.Tables.Add(this.tableProduceInfo);
            this.table生产配合比信息 = new 生产配合比信息DataTable();
            base.Tables.Add(this.table生产配合比信息);
            this.table目标配合比信息 = new 目标配合比信息DataTable();
            base.Tables.Add(this.table目标配合比信息);
            this.table混合料生产情况记录 = new 混合料生产情况记录DataTable();
            base.Tables.Add(this.table混合料生产情况记录);
            this.table沥青生产情况记录 = new 沥青生产情况记录DataTable();
            base.Tables.Add(this.table沥青生产情况记录);
            this.table沥青加温生产情况记录 = new 沥青加温生产情况记录DataTable();
            base.Tables.Add(this.table沥青加温生产情况记录);
            this.table生产月统计报表 = new 生产月统计报表DataTable();
            base.Tables.Add(this.table生产月统计报表);
            this.table生产日统计报表 = new 生产日统计报表DataTable();
            base.Tables.Add(this.table生产日统计报表);
            this.table能源消耗统计 = new 能源消耗统计DataTable();
            base.Tables.Add(this.table能源消耗统计);
            this.table混合能源消耗记录 = new 混合能源消耗记录DataTable();
            base.Tables.Add(this.table混合能源消耗记录);
            this.table改性沥青生产能源消耗记录 = new 改性沥青生产能源消耗记录DataTable();
            base.Tables.Add(this.table改性沥青生产能源消耗记录);
            this.table乳化沥青生产能源消耗记录 = new 乳化沥青生产能源消耗记录DataTable();
            base.Tables.Add(this.table乳化沥青生产能源消耗记录);
            this.table热油炉能源消耗记录 = new 热油炉能源消耗记录DataTable();
            base.Tables.Add(this.table热油炉能源消耗记录);
            this.table热油炉用煤详细记录 = new 热油炉用煤详细记录DataTable();
            base.Tables.Add(this.table热油炉用煤详细记录);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeYearProducePlan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeYearMaterialRequirementsPlanning() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduceInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize生产配合比信息() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize目标配合比信息() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize混合料生产情况记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize沥青生产情况记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize沥青加温生产情况记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize生产月统计报表() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize生产日统计报表() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize能源消耗统计() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize混合能源消耗记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize改性沥青生产能源消耗记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize乳化沥青生产能源消耗记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize热油炉能源消耗记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize热油炉用煤详细记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProduceDataSet ds = new ProduceDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void YearProducePlanRowChangeEventHandler(object sender, YearProducePlanRowChangeEvent e);
        
        public delegate void YearMaterialRequirementsPlanningRowChangeEventHandler(object sender, YearMaterialRequirementsPlanningRowChangeEvent e);
        
        public delegate void ProduceInfoRowChangeEventHandler(object sender, ProduceInfoRowChangeEvent e);
        
        public delegate void 生产配合比信息RowChangeEventHandler(object sender, 生产配合比信息RowChangeEvent e);
        
        public delegate void 目标配合比信息RowChangeEventHandler(object sender, 目标配合比信息RowChangeEvent e);
        
        public delegate void 混合料生产情况记录RowChangeEventHandler(object sender, 混合料生产情况记录RowChangeEvent e);
        
        public delegate void 沥青生产情况记录RowChangeEventHandler(object sender, 沥青生产情况记录RowChangeEvent e);
        
        public delegate void 沥青加温生产情况记录RowChangeEventHandler(object sender, 沥青加温生产情况记录RowChangeEvent e);
        
        public delegate void 生产月统计报表RowChangeEventHandler(object sender, 生产月统计报表RowChangeEvent e);
        
        public delegate void 生产日统计报表RowChangeEventHandler(object sender, 生产日统计报表RowChangeEvent e);
        
        public delegate void 能源消耗统计RowChangeEventHandler(object sender, 能源消耗统计RowChangeEvent e);
        
        public delegate void 混合能源消耗记录RowChangeEventHandler(object sender, 混合能源消耗记录RowChangeEvent e);
        
        public delegate void 改性沥青生产能源消耗记录RowChangeEventHandler(object sender, 改性沥青生产能源消耗记录RowChangeEvent e);
        
        public delegate void 乳化沥青生产能源消耗记录RowChangeEventHandler(object sender, 乳化沥青生产能源消耗记录RowChangeEvent e);
        
        public delegate void 热油炉能源消耗记录RowChangeEventHandler(object sender, 热油炉能源消耗记录RowChangeEvent e);
        
        public delegate void 热油炉用煤详细记录RowChangeEventHandler(object sender, 热油炉用煤详细记录RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class YearProducePlanDataTable : global::System.Data.TypedTableBase<YearProducePlanRow> {
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnproduceQuantity;
            
            private global::System.Data.DataColumn columnjanuary;
            
            private global::System.Data.DataColumn columnfebruary;
            
            private global::System.Data.DataColumn columnmarch;
            
            private global::System.Data.DataColumn columnapril;
            
            private global::System.Data.DataColumn columnmay;
            
            private global::System.Data.DataColumn columnjune;
            
            private global::System.Data.DataColumn columnjuly;
            
            private global::System.Data.DataColumn columnaugust;
            
            private global::System.Data.DataColumn columnseptember;
            
            private global::System.Data.DataColumn columnoctober;
            
            private global::System.Data.DataColumn columnnovember;
            
            private global::System.Data.DataColumn columndecember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearProducePlanDataTable() {
                this.TableName = "YearProducePlan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal YearProducePlanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected YearProducePlanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn produceQuantityColumn {
                get {
                    return this.columnproduceQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn januaryColumn {
                get {
                    return this.columnjanuary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn februaryColumn {
                get {
                    return this.columnfebruary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn marchColumn {
                get {
                    return this.columnmarch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn aprilColumn {
                get {
                    return this.columnapril;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mayColumn {
                get {
                    return this.columnmay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn juneColumn {
                get {
                    return this.columnjune;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn julyColumn {
                get {
                    return this.columnjuly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn augustColumn {
                get {
                    return this.columnaugust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn septemberColumn {
                get {
                    return this.columnseptember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn octoberColumn {
                get {
                    return this.columnoctober;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn novemberColumn {
                get {
                    return this.columnnovember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn decemberColumn {
                get {
                    return this.columndecember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearProducePlanRow this[int index] {
                get {
                    return ((YearProducePlanRow)(this.Rows[index]));
                }
            }
            
            public event YearProducePlanRowChangeEventHandler YearProducePlanRowChanging;
            
            public event YearProducePlanRowChangeEventHandler YearProducePlanRowChanged;
            
            public event YearProducePlanRowChangeEventHandler YearProducePlanRowDeleting;
            
            public event YearProducePlanRowChangeEventHandler YearProducePlanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddYearProducePlanRow(YearProducePlanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearProducePlanRow AddYearProducePlanRow(
                        int sort, 
                        int name, 
                        string model, 
                        decimal produceQuantity, 
                        decimal january, 
                        decimal february, 
                        decimal march, 
                        decimal april, 
                        decimal may, 
                        decimal june, 
                        decimal july, 
                        decimal august, 
                        decimal september, 
                        decimal october, 
                        decimal november, 
                        decimal december) {
                YearProducePlanRow rowYearProducePlanRow = ((YearProducePlanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sort,
                        name,
                        model,
                        produceQuantity,
                        january,
                        february,
                        march,
                        april,
                        may,
                        june,
                        july,
                        august,
                        september,
                        october,
                        november,
                        december};
                rowYearProducePlanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowYearProducePlanRow);
                return rowYearProducePlanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                YearProducePlanDataTable cln = ((YearProducePlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new YearProducePlanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnproduceQuantity = base.Columns["produceQuantity"];
                this.columnjanuary = base.Columns["january"];
                this.columnfebruary = base.Columns["february"];
                this.columnmarch = base.Columns["march"];
                this.columnapril = base.Columns["april"];
                this.columnmay = base.Columns["may"];
                this.columnjune = base.Columns["june"];
                this.columnjuly = base.Columns["july"];
                this.columnaugust = base.Columns["august"];
                this.columnseptember = base.Columns["september"];
                this.columnoctober = base.Columns["october"];
                this.columnnovember = base.Columns["november"];
                this.columndecember = base.Columns["december"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnproduceQuantity = new global::System.Data.DataColumn("produceQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduceQuantity);
                this.columnjanuary = new global::System.Data.DataColumn("january", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjanuary);
                this.columnfebruary = new global::System.Data.DataColumn("february", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfebruary);
                this.columnmarch = new global::System.Data.DataColumn("march", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarch);
                this.columnapril = new global::System.Data.DataColumn("april", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapril);
                this.columnmay = new global::System.Data.DataColumn("may", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmay);
                this.columnjune = new global::System.Data.DataColumn("june", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjune);
                this.columnjuly = new global::System.Data.DataColumn("july", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjuly);
                this.columnaugust = new global::System.Data.DataColumn("august", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaugust);
                this.columnseptember = new global::System.Data.DataColumn("september", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseptember);
                this.columnoctober = new global::System.Data.DataColumn("october", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoctober);
                this.columnnovember = new global::System.Data.DataColumn("november", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnovember);
                this.columndecember = new global::System.Data.DataColumn("december", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndecember);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearProducePlanRow NewYearProducePlanRow() {
                return ((YearProducePlanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new YearProducePlanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(YearProducePlanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YearProducePlanRowChanged != null)) {
                    this.YearProducePlanRowChanged(this, new YearProducePlanRowChangeEvent(((YearProducePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YearProducePlanRowChanging != null)) {
                    this.YearProducePlanRowChanging(this, new YearProducePlanRowChangeEvent(((YearProducePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YearProducePlanRowDeleted != null)) {
                    this.YearProducePlanRowDeleted(this, new YearProducePlanRowChangeEvent(((YearProducePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YearProducePlanRowDeleting != null)) {
                    this.YearProducePlanRowDeleting(this, new YearProducePlanRowChangeEvent(((YearProducePlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveYearProducePlanRow(YearProducePlanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "YearProducePlanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class YearMaterialRequirementsPlanningDataTable : global::System.Data.TypedTableBase<YearMaterialRequirementsPlanningRow> {
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnjanuary;
            
            private global::System.Data.DataColumn columnfebruary;
            
            private global::System.Data.DataColumn columnmarch;
            
            private global::System.Data.DataColumn columnapril;
            
            private global::System.Data.DataColumn columnmay;
            
            private global::System.Data.DataColumn columnjune;
            
            private global::System.Data.DataColumn columnjuly;
            
            private global::System.Data.DataColumn columnaugust;
            
            private global::System.Data.DataColumn columnseptember;
            
            private global::System.Data.DataColumn columnoctober;
            
            private global::System.Data.DataColumn columnnovember;
            
            private global::System.Data.DataColumn columndecember;
            
            private global::System.Data.DataColumn columnquantity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearMaterialRequirementsPlanningDataTable() {
                this.TableName = "YearMaterialRequirementsPlanning";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal YearMaterialRequirementsPlanningDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected YearMaterialRequirementsPlanningDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn januaryColumn {
                get {
                    return this.columnjanuary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn februaryColumn {
                get {
                    return this.columnfebruary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn marchColumn {
                get {
                    return this.columnmarch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn aprilColumn {
                get {
                    return this.columnapril;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mayColumn {
                get {
                    return this.columnmay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn juneColumn {
                get {
                    return this.columnjune;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn julyColumn {
                get {
                    return this.columnjuly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn augustColumn {
                get {
                    return this.columnaugust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn septemberColumn {
                get {
                    return this.columnseptember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn octoberColumn {
                get {
                    return this.columnoctober;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn novemberColumn {
                get {
                    return this.columnnovember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn decemberColumn {
                get {
                    return this.columndecember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantityColumn {
                get {
                    return this.columnquantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearMaterialRequirementsPlanningRow this[int index] {
                get {
                    return ((YearMaterialRequirementsPlanningRow)(this.Rows[index]));
                }
            }
            
            public event YearMaterialRequirementsPlanningRowChangeEventHandler YearMaterialRequirementsPlanningRowChanging;
            
            public event YearMaterialRequirementsPlanningRowChangeEventHandler YearMaterialRequirementsPlanningRowChanged;
            
            public event YearMaterialRequirementsPlanningRowChangeEventHandler YearMaterialRequirementsPlanningRowDeleting;
            
            public event YearMaterialRequirementsPlanningRowChangeEventHandler YearMaterialRequirementsPlanningRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddYearMaterialRequirementsPlanningRow(YearMaterialRequirementsPlanningRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearMaterialRequirementsPlanningRow AddYearMaterialRequirementsPlanningRow(
                        string sort, 
                        string name, 
                        string model, 
                        string january, 
                        string february, 
                        string march, 
                        string april, 
                        string may, 
                        string june, 
                        string july, 
                        string august, 
                        string september, 
                        string october, 
                        string november, 
                        string december, 
                        string quantity) {
                YearMaterialRequirementsPlanningRow rowYearMaterialRequirementsPlanningRow = ((YearMaterialRequirementsPlanningRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sort,
                        name,
                        model,
                        january,
                        february,
                        march,
                        april,
                        may,
                        june,
                        july,
                        august,
                        september,
                        october,
                        november,
                        december,
                        quantity};
                rowYearMaterialRequirementsPlanningRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowYearMaterialRequirementsPlanningRow);
                return rowYearMaterialRequirementsPlanningRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                YearMaterialRequirementsPlanningDataTable cln = ((YearMaterialRequirementsPlanningDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new YearMaterialRequirementsPlanningDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnjanuary = base.Columns["january"];
                this.columnfebruary = base.Columns["february"];
                this.columnmarch = base.Columns["march"];
                this.columnapril = base.Columns["april"];
                this.columnmay = base.Columns["may"];
                this.columnjune = base.Columns["june"];
                this.columnjuly = base.Columns["july"];
                this.columnaugust = base.Columns["august"];
                this.columnseptember = base.Columns["september"];
                this.columnoctober = base.Columns["october"];
                this.columnnovember = base.Columns["november"];
                this.columndecember = base.Columns["december"];
                this.columnquantity = base.Columns["quantity"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnjanuary = new global::System.Data.DataColumn("january", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjanuary);
                this.columnfebruary = new global::System.Data.DataColumn("february", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfebruary);
                this.columnmarch = new global::System.Data.DataColumn("march", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarch);
                this.columnapril = new global::System.Data.DataColumn("april", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapril);
                this.columnmay = new global::System.Data.DataColumn("may", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmay);
                this.columnjune = new global::System.Data.DataColumn("june", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjune);
                this.columnjuly = new global::System.Data.DataColumn("july", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjuly);
                this.columnaugust = new global::System.Data.DataColumn("august", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaugust);
                this.columnseptember = new global::System.Data.DataColumn("september", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseptember);
                this.columnoctober = new global::System.Data.DataColumn("october", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoctober);
                this.columnnovember = new global::System.Data.DataColumn("november", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnovember);
                this.columndecember = new global::System.Data.DataColumn("december", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndecember);
                this.columnquantity = new global::System.Data.DataColumn("quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearMaterialRequirementsPlanningRow NewYearMaterialRequirementsPlanningRow() {
                return ((YearMaterialRequirementsPlanningRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new YearMaterialRequirementsPlanningRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(YearMaterialRequirementsPlanningRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YearMaterialRequirementsPlanningRowChanged != null)) {
                    this.YearMaterialRequirementsPlanningRowChanged(this, new YearMaterialRequirementsPlanningRowChangeEvent(((YearMaterialRequirementsPlanningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YearMaterialRequirementsPlanningRowChanging != null)) {
                    this.YearMaterialRequirementsPlanningRowChanging(this, new YearMaterialRequirementsPlanningRowChangeEvent(((YearMaterialRequirementsPlanningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YearMaterialRequirementsPlanningRowDeleted != null)) {
                    this.YearMaterialRequirementsPlanningRowDeleted(this, new YearMaterialRequirementsPlanningRowChangeEvent(((YearMaterialRequirementsPlanningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YearMaterialRequirementsPlanningRowDeleting != null)) {
                    this.YearMaterialRequirementsPlanningRowDeleting(this, new YearMaterialRequirementsPlanningRowChangeEvent(((YearMaterialRequirementsPlanningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveYearMaterialRequirementsPlanningRow(YearMaterialRequirementsPlanningRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "YearMaterialRequirementsPlanningDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProduceInfoDataTable : global::System.Data.TypedTableBase<ProduceInfoRow> {
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnplanQuantity;
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columnnotifyMan;
            
            private global::System.Data.DataColumn columnnotifyDate;
            
            private global::System.Data.DataColumn columnppid;
            
            private global::System.Data.DataColumn columntpid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProduceInfoDataTable() {
                this.TableName = "ProduceInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProduceInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProduceInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn planQuantityColumn {
                get {
                    return this.columnplanQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notifyManColumn {
                get {
                    return this.columnnotifyMan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notifyDateColumn {
                get {
                    return this.columnnotifyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ppidColumn {
                get {
                    return this.columnppid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tpidColumn {
                get {
                    return this.columntpid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProduceInfoRow this[int index] {
                get {
                    return ((ProduceInfoRow)(this.Rows[index]));
                }
            }
            
            public event ProduceInfoRowChangeEventHandler ProduceInfoRowChanging;
            
            public event ProduceInfoRowChangeEventHandler ProduceInfoRowChanged;
            
            public event ProduceInfoRowChangeEventHandler ProduceInfoRowDeleting;
            
            public event ProduceInfoRowChangeEventHandler ProduceInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProduceInfoRow(ProduceInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProduceInfoRow AddProduceInfoRow(string sort, string name, string model, string planQuantity, string startDate, string no, string notifyMan, string notifyDate, string ppid, string tpid) {
                ProduceInfoRow rowProduceInfoRow = ((ProduceInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sort,
                        name,
                        model,
                        planQuantity,
                        startDate,
                        no,
                        notifyMan,
                        notifyDate,
                        ppid,
                        tpid};
                rowProduceInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProduceInfoRow);
                return rowProduceInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProduceInfoDataTable cln = ((ProduceInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProduceInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnplanQuantity = base.Columns["planQuantity"];
                this.columnstartDate = base.Columns["startDate"];
                this.columnno = base.Columns["no"];
                this.columnnotifyMan = base.Columns["notifyMan"];
                this.columnnotifyDate = base.Columns["notifyDate"];
                this.columnppid = base.Columns["ppid"];
                this.columntpid = base.Columns["tpid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnplanQuantity = new global::System.Data.DataColumn("planQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnplanQuantity);
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnno = new global::System.Data.DataColumn("no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columnnotifyMan = new global::System.Data.DataColumn("notifyMan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotifyMan);
                this.columnnotifyDate = new global::System.Data.DataColumn("notifyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotifyDate);
                this.columnppid = new global::System.Data.DataColumn("ppid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnppid);
                this.columntpid = new global::System.Data.DataColumn("tpid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntpid);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProduceInfoRow NewProduceInfoRow() {
                return ((ProduceInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProduceInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProduceInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProduceInfoRowChanged != null)) {
                    this.ProduceInfoRowChanged(this, new ProduceInfoRowChangeEvent(((ProduceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProduceInfoRowChanging != null)) {
                    this.ProduceInfoRowChanging(this, new ProduceInfoRowChangeEvent(((ProduceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProduceInfoRowDeleted != null)) {
                    this.ProduceInfoRowDeleted(this, new ProduceInfoRowChangeEvent(((ProduceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProduceInfoRowDeleting != null)) {
                    this.ProduceInfoRowDeleting(this, new ProduceInfoRowChangeEvent(((ProduceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProduceInfoRow(ProduceInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProduceInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 生产配合比信息DataTable : global::System.Data.TypedTableBase<生产配合比信息Row> {
            
            private global::System.Data.DataColumn column生产配合比编号;
            
            private global::System.Data.DataColumn column沥青;
            
            private global::System.Data.DataColumn column石粉;
            
            private global::System.Data.DataColumn _column1_热料仓;
            
            private global::System.Data.DataColumn _column2_热料仓;
            
            private global::System.Data.DataColumn _column3_热料仓;
            
            private global::System.Data.DataColumn _column4_热料仓;
            
            private global::System.Data.DataColumn _column5_热料仓;
            
            private global::System.Data.DataColumn column填料;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产配合比信息DataTable() {
                this.TableName = "生产配合比信息";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 生产配合比信息DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 生产配合比信息DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产配合比编号Column {
                get {
                    return this.column生产配合比编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 沥青Column {
                get {
                    return this.column沥青;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 石粉Column {
                get {
                    return this.column石粉;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _1_热料仓Column {
                get {
                    return this._column1_热料仓;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _2_热料仓Column {
                get {
                    return this._column2_热料仓;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3_热料仓Column {
                get {
                    return this._column3_热料仓;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_热料仓Column {
                get {
                    return this._column4_热料仓;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5_热料仓Column {
                get {
                    return this._column5_热料仓;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 填料Column {
                get {
                    return this.column填料;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产配合比信息Row this[int index] {
                get {
                    return ((生产配合比信息Row)(this.Rows[index]));
                }
            }
            
            public event 生产配合比信息RowChangeEventHandler 生产配合比信息RowChanging;
            
            public event 生产配合比信息RowChangeEventHandler 生产配合比信息RowChanged;
            
            public event 生产配合比信息RowChangeEventHandler 生产配合比信息RowDeleting;
            
            public event 生产配合比信息RowChangeEventHandler 生产配合比信息RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add生产配合比信息Row(生产配合比信息Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产配合比信息Row Add生产配合比信息Row(string 生产配合比编号, string 沥青, string 石粉, string _1_热料仓, string _2_热料仓, string _3_热料仓, string _4_热料仓, string _5_热料仓, string 填料) {
                生产配合比信息Row row生产配合比信息Row = ((生产配合比信息Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产配合比编号,
                        沥青,
                        石粉,
                        _1_热料仓,
                        _2_热料仓,
                        _3_热料仓,
                        _4_热料仓,
                        _5_热料仓,
                        填料};
                row生产配合比信息Row.ItemArray = columnValuesArray;
                this.Rows.Add(row生产配合比信息Row);
                return row生产配合比信息Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                生产配合比信息DataTable cln = ((生产配合比信息DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 生产配合比信息DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产配合比编号 = base.Columns["生产配合比编号"];
                this.column沥青 = base.Columns["沥青"];
                this.column石粉 = base.Columns["石粉"];
                this._column1_热料仓 = base.Columns["1#热料仓"];
                this._column2_热料仓 = base.Columns["2#热料仓"];
                this._column3_热料仓 = base.Columns["3#热料仓"];
                this._column4_热料仓 = base.Columns["4#热料仓"];
                this._column5_热料仓 = base.Columns["5#热料仓"];
                this.column填料 = base.Columns["填料"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产配合比编号 = new global::System.Data.DataColumn("生产配合比编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产配合比编号);
                this.column沥青 = new global::System.Data.DataColumn("沥青", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column沥青);
                this.column石粉 = new global::System.Data.DataColumn("石粉", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column石粉);
                this._column1_热料仓 = new global::System.Data.DataColumn("1#热料仓", typeof(string), null, global::System.Data.MappingType.Element);
                this._column1_热料仓.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column1_热料仓");
                this._column1_热料仓.ExtendedProperties.Add("Generator_UserColumnName", "1#热料仓");
                base.Columns.Add(this._column1_热料仓);
                this._column2_热料仓 = new global::System.Data.DataColumn("2#热料仓", typeof(string), null, global::System.Data.MappingType.Element);
                this._column2_热料仓.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column2_热料仓");
                this._column2_热料仓.ExtendedProperties.Add("Generator_UserColumnName", "2#热料仓");
                base.Columns.Add(this._column2_热料仓);
                this._column3_热料仓 = new global::System.Data.DataColumn("3#热料仓", typeof(string), null, global::System.Data.MappingType.Element);
                this._column3_热料仓.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3_热料仓");
                this._column3_热料仓.ExtendedProperties.Add("Generator_UserColumnName", "3#热料仓");
                base.Columns.Add(this._column3_热料仓);
                this._column4_热料仓 = new global::System.Data.DataColumn("4#热料仓", typeof(string), null, global::System.Data.MappingType.Element);
                this._column4_热料仓.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_热料仓");
                this._column4_热料仓.ExtendedProperties.Add("Generator_UserColumnName", "4#热料仓");
                base.Columns.Add(this._column4_热料仓);
                this._column5_热料仓 = new global::System.Data.DataColumn("5#热料仓", typeof(string), null, global::System.Data.MappingType.Element);
                this._column5_热料仓.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5_热料仓");
                this._column5_热料仓.ExtendedProperties.Add("Generator_UserColumnName", "5#热料仓");
                base.Columns.Add(this._column5_热料仓);
                this.column填料 = new global::System.Data.DataColumn("填料", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column填料);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产配合比信息Row New生产配合比信息Row() {
                return ((生产配合比信息Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 生产配合比信息Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(生产配合比信息Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.生产配合比信息RowChanged != null)) {
                    this.生产配合比信息RowChanged(this, new 生产配合比信息RowChangeEvent(((生产配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.生产配合比信息RowChanging != null)) {
                    this.生产配合比信息RowChanging(this, new 生产配合比信息RowChangeEvent(((生产配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.生产配合比信息RowDeleted != null)) {
                    this.生产配合比信息RowDeleted(this, new 生产配合比信息RowChangeEvent(((生产配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.生产配合比信息RowDeleting != null)) {
                    this.生产配合比信息RowDeleting(this, new 生产配合比信息RowChangeEvent(((生产配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove生产配合比信息Row(生产配合比信息Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "生产配合比信息DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 目标配合比信息DataTable : global::System.Data.TypedTableBase<目标配合比信息Row> {
            
            private global::System.Data.DataColumn column目标配合比编号;
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column材料种类;
            
            private global::System.Data.DataColumn column材料名称;
            
            private global::System.Data.DataColumn column规格型号;
            
            private global::System.Data.DataColumn column油石比;
            
            private global::System.Data.DataColumn column产地;
            
            private global::System.Data.DataColumn column生产厂家;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 目标配合比信息DataTable() {
                this.TableName = "目标配合比信息";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 目标配合比信息DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 目标配合比信息DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 目标配合比编号Column {
                get {
                    return this.column目标配合比编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 材料种类Column {
                get {
                    return this.column材料种类;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 材料名称Column {
                get {
                    return this.column材料名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格型号Column {
                get {
                    return this.column规格型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 油石比Column {
                get {
                    return this.column油石比;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产地Column {
                get {
                    return this.column产地;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产厂家Column {
                get {
                    return this.column生产厂家;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 目标配合比信息Row this[int index] {
                get {
                    return ((目标配合比信息Row)(this.Rows[index]));
                }
            }
            
            public event 目标配合比信息RowChangeEventHandler 目标配合比信息RowChanging;
            
            public event 目标配合比信息RowChangeEventHandler 目标配合比信息RowChanged;
            
            public event 目标配合比信息RowChangeEventHandler 目标配合比信息RowDeleting;
            
            public event 目标配合比信息RowChangeEventHandler 目标配合比信息RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add目标配合比信息Row(目标配合比信息Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 目标配合比信息Row Add目标配合比信息Row(string 目标配合比编号, string 序号, string 材料种类, string 材料名称, string 规格型号, string 油石比, string 产地, string 生产厂家) {
                目标配合比信息Row row目标配合比信息Row = ((目标配合比信息Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        目标配合比编号,
                        序号,
                        材料种类,
                        材料名称,
                        规格型号,
                        油石比,
                        产地,
                        生产厂家};
                row目标配合比信息Row.ItemArray = columnValuesArray;
                this.Rows.Add(row目标配合比信息Row);
                return row目标配合比信息Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                目标配合比信息DataTable cln = ((目标配合比信息DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 目标配合比信息DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column目标配合比编号 = base.Columns["目标配合比编号"];
                this.column序号 = base.Columns["序号"];
                this.column材料种类 = base.Columns["材料种类"];
                this.column材料名称 = base.Columns["材料名称"];
                this.column规格型号 = base.Columns["规格型号"];
                this.column油石比 = base.Columns["油石比"];
                this.column产地 = base.Columns["产地"];
                this.column生产厂家 = base.Columns["生产厂家"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column目标配合比编号 = new global::System.Data.DataColumn("目标配合比编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column目标配合比编号);
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column材料种类 = new global::System.Data.DataColumn("材料种类", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column材料种类);
                this.column材料名称 = new global::System.Data.DataColumn("材料名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column材料名称);
                this.column规格型号 = new global::System.Data.DataColumn("规格型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格型号);
                this.column油石比 = new global::System.Data.DataColumn("油石比", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column油石比);
                this.column产地 = new global::System.Data.DataColumn("产地", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产地);
                this.column生产厂家 = new global::System.Data.DataColumn("生产厂家", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产厂家);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 目标配合比信息Row New目标配合比信息Row() {
                return ((目标配合比信息Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 目标配合比信息Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(目标配合比信息Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.目标配合比信息RowChanged != null)) {
                    this.目标配合比信息RowChanged(this, new 目标配合比信息RowChangeEvent(((目标配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.目标配合比信息RowChanging != null)) {
                    this.目标配合比信息RowChanging(this, new 目标配合比信息RowChangeEvent(((目标配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.目标配合比信息RowDeleted != null)) {
                    this.目标配合比信息RowDeleted(this, new 目标配合比信息RowChangeEvent(((目标配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.目标配合比信息RowDeleting != null)) {
                    this.目标配合比信息RowDeleting(this, new 目标配合比信息RowChangeEvent(((目标配合比信息Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove目标配合比信息Row(目标配合比信息Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "目标配合比信息DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 混合料生产情况记录DataTable : global::System.Data.TypedTableBase<混合料生产情况记录Row> {
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column开机时间;
            
            private global::System.Data.DataColumn column关机时间;
            
            private global::System.Data.DataColumn column设备名称;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column规格型号;
            
            private global::System.Data.DataColumn column产品产量;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column生产班组;
            
            private global::System.Data.DataColumn column天气情况;
            
            private global::System.Data.DataColumn column正品数量;
            
            private global::System.Data.DataColumn column废品数量;
            
            private global::System.Data.DataColumn column粗集料含水率;
            
            private global::System.Data.DataColumn column细集料含水率;
            
            private global::System.Data.DataColumn column气温1;
            
            private global::System.Data.DataColumn column气温2;
            
            private global::System.Data.DataColumn column气温3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合料生产情况记录DataTable() {
                this.TableName = "混合料生产情况记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 混合料生产情况记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 混合料生产情况记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 开机时间Column {
                get {
                    return this.column开机时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 关机时间Column {
                get {
                    return this.column关机时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格型号Column {
                get {
                    return this.column规格型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品产量Column {
                get {
                    return this.column产品产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产班组Column {
                get {
                    return this.column生产班组;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 天气情况Column {
                get {
                    return this.column天气情况;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 正品数量Column {
                get {
                    return this.column正品数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 废品数量Column {
                get {
                    return this.column废品数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 粗集料含水率Column {
                get {
                    return this.column粗集料含水率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 细集料含水率Column {
                get {
                    return this.column细集料含水率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 气温1Column {
                get {
                    return this.column气温1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 气温2Column {
                get {
                    return this.column气温2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 气温3Column {
                get {
                    return this.column气温3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合料生产情况记录Row this[int index] {
                get {
                    return ((混合料生产情况记录Row)(this.Rows[index]));
                }
            }
            
            public event 混合料生产情况记录RowChangeEventHandler 混合料生产情况记录RowChanging;
            
            public event 混合料生产情况记录RowChangeEventHandler 混合料生产情况记录RowChanged;
            
            public event 混合料生产情况记录RowChangeEventHandler 混合料生产情况记录RowDeleting;
            
            public event 混合料生产情况记录RowChangeEventHandler 混合料生产情况记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add混合料生产情况记录Row(混合料生产情况记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合料生产情况记录Row Add混合料生产情况记录Row(
                        string 生产日期, 
                        string 开机时间, 
                        string 关机时间, 
                        string 设备名称, 
                        string 产品名称, 
                        string 规格型号, 
                        string 产品产量, 
                        string 设备编号, 
                        string 生产班组, 
                        string 天气情况, 
                        string 正品数量, 
                        string 废品数量, 
                        string 粗集料含水率, 
                        string 细集料含水率, 
                        string 气温1, 
                        string 气温2, 
                        string 气温3) {
                混合料生产情况记录Row row混合料生产情况记录Row = ((混合料生产情况记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产日期,
                        开机时间,
                        关机时间,
                        设备名称,
                        产品名称,
                        规格型号,
                        产品产量,
                        设备编号,
                        生产班组,
                        天气情况,
                        正品数量,
                        废品数量,
                        粗集料含水率,
                        细集料含水率,
                        气温1,
                        气温2,
                        气温3};
                row混合料生产情况记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row混合料生产情况记录Row);
                return row混合料生产情况记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                混合料生产情况记录DataTable cln = ((混合料生产情况记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 混合料生产情况记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产日期 = base.Columns["生产日期"];
                this.column开机时间 = base.Columns["开机时间"];
                this.column关机时间 = base.Columns["关机时间"];
                this.column设备名称 = base.Columns["设备名称"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column规格型号 = base.Columns["规格型号"];
                this.column产品产量 = base.Columns["产品产量"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column生产班组 = base.Columns["生产班组"];
                this.column天气情况 = base.Columns["天气情况"];
                this.column正品数量 = base.Columns["正品数量"];
                this.column废品数量 = base.Columns["废品数量"];
                this.column粗集料含水率 = base.Columns["粗集料含水率"];
                this.column细集料含水率 = base.Columns["细集料含水率"];
                this.column气温1 = base.Columns["气温1"];
                this.column气温2 = base.Columns["气温2"];
                this.column气温3 = base.Columns["气温3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column开机时间 = new global::System.Data.DataColumn("开机时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column开机时间);
                this.column关机时间 = new global::System.Data.DataColumn("关机时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column关机时间);
                this.column设备名称 = new global::System.Data.DataColumn("设备名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备名称);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column规格型号 = new global::System.Data.DataColumn("规格型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格型号);
                this.column产品产量 = new global::System.Data.DataColumn("产品产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品产量);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column生产班组 = new global::System.Data.DataColumn("生产班组", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产班组);
                this.column天气情况 = new global::System.Data.DataColumn("天气情况", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column天气情况);
                this.column正品数量 = new global::System.Data.DataColumn("正品数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column正品数量);
                this.column废品数量 = new global::System.Data.DataColumn("废品数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column废品数量);
                this.column粗集料含水率 = new global::System.Data.DataColumn("粗集料含水率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column粗集料含水率);
                this.column细集料含水率 = new global::System.Data.DataColumn("细集料含水率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column细集料含水率);
                this.column气温1 = new global::System.Data.DataColumn("气温1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column气温1);
                this.column气温2 = new global::System.Data.DataColumn("气温2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column气温2);
                this.column气温3 = new global::System.Data.DataColumn("气温3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column气温3);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合料生产情况记录Row New混合料生产情况记录Row() {
                return ((混合料生产情况记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 混合料生产情况记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(混合料生产情况记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.混合料生产情况记录RowChanged != null)) {
                    this.混合料生产情况记录RowChanged(this, new 混合料生产情况记录RowChangeEvent(((混合料生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.混合料生产情况记录RowChanging != null)) {
                    this.混合料生产情况记录RowChanging(this, new 混合料生产情况记录RowChangeEvent(((混合料生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.混合料生产情况记录RowDeleted != null)) {
                    this.混合料生产情况记录RowDeleted(this, new 混合料生产情况记录RowChangeEvent(((混合料生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.混合料生产情况记录RowDeleting != null)) {
                    this.混合料生产情况记录RowDeleting(this, new 混合料生产情况记录RowChangeEvent(((混合料生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove混合料生产情况记录Row(混合料生产情况记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "混合料生产情况记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 沥青生产情况记录DataTable : global::System.Data.TypedTableBase<沥青生产情况记录Row> {
            
            private global::System.Data.DataColumn column设备名称;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column开机时间;
            
            private global::System.Data.DataColumn column关机时间;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column规格型号;
            
            private global::System.Data.DataColumn column产品产量;
            
            private global::System.Data.DataColumn column生产人数;
            
            private global::System.Data.DataColumn column消耗人工;
            
            private global::System.Data.DataColumn column天气情况;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青生产情况记录DataTable() {
                this.TableName = "沥青生产情况记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 沥青生产情况记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 沥青生产情况记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 开机时间Column {
                get {
                    return this.column开机时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 关机时间Column {
                get {
                    return this.column关机时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格型号Column {
                get {
                    return this.column规格型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品产量Column {
                get {
                    return this.column产品产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产人数Column {
                get {
                    return this.column生产人数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 消耗人工Column {
                get {
                    return this.column消耗人工;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 天气情况Column {
                get {
                    return this.column天气情况;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青生产情况记录Row this[int index] {
                get {
                    return ((沥青生产情况记录Row)(this.Rows[index]));
                }
            }
            
            public event 沥青生产情况记录RowChangeEventHandler 沥青生产情况记录RowChanging;
            
            public event 沥青生产情况记录RowChangeEventHandler 沥青生产情况记录RowChanged;
            
            public event 沥青生产情况记录RowChangeEventHandler 沥青生产情况记录RowDeleting;
            
            public event 沥青生产情况记录RowChangeEventHandler 沥青生产情况记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add沥青生产情况记录Row(沥青生产情况记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青生产情况记录Row Add沥青生产情况记录Row(string 设备名称, string 设备编号, string 生产日期, string 开机时间, string 关机时间, string 产品名称, string 规格型号, string 产品产量, string 生产人数, string 消耗人工, string 天气情况) {
                沥青生产情况记录Row row沥青生产情况记录Row = ((沥青生产情况记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        设备名称,
                        设备编号,
                        生产日期,
                        开机时间,
                        关机时间,
                        产品名称,
                        规格型号,
                        产品产量,
                        生产人数,
                        消耗人工,
                        天气情况};
                row沥青生产情况记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row沥青生产情况记录Row);
                return row沥青生产情况记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                沥青生产情况记录DataTable cln = ((沥青生产情况记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 沥青生产情况记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column设备名称 = base.Columns["设备名称"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column生产日期 = base.Columns["生产日期"];
                this.column开机时间 = base.Columns["开机时间"];
                this.column关机时间 = base.Columns["关机时间"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column规格型号 = base.Columns["规格型号"];
                this.column产品产量 = base.Columns["产品产量"];
                this.column生产人数 = base.Columns["生产人数"];
                this.column消耗人工 = base.Columns["消耗人工"];
                this.column天气情况 = base.Columns["天气情况"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column设备名称 = new global::System.Data.DataColumn("设备名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备名称);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column开机时间 = new global::System.Data.DataColumn("开机时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column开机时间);
                this.column关机时间 = new global::System.Data.DataColumn("关机时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column关机时间);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column规格型号 = new global::System.Data.DataColumn("规格型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格型号);
                this.column产品产量 = new global::System.Data.DataColumn("产品产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品产量);
                this.column生产人数 = new global::System.Data.DataColumn("生产人数", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产人数);
                this.column消耗人工 = new global::System.Data.DataColumn("消耗人工", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column消耗人工);
                this.column天气情况 = new global::System.Data.DataColumn("天气情况", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column天气情况);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青生产情况记录Row New沥青生产情况记录Row() {
                return ((沥青生产情况记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 沥青生产情况记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(沥青生产情况记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.沥青生产情况记录RowChanged != null)) {
                    this.沥青生产情况记录RowChanged(this, new 沥青生产情况记录RowChangeEvent(((沥青生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.沥青生产情况记录RowChanging != null)) {
                    this.沥青生产情况记录RowChanging(this, new 沥青生产情况记录RowChangeEvent(((沥青生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.沥青生产情况记录RowDeleted != null)) {
                    this.沥青生产情况记录RowDeleted(this, new 沥青生产情况记录RowChangeEvent(((沥青生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.沥青生产情况记录RowDeleting != null)) {
                    this.沥青生产情况记录RowDeleting(this, new 沥青生产情况记录RowChangeEvent(((沥青生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove沥青生产情况记录Row(沥青生产情况记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "沥青生产情况记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 沥青加温生产情况记录DataTable : global::System.Data.TypedTableBase<沥青加温生产情况记录Row> {
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column设备名称;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column开机时间;
            
            private global::System.Data.DataColumn column停机时间;
            
            private global::System.Data.DataColumn column负责人;
            
            private global::System.Data.DataColumn column生产班组;
            
            private global::System.Data.DataColumn column天气情况;
            
            private global::System.Data.DataColumn column备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青加温生产情况记录DataTable() {
                this.TableName = "沥青加温生产情况记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 沥青加温生产情况记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 沥青加温生产情况记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 开机时间Column {
                get {
                    return this.column开机时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 停机时间Column {
                get {
                    return this.column停机时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 负责人Column {
                get {
                    return this.column负责人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产班组Column {
                get {
                    return this.column生产班组;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 天气情况Column {
                get {
                    return this.column天气情况;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青加温生产情况记录Row this[int index] {
                get {
                    return ((沥青加温生产情况记录Row)(this.Rows[index]));
                }
            }
            
            public event 沥青加温生产情况记录RowChangeEventHandler 沥青加温生产情况记录RowChanging;
            
            public event 沥青加温生产情况记录RowChangeEventHandler 沥青加温生产情况记录RowChanged;
            
            public event 沥青加温生产情况记录RowChangeEventHandler 沥青加温生产情况记录RowDeleting;
            
            public event 沥青加温生产情况记录RowChangeEventHandler 沥青加温生产情况记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add沥青加温生产情况记录Row(沥青加温生产情况记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青加温生产情况记录Row Add沥青加温生产情况记录Row(string 生产日期, string 设备名称, string 设备编号, string 开机时间, string 停机时间, string 负责人, string 生产班组, string 天气情况, string 备注) {
                沥青加温生产情况记录Row row沥青加温生产情况记录Row = ((沥青加温生产情况记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产日期,
                        设备名称,
                        设备编号,
                        开机时间,
                        停机时间,
                        负责人,
                        生产班组,
                        天气情况,
                        备注};
                row沥青加温生产情况记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row沥青加温生产情况记录Row);
                return row沥青加温生产情况记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                沥青加温生产情况记录DataTable cln = ((沥青加温生产情况记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 沥青加温生产情况记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产日期 = base.Columns["生产日期"];
                this.column设备名称 = base.Columns["设备名称"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column开机时间 = base.Columns["开机时间"];
                this.column停机时间 = base.Columns["停机时间"];
                this.column负责人 = base.Columns["负责人"];
                this.column生产班组 = base.Columns["生产班组"];
                this.column天气情况 = base.Columns["天气情况"];
                this.column备注 = base.Columns["备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column设备名称 = new global::System.Data.DataColumn("设备名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备名称);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column开机时间 = new global::System.Data.DataColumn("开机时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column开机时间);
                this.column停机时间 = new global::System.Data.DataColumn("停机时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column停机时间);
                this.column负责人 = new global::System.Data.DataColumn("负责人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column负责人);
                this.column生产班组 = new global::System.Data.DataColumn("生产班组", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产班组);
                this.column天气情况 = new global::System.Data.DataColumn("天气情况", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column天气情况);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青加温生产情况记录Row New沥青加温生产情况记录Row() {
                return ((沥青加温生产情况记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 沥青加温生产情况记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(沥青加温生产情况记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.沥青加温生产情况记录RowChanged != null)) {
                    this.沥青加温生产情况记录RowChanged(this, new 沥青加温生产情况记录RowChangeEvent(((沥青加温生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.沥青加温生产情况记录RowChanging != null)) {
                    this.沥青加温生产情况记录RowChanging(this, new 沥青加温生产情况记录RowChangeEvent(((沥青加温生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.沥青加温生产情况记录RowDeleted != null)) {
                    this.沥青加温生产情况记录RowDeleted(this, new 沥青加温生产情况记录RowChangeEvent(((沥青加温生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.沥青加温生产情况记录RowDeleting != null)) {
                    this.沥青加温生产情况记录RowDeleting(this, new 沥青加温生产情况记录RowChangeEvent(((沥青加温生产情况记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove沥青加温生产情况记录Row(沥青加温生产情况记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "沥青加温生产情况记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 生产月统计报表DataTable : global::System.Data.TypedTableBase<生产月统计报表Row> {
            
            private global::System.Data.DataColumn column年月;
            
            private global::System.Data.DataColumn column产品种类;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column规格型号;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column月生产量;
            
            private global::System.Data.DataColumn column上月生产量;
            
            private global::System.Data.DataColumn column累计生产量;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产月统计报表DataTable() {
                this.TableName = "生产月统计报表";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 生产月统计报表DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 生产月统计报表DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年月Column {
                get {
                    return this.column年月;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品种类Column {
                get {
                    return this.column产品种类;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格型号Column {
                get {
                    return this.column规格型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 月生产量Column {
                get {
                    return this.column月生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 上月生产量Column {
                get {
                    return this.column上月生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 累计生产量Column {
                get {
                    return this.column累计生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产月统计报表Row this[int index] {
                get {
                    return ((生产月统计报表Row)(this.Rows[index]));
                }
            }
            
            public event 生产月统计报表RowChangeEventHandler 生产月统计报表RowChanging;
            
            public event 生产月统计报表RowChangeEventHandler 生产月统计报表RowChanged;
            
            public event 生产月统计报表RowChangeEventHandler 生产月统计报表RowDeleting;
            
            public event 生产月统计报表RowChangeEventHandler 生产月统计报表RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add生产月统计报表Row(生产月统计报表Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产月统计报表Row Add生产月统计报表Row(string 年月, string 产品种类, string 产品名称, string 规格型号, string 设备编号, string 月生产量, string 上月生产量, string 累计生产量) {
                生产月统计报表Row row生产月统计报表Row = ((生产月统计报表Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        年月,
                        产品种类,
                        产品名称,
                        规格型号,
                        设备编号,
                        月生产量,
                        上月生产量,
                        累计生产量};
                row生产月统计报表Row.ItemArray = columnValuesArray;
                this.Rows.Add(row生产月统计报表Row);
                return row生产月统计报表Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                生产月统计报表DataTable cln = ((生产月统计报表DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 生产月统计报表DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column年月 = base.Columns["年月"];
                this.column产品种类 = base.Columns["产品种类"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column规格型号 = base.Columns["规格型号"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column月生产量 = base.Columns["月生产量"];
                this.column上月生产量 = base.Columns["上月生产量"];
                this.column累计生产量 = base.Columns["累计生产量"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column年月 = new global::System.Data.DataColumn("年月", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年月);
                this.column产品种类 = new global::System.Data.DataColumn("产品种类", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品种类);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column规格型号 = new global::System.Data.DataColumn("规格型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格型号);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column月生产量 = new global::System.Data.DataColumn("月生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column月生产量);
                this.column上月生产量 = new global::System.Data.DataColumn("上月生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column上月生产量);
                this.column累计生产量 = new global::System.Data.DataColumn("累计生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column累计生产量);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产月统计报表Row New生产月统计报表Row() {
                return ((生产月统计报表Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 生产月统计报表Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(生产月统计报表Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.生产月统计报表RowChanged != null)) {
                    this.生产月统计报表RowChanged(this, new 生产月统计报表RowChangeEvent(((生产月统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.生产月统计报表RowChanging != null)) {
                    this.生产月统计报表RowChanging(this, new 生产月统计报表RowChangeEvent(((生产月统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.生产月统计报表RowDeleted != null)) {
                    this.生产月统计报表RowDeleted(this, new 生产月统计报表RowChangeEvent(((生产月统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.生产月统计报表RowDeleting != null)) {
                    this.生产月统计报表RowDeleting(this, new 生产月统计报表RowChangeEvent(((生产月统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove生产月统计报表Row(生产月统计报表Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "生产月统计报表DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 生产日统计报表DataTable : global::System.Data.TypedTableBase<生产日统计报表Row> {
            
            private global::System.Data.DataColumn column日期;
            
            private global::System.Data.DataColumn column产品种类;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column规格型号;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column设备名称;
            
            private global::System.Data.DataColumn column日生产量;
            
            private global::System.Data.DataColumn column累计生产量;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产日统计报表DataTable() {
                this.TableName = "生产日统计报表";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 生产日统计报表DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 生产日统计报表DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 日期Column {
                get {
                    return this.column日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品种类Column {
                get {
                    return this.column产品种类;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格型号Column {
                get {
                    return this.column规格型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 日生产量Column {
                get {
                    return this.column日生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 累计生产量Column {
                get {
                    return this.column累计生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产日统计报表Row this[int index] {
                get {
                    return ((生产日统计报表Row)(this.Rows[index]));
                }
            }
            
            public event 生产日统计报表RowChangeEventHandler 生产日统计报表RowChanging;
            
            public event 生产日统计报表RowChangeEventHandler 生产日统计报表RowChanged;
            
            public event 生产日统计报表RowChangeEventHandler 生产日统计报表RowDeleting;
            
            public event 生产日统计报表RowChangeEventHandler 生产日统计报表RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add生产日统计报表Row(生产日统计报表Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产日统计报表Row Add生产日统计报表Row(string 日期, string 产品种类, string 产品名称, string 规格型号, string 设备编号, string 设备名称, string 日生产量, string 累计生产量) {
                生产日统计报表Row row生产日统计报表Row = ((生产日统计报表Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        日期,
                        产品种类,
                        产品名称,
                        规格型号,
                        设备编号,
                        设备名称,
                        日生产量,
                        累计生产量};
                row生产日统计报表Row.ItemArray = columnValuesArray;
                this.Rows.Add(row生产日统计报表Row);
                return row生产日统计报表Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                生产日统计报表DataTable cln = ((生产日统计报表DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 生产日统计报表DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column日期 = base.Columns["日期"];
                this.column产品种类 = base.Columns["产品种类"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column规格型号 = base.Columns["规格型号"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column设备名称 = base.Columns["设备名称"];
                this.column日生产量 = base.Columns["日生产量"];
                this.column累计生产量 = base.Columns["累计生产量"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column日期 = new global::System.Data.DataColumn("日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column日期);
                this.column产品种类 = new global::System.Data.DataColumn("产品种类", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品种类);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column规格型号 = new global::System.Data.DataColumn("规格型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格型号);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column设备名称 = new global::System.Data.DataColumn("设备名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备名称);
                this.column日生产量 = new global::System.Data.DataColumn("日生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column日生产量);
                this.column累计生产量 = new global::System.Data.DataColumn("累计生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column累计生产量);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产日统计报表Row New生产日统计报表Row() {
                return ((生产日统计报表Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 生产日统计报表Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(生产日统计报表Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.生产日统计报表RowChanged != null)) {
                    this.生产日统计报表RowChanged(this, new 生产日统计报表RowChangeEvent(((生产日统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.生产日统计报表RowChanging != null)) {
                    this.生产日统计报表RowChanging(this, new 生产日统计报表RowChangeEvent(((生产日统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.生产日统计报表RowDeleted != null)) {
                    this.生产日统计报表RowDeleted(this, new 生产日统计报表RowChangeEvent(((生产日统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.生产日统计报表RowDeleting != null)) {
                    this.生产日统计报表RowDeleting(this, new 生产日统计报表RowChangeEvent(((生产日统计报表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove生产日统计报表Row(生产日统计报表Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "生产日统计报表DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 能源消耗统计DataTable : global::System.Data.TypedTableBase<能源消耗统计Row> {
            
            private global::System.Data.DataColumn column年月;
            
            private global::System.Data.DataColumn column燃料名称;
            
            private global::System.Data.DataColumn column规格型号;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column当月燃料用量;
            
            private global::System.Data.DataColumn column当月用电量;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 能源消耗统计DataTable() {
                this.TableName = "能源消耗统计";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 能源消耗统计DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 能源消耗统计DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年月Column {
                get {
                    return this.column年月;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料名称Column {
                get {
                    return this.column燃料名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格型号Column {
                get {
                    return this.column规格型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 当月燃料用量Column {
                get {
                    return this.column当月燃料用量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 当月用电量Column {
                get {
                    return this.column当月用电量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 能源消耗统计Row this[int index] {
                get {
                    return ((能源消耗统计Row)(this.Rows[index]));
                }
            }
            
            public event 能源消耗统计RowChangeEventHandler 能源消耗统计RowChanging;
            
            public event 能源消耗统计RowChangeEventHandler 能源消耗统计RowChanged;
            
            public event 能源消耗统计RowChangeEventHandler 能源消耗统计RowDeleting;
            
            public event 能源消耗统计RowChangeEventHandler 能源消耗统计RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add能源消耗统计Row(能源消耗统计Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 能源消耗统计Row Add能源消耗统计Row(string 年月, string 燃料名称, string 规格型号, string 设备编号, string 当月燃料用量, string 当月用电量) {
                能源消耗统计Row row能源消耗统计Row = ((能源消耗统计Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        年月,
                        燃料名称,
                        规格型号,
                        设备编号,
                        当月燃料用量,
                        当月用电量};
                row能源消耗统计Row.ItemArray = columnValuesArray;
                this.Rows.Add(row能源消耗统计Row);
                return row能源消耗统计Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                能源消耗统计DataTable cln = ((能源消耗统计DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 能源消耗统计DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column年月 = base.Columns["年月"];
                this.column燃料名称 = base.Columns["燃料名称"];
                this.column规格型号 = base.Columns["规格型号"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column当月燃料用量 = base.Columns["当月燃料用量"];
                this.column当月用电量 = base.Columns["当月用电量"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column年月 = new global::System.Data.DataColumn("年月", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年月);
                this.column燃料名称 = new global::System.Data.DataColumn("燃料名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料名称);
                this.column规格型号 = new global::System.Data.DataColumn("规格型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格型号);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column当月燃料用量 = new global::System.Data.DataColumn("当月燃料用量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column当月燃料用量);
                this.column当月用电量 = new global::System.Data.DataColumn("当月用电量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column当月用电量);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 能源消耗统计Row New能源消耗统计Row() {
                return ((能源消耗统计Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 能源消耗统计Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(能源消耗统计Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.能源消耗统计RowChanged != null)) {
                    this.能源消耗统计RowChanged(this, new 能源消耗统计RowChangeEvent(((能源消耗统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.能源消耗统计RowChanging != null)) {
                    this.能源消耗统计RowChanging(this, new 能源消耗统计RowChangeEvent(((能源消耗统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.能源消耗统计RowDeleted != null)) {
                    this.能源消耗统计RowDeleted(this, new 能源消耗统计RowChangeEvent(((能源消耗统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.能源消耗统计RowDeleting != null)) {
                    this.能源消耗统计RowDeleting(this, new 能源消耗统计RowChangeEvent(((能源消耗统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove能源消耗统计Row(能源消耗统计Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "能源消耗统计DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 混合能源消耗记录DataTable : global::System.Data.TypedTableBase<混合能源消耗记录Row> {
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column设备名称;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column产品型号;
            
            private global::System.Data.DataColumn column生产量;
            
            private global::System.Data.DataColumn column燃料名称;
            
            private global::System.Data.DataColumn column燃料型号;
            
            private global::System.Data.DataColumn column燃油煤量;
            
            private global::System.Data.DataColumn column燃料消耗率;
            
            private global::System.Data.DataColumn column用电量;
            
            private global::System.Data.DataColumn column用电消耗率;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合能源消耗记录DataTable() {
                this.TableName = "混合能源消耗记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 混合能源消耗记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 混合能源消耗记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品型号Column {
                get {
                    return this.column产品型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产量Column {
                get {
                    return this.column生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料名称Column {
                get {
                    return this.column燃料名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料型号Column {
                get {
                    return this.column燃料型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃油煤量Column {
                get {
                    return this.column燃油煤量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料消耗率Column {
                get {
                    return this.column燃料消耗率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用电量Column {
                get {
                    return this.column用电量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用电消耗率Column {
                get {
                    return this.column用电消耗率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合能源消耗记录Row this[int index] {
                get {
                    return ((混合能源消耗记录Row)(this.Rows[index]));
                }
            }
            
            public event 混合能源消耗记录RowChangeEventHandler 混合能源消耗记录RowChanging;
            
            public event 混合能源消耗记录RowChangeEventHandler 混合能源消耗记录RowChanged;
            
            public event 混合能源消耗记录RowChangeEventHandler 混合能源消耗记录RowDeleting;
            
            public event 混合能源消耗记录RowChangeEventHandler 混合能源消耗记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add混合能源消耗记录Row(混合能源消耗记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合能源消耗记录Row Add混合能源消耗记录Row(string 生产日期, string 设备编号, string 设备名称, string 产品名称, string 产品型号, string 生产量, string 燃料名称, string 燃料型号, string 燃油煤量, string 燃料消耗率, string 用电量, string 用电消耗率) {
                混合能源消耗记录Row row混合能源消耗记录Row = ((混合能源消耗记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产日期,
                        设备编号,
                        设备名称,
                        产品名称,
                        产品型号,
                        生产量,
                        燃料名称,
                        燃料型号,
                        燃油煤量,
                        燃料消耗率,
                        用电量,
                        用电消耗率};
                row混合能源消耗记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row混合能源消耗记录Row);
                return row混合能源消耗记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                混合能源消耗记录DataTable cln = ((混合能源消耗记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 混合能源消耗记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产日期 = base.Columns["生产日期"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column设备名称 = base.Columns["设备名称"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column产品型号 = base.Columns["产品型号"];
                this.column生产量 = base.Columns["生产量"];
                this.column燃料名称 = base.Columns["燃料名称"];
                this.column燃料型号 = base.Columns["燃料型号"];
                this.column燃油煤量 = base.Columns["燃油煤量"];
                this.column燃料消耗率 = base.Columns["燃料消耗率"];
                this.column用电量 = base.Columns["用电量"];
                this.column用电消耗率 = base.Columns["用电消耗率"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column设备名称 = new global::System.Data.DataColumn("设备名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备名称);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column产品型号 = new global::System.Data.DataColumn("产品型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品型号);
                this.column生产量 = new global::System.Data.DataColumn("生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产量);
                this.column燃料名称 = new global::System.Data.DataColumn("燃料名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料名称);
                this.column燃料型号 = new global::System.Data.DataColumn("燃料型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料型号);
                this.column燃油煤量 = new global::System.Data.DataColumn("燃油煤量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃油煤量);
                this.column燃料消耗率 = new global::System.Data.DataColumn("燃料消耗率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料消耗率);
                this.column用电量 = new global::System.Data.DataColumn("用电量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用电量);
                this.column用电消耗率 = new global::System.Data.DataColumn("用电消耗率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用电消耗率);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合能源消耗记录Row New混合能源消耗记录Row() {
                return ((混合能源消耗记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 混合能源消耗记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(混合能源消耗记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.混合能源消耗记录RowChanged != null)) {
                    this.混合能源消耗记录RowChanged(this, new 混合能源消耗记录RowChangeEvent(((混合能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.混合能源消耗记录RowChanging != null)) {
                    this.混合能源消耗记录RowChanging(this, new 混合能源消耗记录RowChangeEvent(((混合能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.混合能源消耗记录RowDeleted != null)) {
                    this.混合能源消耗记录RowDeleted(this, new 混合能源消耗记录RowChangeEvent(((混合能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.混合能源消耗记录RowDeleting != null)) {
                    this.混合能源消耗记录RowDeleting(this, new 混合能源消耗记录RowChangeEvent(((混合能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove混合能源消耗记录Row(混合能源消耗记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "混合能源消耗记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 改性沥青生产能源消耗记录DataTable : global::System.Data.TypedTableBase<改性沥青生产能源消耗记录Row> {
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column产品型号;
            
            private global::System.Data.DataColumn column生产量;
            
            private global::System.Data.DataColumn column生产工时;
            
            private global::System.Data.DataColumn column燃料名称;
            
            private global::System.Data.DataColumn column燃料型号;
            
            private global::System.Data.DataColumn column燃油煤量;
            
            private global::System.Data.DataColumn column燃料消耗率;
            
            private global::System.Data.DataColumn column用电量;
            
            private global::System.Data.DataColumn column用电消耗率;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 改性沥青生产能源消耗记录DataTable() {
                this.TableName = "改性沥青生产能源消耗记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 改性沥青生产能源消耗记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 改性沥青生产能源消耗记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品型号Column {
                get {
                    return this.column产品型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产量Column {
                get {
                    return this.column生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产工时Column {
                get {
                    return this.column生产工时;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料名称Column {
                get {
                    return this.column燃料名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料型号Column {
                get {
                    return this.column燃料型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃油煤量Column {
                get {
                    return this.column燃油煤量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料消耗率Column {
                get {
                    return this.column燃料消耗率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用电量Column {
                get {
                    return this.column用电量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用电消耗率Column {
                get {
                    return this.column用电消耗率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 改性沥青生产能源消耗记录Row this[int index] {
                get {
                    return ((改性沥青生产能源消耗记录Row)(this.Rows[index]));
                }
            }
            
            public event 改性沥青生产能源消耗记录RowChangeEventHandler 改性沥青生产能源消耗记录RowChanging;
            
            public event 改性沥青生产能源消耗记录RowChangeEventHandler 改性沥青生产能源消耗记录RowChanged;
            
            public event 改性沥青生产能源消耗记录RowChangeEventHandler 改性沥青生产能源消耗记录RowDeleting;
            
            public event 改性沥青生产能源消耗记录RowChangeEventHandler 改性沥青生产能源消耗记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add改性沥青生产能源消耗记录Row(改性沥青生产能源消耗记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 改性沥青生产能源消耗记录Row Add改性沥青生产能源消耗记录Row(string 生产日期, string 设备编号, string 产品名称, string 产品型号, string 生产量, string 生产工时, string 燃料名称, string 燃料型号, string 燃油煤量, string 燃料消耗率, string 用电量, string 用电消耗率) {
                改性沥青生产能源消耗记录Row row改性沥青生产能源消耗记录Row = ((改性沥青生产能源消耗记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产日期,
                        设备编号,
                        产品名称,
                        产品型号,
                        生产量,
                        生产工时,
                        燃料名称,
                        燃料型号,
                        燃油煤量,
                        燃料消耗率,
                        用电量,
                        用电消耗率};
                row改性沥青生产能源消耗记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row改性沥青生产能源消耗记录Row);
                return row改性沥青生产能源消耗记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                改性沥青生产能源消耗记录DataTable cln = ((改性沥青生产能源消耗记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 改性沥青生产能源消耗记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产日期 = base.Columns["生产日期"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column产品型号 = base.Columns["产品型号"];
                this.column生产量 = base.Columns["生产量"];
                this.column生产工时 = base.Columns["生产工时"];
                this.column燃料名称 = base.Columns["燃料名称"];
                this.column燃料型号 = base.Columns["燃料型号"];
                this.column燃油煤量 = base.Columns["燃油煤量"];
                this.column燃料消耗率 = base.Columns["燃料消耗率"];
                this.column用电量 = base.Columns["用电量"];
                this.column用电消耗率 = base.Columns["用电消耗率"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column产品型号 = new global::System.Data.DataColumn("产品型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品型号);
                this.column生产量 = new global::System.Data.DataColumn("生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产量);
                this.column生产工时 = new global::System.Data.DataColumn("生产工时", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产工时);
                this.column燃料名称 = new global::System.Data.DataColumn("燃料名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料名称);
                this.column燃料型号 = new global::System.Data.DataColumn("燃料型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料型号);
                this.column燃油煤量 = new global::System.Data.DataColumn("燃油煤量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃油煤量);
                this.column燃料消耗率 = new global::System.Data.DataColumn("燃料消耗率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料消耗率);
                this.column用电量 = new global::System.Data.DataColumn("用电量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用电量);
                this.column用电消耗率 = new global::System.Data.DataColumn("用电消耗率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用电消耗率);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 改性沥青生产能源消耗记录Row New改性沥青生产能源消耗记录Row() {
                return ((改性沥青生产能源消耗记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 改性沥青生产能源消耗记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(改性沥青生产能源消耗记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.改性沥青生产能源消耗记录RowChanged != null)) {
                    this.改性沥青生产能源消耗记录RowChanged(this, new 改性沥青生产能源消耗记录RowChangeEvent(((改性沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.改性沥青生产能源消耗记录RowChanging != null)) {
                    this.改性沥青生产能源消耗记录RowChanging(this, new 改性沥青生产能源消耗记录RowChangeEvent(((改性沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.改性沥青生产能源消耗记录RowDeleted != null)) {
                    this.改性沥青生产能源消耗记录RowDeleted(this, new 改性沥青生产能源消耗记录RowChangeEvent(((改性沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.改性沥青生产能源消耗记录RowDeleting != null)) {
                    this.改性沥青生产能源消耗记录RowDeleting(this, new 改性沥青生产能源消耗记录RowChangeEvent(((改性沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove改性沥青生产能源消耗记录Row(改性沥青生产能源消耗记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "改性沥青生产能源消耗记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 乳化沥青生产能源消耗记录DataTable : global::System.Data.TypedTableBase<乳化沥青生产能源消耗记录Row> {
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column产品型号;
            
            private global::System.Data.DataColumn column生产量;
            
            private global::System.Data.DataColumn column生产工时;
            
            private global::System.Data.DataColumn column燃料名称;
            
            private global::System.Data.DataColumn column燃料型号;
            
            private global::System.Data.DataColumn column燃油煤量;
            
            private global::System.Data.DataColumn column燃料消耗率;
            
            private global::System.Data.DataColumn column用电量;
            
            private global::System.Data.DataColumn column用电消耗率;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 乳化沥青生产能源消耗记录DataTable() {
                this.TableName = "乳化沥青生产能源消耗记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 乳化沥青生产能源消耗记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 乳化沥青生产能源消耗记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品型号Column {
                get {
                    return this.column产品型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产量Column {
                get {
                    return this.column生产量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产工时Column {
                get {
                    return this.column生产工时;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料名称Column {
                get {
                    return this.column燃料名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料型号Column {
                get {
                    return this.column燃料型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃油煤量Column {
                get {
                    return this.column燃油煤量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料消耗率Column {
                get {
                    return this.column燃料消耗率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用电量Column {
                get {
                    return this.column用电量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用电消耗率Column {
                get {
                    return this.column用电消耗率;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 乳化沥青生产能源消耗记录Row this[int index] {
                get {
                    return ((乳化沥青生产能源消耗记录Row)(this.Rows[index]));
                }
            }
            
            public event 乳化沥青生产能源消耗记录RowChangeEventHandler 乳化沥青生产能源消耗记录RowChanging;
            
            public event 乳化沥青生产能源消耗记录RowChangeEventHandler 乳化沥青生产能源消耗记录RowChanged;
            
            public event 乳化沥青生产能源消耗记录RowChangeEventHandler 乳化沥青生产能源消耗记录RowDeleting;
            
            public event 乳化沥青生产能源消耗记录RowChangeEventHandler 乳化沥青生产能源消耗记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add乳化沥青生产能源消耗记录Row(乳化沥青生产能源消耗记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 乳化沥青生产能源消耗记录Row Add乳化沥青生产能源消耗记录Row(string 生产日期, string 设备编号, string 产品名称, string 产品型号, string 生产量, string 生产工时, string 燃料名称, string 燃料型号, string 燃油煤量, string 燃料消耗率, string 用电量, string 用电消耗率) {
                乳化沥青生产能源消耗记录Row row乳化沥青生产能源消耗记录Row = ((乳化沥青生产能源消耗记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产日期,
                        设备编号,
                        产品名称,
                        产品型号,
                        生产量,
                        生产工时,
                        燃料名称,
                        燃料型号,
                        燃油煤量,
                        燃料消耗率,
                        用电量,
                        用电消耗率};
                row乳化沥青生产能源消耗记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row乳化沥青生产能源消耗记录Row);
                return row乳化沥青生产能源消耗记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                乳化沥青生产能源消耗记录DataTable cln = ((乳化沥青生产能源消耗记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 乳化沥青生产能源消耗记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产日期 = base.Columns["生产日期"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column产品型号 = base.Columns["产品型号"];
                this.column生产量 = base.Columns["生产量"];
                this.column生产工时 = base.Columns["生产工时"];
                this.column燃料名称 = base.Columns["燃料名称"];
                this.column燃料型号 = base.Columns["燃料型号"];
                this.column燃油煤量 = base.Columns["燃油煤量"];
                this.column燃料消耗率 = base.Columns["燃料消耗率"];
                this.column用电量 = base.Columns["用电量"];
                this.column用电消耗率 = base.Columns["用电消耗率"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column产品型号 = new global::System.Data.DataColumn("产品型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品型号);
                this.column生产量 = new global::System.Data.DataColumn("生产量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产量);
                this.column生产工时 = new global::System.Data.DataColumn("生产工时", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产工时);
                this.column燃料名称 = new global::System.Data.DataColumn("燃料名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料名称);
                this.column燃料型号 = new global::System.Data.DataColumn("燃料型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料型号);
                this.column燃油煤量 = new global::System.Data.DataColumn("燃油煤量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃油煤量);
                this.column燃料消耗率 = new global::System.Data.DataColumn("燃料消耗率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料消耗率);
                this.column用电量 = new global::System.Data.DataColumn("用电量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用电量);
                this.column用电消耗率 = new global::System.Data.DataColumn("用电消耗率", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用电消耗率);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 乳化沥青生产能源消耗记录Row New乳化沥青生产能源消耗记录Row() {
                return ((乳化沥青生产能源消耗记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 乳化沥青生产能源消耗记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(乳化沥青生产能源消耗记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.乳化沥青生产能源消耗记录RowChanged != null)) {
                    this.乳化沥青生产能源消耗记录RowChanged(this, new 乳化沥青生产能源消耗记录RowChangeEvent(((乳化沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.乳化沥青生产能源消耗记录RowChanging != null)) {
                    this.乳化沥青生产能源消耗记录RowChanging(this, new 乳化沥青生产能源消耗记录RowChangeEvent(((乳化沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.乳化沥青生产能源消耗记录RowDeleted != null)) {
                    this.乳化沥青生产能源消耗记录RowDeleted(this, new 乳化沥青生产能源消耗记录RowChangeEvent(((乳化沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.乳化沥青生产能源消耗记录RowDeleting != null)) {
                    this.乳化沥青生产能源消耗记录RowDeleting(this, new 乳化沥青生产能源消耗记录RowChangeEvent(((乳化沥青生产能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove乳化沥青生产能源消耗记录Row(乳化沥青生产能源消耗记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "乳化沥青生产能源消耗记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 热油炉能源消耗记录DataTable : global::System.Data.TypedTableBase<热油炉能源消耗记录Row> {
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column生产工时;
            
            private global::System.Data.DataColumn column燃料名称;
            
            private global::System.Data.DataColumn column燃料型号;
            
            private global::System.Data.DataColumn _column燃油_煤_量;
            
            private global::System.Data.DataColumn column用电量;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉能源消耗记录DataTable() {
                this.TableName = "热油炉能源消耗记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 热油炉能源消耗记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 热油炉能源消耗记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产工时Column {
                get {
                    return this.column生产工时;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料名称Column {
                get {
                    return this.column燃料名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 燃料型号Column {
                get {
                    return this.column燃料型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _燃油_煤_量Column {
                get {
                    return this._column燃油_煤_量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用电量Column {
                get {
                    return this.column用电量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉能源消耗记录Row this[int index] {
                get {
                    return ((热油炉能源消耗记录Row)(this.Rows[index]));
                }
            }
            
            public event 热油炉能源消耗记录RowChangeEventHandler 热油炉能源消耗记录RowChanging;
            
            public event 热油炉能源消耗记录RowChangeEventHandler 热油炉能源消耗记录RowChanged;
            
            public event 热油炉能源消耗记录RowChangeEventHandler 热油炉能源消耗记录RowDeleting;
            
            public event 热油炉能源消耗记录RowChangeEventHandler 热油炉能源消耗记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add热油炉能源消耗记录Row(热油炉能源消耗记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉能源消耗记录Row Add热油炉能源消耗记录Row(string 生产日期, string 设备编号, string 生产工时, string 燃料名称, string 燃料型号, string _燃油_煤_量, string 用电量) {
                热油炉能源消耗记录Row row热油炉能源消耗记录Row = ((热油炉能源消耗记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产日期,
                        设备编号,
                        生产工时,
                        燃料名称,
                        燃料型号,
                        _燃油_煤_量,
                        用电量};
                row热油炉能源消耗记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row热油炉能源消耗记录Row);
                return row热油炉能源消耗记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                热油炉能源消耗记录DataTable cln = ((热油炉能源消耗记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 热油炉能源消耗记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产日期 = base.Columns["生产日期"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column生产工时 = base.Columns["生产工时"];
                this.column燃料名称 = base.Columns["燃料名称"];
                this.column燃料型号 = base.Columns["燃料型号"];
                this._column燃油_煤_量 = base.Columns["燃油（煤）量"];
                this.column用电量 = base.Columns["用电量"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column生产工时 = new global::System.Data.DataColumn("生产工时", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产工时);
                this.column燃料名称 = new global::System.Data.DataColumn("燃料名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料名称);
                this.column燃料型号 = new global::System.Data.DataColumn("燃料型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column燃料型号);
                this._column燃油_煤_量 = new global::System.Data.DataColumn("燃油（煤）量", typeof(string), null, global::System.Data.MappingType.Element);
                this._column燃油_煤_量.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column燃油_煤_量");
                this._column燃油_煤_量.ExtendedProperties.Add("Generator_UserColumnName", "燃油（煤）量");
                base.Columns.Add(this._column燃油_煤_量);
                this.column用电量 = new global::System.Data.DataColumn("用电量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用电量);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉能源消耗记录Row New热油炉能源消耗记录Row() {
                return ((热油炉能源消耗记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 热油炉能源消耗记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(热油炉能源消耗记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.热油炉能源消耗记录RowChanged != null)) {
                    this.热油炉能源消耗记录RowChanged(this, new 热油炉能源消耗记录RowChangeEvent(((热油炉能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.热油炉能源消耗记录RowChanging != null)) {
                    this.热油炉能源消耗记录RowChanging(this, new 热油炉能源消耗记录RowChangeEvent(((热油炉能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.热油炉能源消耗记录RowDeleted != null)) {
                    this.热油炉能源消耗记录RowDeleted(this, new 热油炉能源消耗记录RowChangeEvent(((热油炉能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.热油炉能源消耗记录RowDeleting != null)) {
                    this.热油炉能源消耗记录RowDeleting(this, new 热油炉能源消耗记录RowChangeEvent(((热油炉能源消耗记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove热油炉能源消耗记录Row(热油炉能源消耗记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "热油炉能源消耗记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 热油炉用煤详细记录DataTable : global::System.Data.TypedTableBase<热油炉用煤详细记录Row> {
            
            private global::System.Data.DataColumn column日期时间;
            
            private global::System.Data.DataColumn column设备名称;
            
            private global::System.Data.DataColumn column设备编号;
            
            private global::System.Data.DataColumn column用煤量;
            
            private global::System.Data.DataColumn column操作员;
            
            private global::System.Data.DataColumn column备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉用煤详细记录DataTable() {
                this.TableName = "热油炉用煤详细记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 热油炉用煤详细记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 热油炉用煤详细记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 日期时间Column {
                get {
                    return this.column日期时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用煤量Column {
                get {
                    return this.column用煤量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 操作员Column {
                get {
                    return this.column操作员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉用煤详细记录Row this[int index] {
                get {
                    return ((热油炉用煤详细记录Row)(this.Rows[index]));
                }
            }
            
            public event 热油炉用煤详细记录RowChangeEventHandler 热油炉用煤详细记录RowChanging;
            
            public event 热油炉用煤详细记录RowChangeEventHandler 热油炉用煤详细记录RowChanged;
            
            public event 热油炉用煤详细记录RowChangeEventHandler 热油炉用煤详细记录RowDeleting;
            
            public event 热油炉用煤详细记录RowChangeEventHandler 热油炉用煤详细记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add热油炉用煤详细记录Row(热油炉用煤详细记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉用煤详细记录Row Add热油炉用煤详细记录Row(string 日期时间, string 设备名称, string 设备编号, string 用煤量, string 操作员, string 备注) {
                热油炉用煤详细记录Row row热油炉用煤详细记录Row = ((热油炉用煤详细记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        日期时间,
                        设备名称,
                        设备编号,
                        用煤量,
                        操作员,
                        备注};
                row热油炉用煤详细记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row热油炉用煤详细记录Row);
                return row热油炉用煤详细记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                热油炉用煤详细记录DataTable cln = ((热油炉用煤详细记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 热油炉用煤详细记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column日期时间 = base.Columns["日期时间"];
                this.column设备名称 = base.Columns["设备名称"];
                this.column设备编号 = base.Columns["设备编号"];
                this.column用煤量 = base.Columns["用煤量"];
                this.column操作员 = base.Columns["操作员"];
                this.column备注 = base.Columns["备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column日期时间 = new global::System.Data.DataColumn("日期时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column日期时间);
                this.column设备名称 = new global::System.Data.DataColumn("设备名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备名称);
                this.column设备编号 = new global::System.Data.DataColumn("设备编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备编号);
                this.column用煤量 = new global::System.Data.DataColumn("用煤量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用煤量);
                this.column操作员 = new global::System.Data.DataColumn("操作员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column操作员);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉用煤详细记录Row New热油炉用煤详细记录Row() {
                return ((热油炉用煤详细记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 热油炉用煤详细记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(热油炉用煤详细记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.热油炉用煤详细记录RowChanged != null)) {
                    this.热油炉用煤详细记录RowChanged(this, new 热油炉用煤详细记录RowChangeEvent(((热油炉用煤详细记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.热油炉用煤详细记录RowChanging != null)) {
                    this.热油炉用煤详细记录RowChanging(this, new 热油炉用煤详细记录RowChangeEvent(((热油炉用煤详细记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.热油炉用煤详细记录RowDeleted != null)) {
                    this.热油炉用煤详细记录RowDeleted(this, new 热油炉用煤详细记录RowChangeEvent(((热油炉用煤详细记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.热油炉用煤详细记录RowDeleting != null)) {
                    this.热油炉用煤详细记录RowDeleting(this, new 热油炉用煤详细记录RowChangeEvent(((热油炉用煤详细记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove热油炉用煤详细记录Row(热油炉用煤详细记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProduceDataSet ds = new ProduceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "热油炉用煤详细记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class YearProducePlanRow : global::System.Data.DataRow {
            
            private YearProducePlanDataTable tableYearProducePlan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal YearProducePlanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableYearProducePlan = ((YearProducePlanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sort {
                get {
                    try {
                        return ((int)(this[this.tableYearProducePlan.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int name {
                get {
                    try {
                        return ((int)(this[this.tableYearProducePlan.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableYearProducePlan.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal produceQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.produceQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“produceQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.produceQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal january {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.januaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“january”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.januaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal february {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.februaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“february”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.februaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal march {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.marchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“march”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.marchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal april {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.aprilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“april”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.aprilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal may {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.mayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“may”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.mayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal june {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.juneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“june”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.juneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal july {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.julyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“july”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.julyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal august {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.augustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“august”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.augustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal september {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.septemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“september”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.septemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal october {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.octoberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“october”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.octoberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal november {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.novemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“november”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.novemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal december {
                get {
                    try {
                        return ((decimal)(this[this.tableYearProducePlan.decemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearProducePlan”中列“december”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearProducePlan.decemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableYearProducePlan.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableYearProducePlan.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableYearProducePlan.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableYearProducePlan.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableYearProducePlan.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableYearProducePlan.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproduceQuantityNull() {
                return this.IsNull(this.tableYearProducePlan.produceQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproduceQuantityNull() {
                this[this.tableYearProducePlan.produceQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjanuaryNull() {
                return this.IsNull(this.tableYearProducePlan.januaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjanuaryNull() {
                this[this.tableYearProducePlan.januaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfebruaryNull() {
                return this.IsNull(this.tableYearProducePlan.februaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfebruaryNull() {
                this[this.tableYearProducePlan.februaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarchNull() {
                return this.IsNull(this.tableYearProducePlan.marchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarchNull() {
                this[this.tableYearProducePlan.marchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaprilNull() {
                return this.IsNull(this.tableYearProducePlan.aprilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaprilNull() {
                this[this.tableYearProducePlan.aprilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmayNull() {
                return this.IsNull(this.tableYearProducePlan.mayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmayNull() {
                this[this.tableYearProducePlan.mayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjuneNull() {
                return this.IsNull(this.tableYearProducePlan.juneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjuneNull() {
                this[this.tableYearProducePlan.juneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjulyNull() {
                return this.IsNull(this.tableYearProducePlan.julyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjulyNull() {
                this[this.tableYearProducePlan.julyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaugustNull() {
                return this.IsNull(this.tableYearProducePlan.augustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaugustNull() {
                this[this.tableYearProducePlan.augustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseptemberNull() {
                return this.IsNull(this.tableYearProducePlan.septemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseptemberNull() {
                this[this.tableYearProducePlan.septemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoctoberNull() {
                return this.IsNull(this.tableYearProducePlan.octoberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoctoberNull() {
                this[this.tableYearProducePlan.octoberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnovemberNull() {
                return this.IsNull(this.tableYearProducePlan.novemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnovemberNull() {
                this[this.tableYearProducePlan.novemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdecemberNull() {
                return this.IsNull(this.tableYearProducePlan.decemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdecemberNull() {
                this[this.tableYearProducePlan.decemberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class YearMaterialRequirementsPlanningRow : global::System.Data.DataRow {
            
            private YearMaterialRequirementsPlanningDataTable tableYearMaterialRequirementsPlanning;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal YearMaterialRequirementsPlanningRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableYearMaterialRequirementsPlanning = ((YearMaterialRequirementsPlanningDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string january {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.januaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“january”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.januaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string february {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.februaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“february”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.februaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string march {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.marchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“march”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.marchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string april {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.aprilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“april”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.aprilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string may {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.mayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“may”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.mayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string june {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.juneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“june”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.juneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string july {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.julyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“july”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.julyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string august {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.augustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“august”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.augustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string september {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.septemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“september”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.septemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string october {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.octoberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“october”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.octoberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string november {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.novemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“november”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.novemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string december {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.decemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“december”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.decemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string quantity {
                get {
                    try {
                        return ((string)(this[this.tableYearMaterialRequirementsPlanning.quantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearMaterialRequirementsPlanning”中列“quantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearMaterialRequirementsPlanning.quantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableYearMaterialRequirementsPlanning.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableYearMaterialRequirementsPlanning.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableYearMaterialRequirementsPlanning.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjanuaryNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.januaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjanuaryNull() {
                this[this.tableYearMaterialRequirementsPlanning.januaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfebruaryNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.februaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfebruaryNull() {
                this[this.tableYearMaterialRequirementsPlanning.februaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarchNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.marchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarchNull() {
                this[this.tableYearMaterialRequirementsPlanning.marchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaprilNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.aprilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaprilNull() {
                this[this.tableYearMaterialRequirementsPlanning.aprilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmayNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.mayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmayNull() {
                this[this.tableYearMaterialRequirementsPlanning.mayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjuneNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.juneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjuneNull() {
                this[this.tableYearMaterialRequirementsPlanning.juneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjulyNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.julyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjulyNull() {
                this[this.tableYearMaterialRequirementsPlanning.julyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaugustNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.augustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaugustNull() {
                this[this.tableYearMaterialRequirementsPlanning.augustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseptemberNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.septemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseptemberNull() {
                this[this.tableYearMaterialRequirementsPlanning.septemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoctoberNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.octoberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoctoberNull() {
                this[this.tableYearMaterialRequirementsPlanning.octoberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnovemberNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.novemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnovemberNull() {
                this[this.tableYearMaterialRequirementsPlanning.novemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdecemberNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.decemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdecemberNull() {
                this[this.tableYearMaterialRequirementsPlanning.decemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsquantityNull() {
                return this.IsNull(this.tableYearMaterialRequirementsPlanning.quantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetquantityNull() {
                this[this.tableYearMaterialRequirementsPlanning.quantityColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProduceInfoRow : global::System.Data.DataRow {
            
            private ProduceInfoDataTable tableProduceInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProduceInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduceInfo = ((ProduceInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string planQuantity {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.planQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“planQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.planQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string startDate {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.startDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“startDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string no {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“no”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notifyMan {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.notifyManColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“notifyMan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.notifyManColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notifyDate {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.notifyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“notifyDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.notifyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ppid {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.ppidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“ppid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.ppidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tpid {
                get {
                    try {
                        return ((string)(this[this.tableProduceInfo.tpidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProduceInfo”中列“tpid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProduceInfo.tpidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableProduceInfo.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableProduceInfo.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableProduceInfo.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableProduceInfo.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableProduceInfo.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableProduceInfo.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplanQuantityNull() {
                return this.IsNull(this.tableProduceInfo.planQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplanQuantityNull() {
                this[this.tableProduceInfo.planQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartDateNull() {
                return this.IsNull(this.tableProduceInfo.startDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartDateNull() {
                this[this.tableProduceInfo.startDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableProduceInfo.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableProduceInfo.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotifyManNull() {
                return this.IsNull(this.tableProduceInfo.notifyManColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotifyManNull() {
                this[this.tableProduceInfo.notifyManColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotifyDateNull() {
                return this.IsNull(this.tableProduceInfo.notifyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotifyDateNull() {
                this[this.tableProduceInfo.notifyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsppidNull() {
                return this.IsNull(this.tableProduceInfo.ppidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetppidNull() {
                this[this.tableProduceInfo.ppidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstpidNull() {
                return this.IsNull(this.tableProduceInfo.tpidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettpidNull() {
                this[this.tableProduceInfo.tpidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 生产配合比信息Row : global::System.Data.DataRow {
            
            private 生产配合比信息DataTable table生产配合比信息;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 生产配合比信息Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table生产配合比信息 = ((生产配合比信息DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产配合比编号 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息.生产配合比编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“生产配合比编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息.生产配合比编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 沥青 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息.沥青Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“沥青”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息.沥青Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 石粉 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息.石粉Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“石粉”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息.石粉Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _1_热料仓 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息._1_热料仓Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“1#热料仓”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息._1_热料仓Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _2_热料仓 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息._2_热料仓Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“2#热料仓”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息._2_热料仓Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3_热料仓 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息._3_热料仓Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“3#热料仓”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息._3_热料仓Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _4_热料仓 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息._4_热料仓Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“4#热料仓”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息._4_热料仓Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _5_热料仓 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息._5_热料仓Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“5#热料仓”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息._5_热料仓Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 填料 {
                get {
                    try {
                        return ((string)(this[this.table生产配合比信息.填料Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产配合比信息”中列“填料”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产配合比信息.填料Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产配合比编号Null() {
                return this.IsNull(this.table生产配合比信息.生产配合比编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产配合比编号Null() {
                this[this.table生产配合比信息.生产配合比编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is沥青Null() {
                return this.IsNull(this.table生产配合比信息.沥青Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set沥青Null() {
                this[this.table生产配合比信息.沥青Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is石粉Null() {
                return this.IsNull(this.table生产配合比信息.石粉Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set石粉Null() {
                this[this.table生产配合比信息.石粉Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_1_热料仓Null() {
                return this.IsNull(this.table生产配合比信息._1_热料仓Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_1_热料仓Null() {
                this[this.table生产配合比信息._1_热料仓Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_2_热料仓Null() {
                return this.IsNull(this.table生产配合比信息._2_热料仓Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_2_热料仓Null() {
                this[this.table生产配合比信息._2_热料仓Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3_热料仓Null() {
                return this.IsNull(this.table生产配合比信息._3_热料仓Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3_热料仓Null() {
                this[this.table生产配合比信息._3_热料仓Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_热料仓Null() {
                return this.IsNull(this.table生产配合比信息._4_热料仓Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_热料仓Null() {
                this[this.table生产配合比信息._4_热料仓Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5_热料仓Null() {
                return this.IsNull(this.table生产配合比信息._5_热料仓Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5_热料仓Null() {
                this[this.table生产配合比信息._5_热料仓Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is填料Null() {
                return this.IsNull(this.table生产配合比信息.填料Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set填料Null() {
                this[this.table生产配合比信息.填料Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 目标配合比信息Row : global::System.Data.DataRow {
            
            private 目标配合比信息DataTable table目标配合比信息;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 目标配合比信息Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table目标配合比信息 = ((目标配合比信息DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 目标配合比编号 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.目标配合比编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“目标配合比编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.目标配合比编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 序号 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.序号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“序号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 材料种类 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.材料种类Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“材料种类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.材料种类Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 材料名称 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.材料名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“材料名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.材料名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格型号 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.规格型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“规格型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.规格型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 油石比 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.油石比Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“油石比”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.油石比Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产地 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.产地Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“产地”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.产地Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产厂家 {
                get {
                    try {
                        return ((string)(this[this.table目标配合比信息.生产厂家Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“目标配合比信息”中列“生产厂家”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table目标配合比信息.生产厂家Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is目标配合比编号Null() {
                return this.IsNull(this.table目标配合比信息.目标配合比编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set目标配合比编号Null() {
                this[this.table目标配合比信息.目标配合比编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is序号Null() {
                return this.IsNull(this.table目标配合比信息.序号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set序号Null() {
                this[this.table目标配合比信息.序号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is材料种类Null() {
                return this.IsNull(this.table目标配合比信息.材料种类Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set材料种类Null() {
                this[this.table目标配合比信息.材料种类Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is材料名称Null() {
                return this.IsNull(this.table目标配合比信息.材料名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set材料名称Null() {
                this[this.table目标配合比信息.材料名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格型号Null() {
                return this.IsNull(this.table目标配合比信息.规格型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格型号Null() {
                this[this.table目标配合比信息.规格型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is油石比Null() {
                return this.IsNull(this.table目标配合比信息.油石比Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set油石比Null() {
                this[this.table目标配合比信息.油石比Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产地Null() {
                return this.IsNull(this.table目标配合比信息.产地Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产地Null() {
                this[this.table目标配合比信息.产地Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产厂家Null() {
                return this.IsNull(this.table目标配合比信息.生产厂家Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产厂家Null() {
                this[this.table目标配合比信息.生产厂家Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 混合料生产情况记录Row : global::System.Data.DataRow {
            
            private 混合料生产情况记录DataTable table混合料生产情况记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 混合料生产情况记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table混合料生产情况记录 = ((混合料生产情况记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 开机时间 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.开机时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“开机时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.开机时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 关机时间 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.关机时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“关机时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.关机时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.设备名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“设备名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.设备名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格型号 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.规格型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“规格型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.规格型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品产量 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.产品产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“产品产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.产品产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产班组 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.生产班组Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“生产班组”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.生产班组Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 天气情况 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.天气情况Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“天气情况”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.天气情况Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 正品数量 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.正品数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“正品数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.正品数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 废品数量 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.废品数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“废品数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.废品数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 粗集料含水率 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.粗集料含水率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“粗集料含水率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.粗集料含水率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 细集料含水率 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.细集料含水率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“细集料含水率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.细集料含水率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 气温1 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.气温1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“气温1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.气温1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 气温2 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.气温2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“气温2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.气温2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 气温3 {
                get {
                    try {
                        return ((string)(this[this.table混合料生产情况记录.气温3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合料生产情况记录”中列“气温3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合料生产情况记录.气温3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.table混合料生产情况记录.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.table混合料生产情况记录.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is开机时间Null() {
                return this.IsNull(this.table混合料生产情况记录.开机时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set开机时间Null() {
                this[this.table混合料生产情况记录.开机时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is关机时间Null() {
                return this.IsNull(this.table混合料生产情况记录.关机时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set关机时间Null() {
                this[this.table混合料生产情况记录.关机时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备名称Null() {
                return this.IsNull(this.table混合料生产情况记录.设备名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备名称Null() {
                this[this.table混合料生产情况记录.设备名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.table混合料生产情况记录.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.table混合料生产情况记录.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格型号Null() {
                return this.IsNull(this.table混合料生产情况记录.规格型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格型号Null() {
                this[this.table混合料生产情况记录.规格型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品产量Null() {
                return this.IsNull(this.table混合料生产情况记录.产品产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品产量Null() {
                this[this.table混合料生产情况记录.产品产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table混合料生产情况记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table混合料生产情况记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产班组Null() {
                return this.IsNull(this.table混合料生产情况记录.生产班组Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产班组Null() {
                this[this.table混合料生产情况记录.生产班组Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is天气情况Null() {
                return this.IsNull(this.table混合料生产情况记录.天气情况Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set天气情况Null() {
                this[this.table混合料生产情况记录.天气情况Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is正品数量Null() {
                return this.IsNull(this.table混合料生产情况记录.正品数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set正品数量Null() {
                this[this.table混合料生产情况记录.正品数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is废品数量Null() {
                return this.IsNull(this.table混合料生产情况记录.废品数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set废品数量Null() {
                this[this.table混合料生产情况记录.废品数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is粗集料含水率Null() {
                return this.IsNull(this.table混合料生产情况记录.粗集料含水率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set粗集料含水率Null() {
                this[this.table混合料生产情况记录.粗集料含水率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is细集料含水率Null() {
                return this.IsNull(this.table混合料生产情况记录.细集料含水率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set细集料含水率Null() {
                this[this.table混合料生产情况记录.细集料含水率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is气温1Null() {
                return this.IsNull(this.table混合料生产情况记录.气温1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set气温1Null() {
                this[this.table混合料生产情况记录.气温1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is气温2Null() {
                return this.IsNull(this.table混合料生产情况记录.气温2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set气温2Null() {
                this[this.table混合料生产情况记录.气温2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is气温3Null() {
                return this.IsNull(this.table混合料生产情况记录.气温3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set气温3Null() {
                this[this.table混合料生产情况记录.气温3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 沥青生产情况记录Row : global::System.Data.DataRow {
            
            private 沥青生产情况记录DataTable table沥青生产情况记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 沥青生产情况记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table沥青生产情况记录 = ((沥青生产情况记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.设备名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“设备名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.设备名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 开机时间 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.开机时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“开机时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.开机时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 关机时间 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.关机时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“关机时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.关机时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格型号 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.规格型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“规格型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.规格型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品产量 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.产品产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“产品产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.产品产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产人数 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.生产人数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“生产人数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.生产人数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 消耗人工 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.消耗人工Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“消耗人工”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.消耗人工Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 天气情况 {
                get {
                    try {
                        return ((string)(this[this.table沥青生产情况记录.天气情况Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青生产情况记录”中列“天气情况”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青生产情况记录.天气情况Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备名称Null() {
                return this.IsNull(this.table沥青生产情况记录.设备名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备名称Null() {
                this[this.table沥青生产情况记录.设备名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table沥青生产情况记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table沥青生产情况记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.table沥青生产情况记录.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.table沥青生产情况记录.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is开机时间Null() {
                return this.IsNull(this.table沥青生产情况记录.开机时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set开机时间Null() {
                this[this.table沥青生产情况记录.开机时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is关机时间Null() {
                return this.IsNull(this.table沥青生产情况记录.关机时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set关机时间Null() {
                this[this.table沥青生产情况记录.关机时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.table沥青生产情况记录.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.table沥青生产情况记录.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格型号Null() {
                return this.IsNull(this.table沥青生产情况记录.规格型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格型号Null() {
                this[this.table沥青生产情况记录.规格型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品产量Null() {
                return this.IsNull(this.table沥青生产情况记录.产品产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品产量Null() {
                this[this.table沥青生产情况记录.产品产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产人数Null() {
                return this.IsNull(this.table沥青生产情况记录.生产人数Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产人数Null() {
                this[this.table沥青生产情况记录.生产人数Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is消耗人工Null() {
                return this.IsNull(this.table沥青生产情况记录.消耗人工Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set消耗人工Null() {
                this[this.table沥青生产情况记录.消耗人工Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is天气情况Null() {
                return this.IsNull(this.table沥青生产情况记录.天气情况Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set天气情况Null() {
                this[this.table沥青生产情况记录.天气情况Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 沥青加温生产情况记录Row : global::System.Data.DataRow {
            
            private 沥青加温生产情况记录DataTable table沥青加温生产情况记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 沥青加温生产情况记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table沥青加温生产情况记录 = ((沥青加温生产情况记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.设备名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“设备名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.设备名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 开机时间 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.开机时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“开机时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.开机时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 停机时间 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.停机时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“停机时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.停机时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 负责人 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.负责人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“负责人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.负责人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产班组 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.生产班组Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“生产班组”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.生产班组Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 天气情况 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.天气情况Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“天气情况”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.天气情况Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.table沥青加温生产情况记录.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“沥青加温生产情况记录”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table沥青加温生产情况记录.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.table沥青加温生产情况记录.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.table沥青加温生产情况记录.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备名称Null() {
                return this.IsNull(this.table沥青加温生产情况记录.设备名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备名称Null() {
                this[this.table沥青加温生产情况记录.设备名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table沥青加温生产情况记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table沥青加温生产情况记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is开机时间Null() {
                return this.IsNull(this.table沥青加温生产情况记录.开机时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set开机时间Null() {
                this[this.table沥青加温生产情况记录.开机时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is停机时间Null() {
                return this.IsNull(this.table沥青加温生产情况记录.停机时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set停机时间Null() {
                this[this.table沥青加温生产情况记录.停机时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is负责人Null() {
                return this.IsNull(this.table沥青加温生产情况记录.负责人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set负责人Null() {
                this[this.table沥青加温生产情况记录.负责人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产班组Null() {
                return this.IsNull(this.table沥青加温生产情况记录.生产班组Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产班组Null() {
                this[this.table沥青加温生产情况记录.生产班组Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is天气情况Null() {
                return this.IsNull(this.table沥青加温生产情况记录.天气情况Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set天气情况Null() {
                this[this.table沥青加温生产情况记录.天气情况Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.table沥青加温生产情况记录.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.table沥青加温生产情况记录.备注Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 生产月统计报表Row : global::System.Data.DataRow {
            
            private 生产月统计报表DataTable table生产月统计报表;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 生产月统计报表Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table生产月统计报表 = ((生产月统计报表DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 年月 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.年月Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“年月”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.年月Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品种类 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.产品种类Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“产品种类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.产品种类Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格型号 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.规格型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“规格型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.规格型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 月生产量 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.月生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“月生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.月生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 上月生产量 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.上月生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“上月生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.上月生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 累计生产量 {
                get {
                    try {
                        return ((string)(this[this.table生产月统计报表.累计生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产月统计报表”中列“累计生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产月统计报表.累计生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年月Null() {
                return this.IsNull(this.table生产月统计报表.年月Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年月Null() {
                this[this.table生产月统计报表.年月Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品种类Null() {
                return this.IsNull(this.table生产月统计报表.产品种类Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品种类Null() {
                this[this.table生产月统计报表.产品种类Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.table生产月统计报表.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.table生产月统计报表.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格型号Null() {
                return this.IsNull(this.table生产月统计报表.规格型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格型号Null() {
                this[this.table生产月统计报表.规格型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table生产月统计报表.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table生产月统计报表.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is月生产量Null() {
                return this.IsNull(this.table生产月统计报表.月生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set月生产量Null() {
                this[this.table生产月统计报表.月生产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is上月生产量Null() {
                return this.IsNull(this.table生产月统计报表.上月生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set上月生产量Null() {
                this[this.table生产月统计报表.上月生产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is累计生产量Null() {
                return this.IsNull(this.table生产月统计报表.累计生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set累计生产量Null() {
                this[this.table生产月统计报表.累计生产量Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 生产日统计报表Row : global::System.Data.DataRow {
            
            private 生产日统计报表DataTable table生产日统计报表;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 生产日统计报表Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table生产日统计报表 = ((生产日统计报表DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 日期 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品种类 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.产品种类Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“产品种类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.产品种类Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格型号 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.规格型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“规格型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.规格型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.设备名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“设备名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.设备名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 日生产量 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.日生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“日生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.日生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 累计生产量 {
                get {
                    try {
                        return ((string)(this[this.table生产日统计报表.累计生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“生产日统计报表”中列“累计生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table生产日统计报表.累计生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is日期Null() {
                return this.IsNull(this.table生产日统计报表.日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set日期Null() {
                this[this.table生产日统计报表.日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品种类Null() {
                return this.IsNull(this.table生产日统计报表.产品种类Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品种类Null() {
                this[this.table生产日统计报表.产品种类Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.table生产日统计报表.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.table生产日统计报表.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格型号Null() {
                return this.IsNull(this.table生产日统计报表.规格型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格型号Null() {
                this[this.table生产日统计报表.规格型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table生产日统计报表.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table生产日统计报表.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备名称Null() {
                return this.IsNull(this.table生产日统计报表.设备名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备名称Null() {
                this[this.table生产日统计报表.设备名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is日生产量Null() {
                return this.IsNull(this.table生产日统计报表.日生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set日生产量Null() {
                this[this.table生产日统计报表.日生产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is累计生产量Null() {
                return this.IsNull(this.table生产日统计报表.累计生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set累计生产量Null() {
                this[this.table生产日统计报表.累计生产量Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 能源消耗统计Row : global::System.Data.DataRow {
            
            private 能源消耗统计DataTable table能源消耗统计;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 能源消耗统计Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table能源消耗统计 = ((能源消耗统计DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 年月 {
                get {
                    try {
                        return ((string)(this[this.table能源消耗统计.年月Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“能源消耗统计”中列“年月”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table能源消耗统计.年月Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料名称 {
                get {
                    try {
                        return ((string)(this[this.table能源消耗统计.燃料名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“能源消耗统计”中列“燃料名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table能源消耗统计.燃料名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格型号 {
                get {
                    try {
                        return ((string)(this[this.table能源消耗统计.规格型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“能源消耗统计”中列“规格型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table能源消耗统计.规格型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table能源消耗统计.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“能源消耗统计”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table能源消耗统计.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 当月燃料用量 {
                get {
                    try {
                        return ((string)(this[this.table能源消耗统计.当月燃料用量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“能源消耗统计”中列“当月燃料用量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table能源消耗统计.当月燃料用量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 当月用电量 {
                get {
                    try {
                        return ((string)(this[this.table能源消耗统计.当月用电量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“能源消耗统计”中列“当月用电量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table能源消耗统计.当月用电量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年月Null() {
                return this.IsNull(this.table能源消耗统计.年月Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年月Null() {
                this[this.table能源消耗统计.年月Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料名称Null() {
                return this.IsNull(this.table能源消耗统计.燃料名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料名称Null() {
                this[this.table能源消耗统计.燃料名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格型号Null() {
                return this.IsNull(this.table能源消耗统计.规格型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格型号Null() {
                this[this.table能源消耗统计.规格型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table能源消耗统计.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table能源消耗统计.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is当月燃料用量Null() {
                return this.IsNull(this.table能源消耗统计.当月燃料用量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set当月燃料用量Null() {
                this[this.table能源消耗统计.当月燃料用量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is当月用电量Null() {
                return this.IsNull(this.table能源消耗统计.当月用电量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set当月用电量Null() {
                this[this.table能源消耗统计.当月用电量Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 混合能源消耗记录Row : global::System.Data.DataRow {
            
            private 混合能源消耗记录DataTable table混合能源消耗记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 混合能源消耗记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table混合能源消耗记录 = ((混合能源消耗记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.设备名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“设备名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.设备名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品型号 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.产品型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“产品型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.产品型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产量 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料名称 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.燃料名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“燃料名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.燃料名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料型号 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.燃料型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“燃料型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.燃料型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃油煤量 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.燃油煤量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“燃油煤量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.燃油煤量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料消耗率 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.燃料消耗率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“燃料消耗率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.燃料消耗率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用电量 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.用电量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“用电量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.用电量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用电消耗率 {
                get {
                    try {
                        return ((string)(this[this.table混合能源消耗记录.用电消耗率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“混合能源消耗记录”中列“用电消耗率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table混合能源消耗记录.用电消耗率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.table混合能源消耗记录.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.table混合能源消耗记录.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table混合能源消耗记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table混合能源消耗记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备名称Null() {
                return this.IsNull(this.table混合能源消耗记录.设备名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备名称Null() {
                this[this.table混合能源消耗记录.设备名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.table混合能源消耗记录.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.table混合能源消耗记录.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品型号Null() {
                return this.IsNull(this.table混合能源消耗记录.产品型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品型号Null() {
                this[this.table混合能源消耗记录.产品型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产量Null() {
                return this.IsNull(this.table混合能源消耗记录.生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产量Null() {
                this[this.table混合能源消耗记录.生产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料名称Null() {
                return this.IsNull(this.table混合能源消耗记录.燃料名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料名称Null() {
                this[this.table混合能源消耗记录.燃料名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料型号Null() {
                return this.IsNull(this.table混合能源消耗记录.燃料型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料型号Null() {
                this[this.table混合能源消耗记录.燃料型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃油煤量Null() {
                return this.IsNull(this.table混合能源消耗记录.燃油煤量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃油煤量Null() {
                this[this.table混合能源消耗记录.燃油煤量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料消耗率Null() {
                return this.IsNull(this.table混合能源消耗记录.燃料消耗率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料消耗率Null() {
                this[this.table混合能源消耗记录.燃料消耗率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用电量Null() {
                return this.IsNull(this.table混合能源消耗记录.用电量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用电量Null() {
                this[this.table混合能源消耗记录.用电量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用电消耗率Null() {
                return this.IsNull(this.table混合能源消耗记录.用电消耗率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用电消耗率Null() {
                this[this.table混合能源消耗记录.用电消耗率Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 改性沥青生产能源消耗记录Row : global::System.Data.DataRow {
            
            private 改性沥青生产能源消耗记录DataTable table改性沥青生产能源消耗记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 改性沥青生产能源消耗记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table改性沥青生产能源消耗记录 = ((改性沥青生产能源消耗记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品型号 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.产品型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“产品型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.产品型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产量 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产工时 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.生产工时Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“生产工时”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.生产工时Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料名称 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.燃料名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“燃料名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.燃料名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料型号 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.燃料型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“燃料型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.燃料型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃油煤量 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.燃油煤量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“燃油煤量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.燃油煤量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料消耗率 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.燃料消耗率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“燃料消耗率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.燃料消耗率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用电量 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.用电量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“用电量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.用电量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用电消耗率 {
                get {
                    try {
                        return ((string)(this[this.table改性沥青生产能源消耗记录.用电消耗率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“改性沥青生产能源消耗记录”中列“用电消耗率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table改性沥青生产能源消耗记录.用电消耗率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.table改性沥青生产能源消耗记录.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table改性沥青生产能源消耗记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.table改性沥青生产能源消耗记录.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品型号Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.产品型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品型号Null() {
                this[this.table改性沥青生产能源消耗记录.产品型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产量Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产量Null() {
                this[this.table改性沥青生产能源消耗记录.生产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产工时Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.生产工时Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产工时Null() {
                this[this.table改性沥青生产能源消耗记录.生产工时Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料名称Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.燃料名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料名称Null() {
                this[this.table改性沥青生产能源消耗记录.燃料名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料型号Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.燃料型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料型号Null() {
                this[this.table改性沥青生产能源消耗记录.燃料型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃油煤量Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.燃油煤量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃油煤量Null() {
                this[this.table改性沥青生产能源消耗记录.燃油煤量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料消耗率Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.燃料消耗率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料消耗率Null() {
                this[this.table改性沥青生产能源消耗记录.燃料消耗率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用电量Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.用电量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用电量Null() {
                this[this.table改性沥青生产能源消耗记录.用电量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用电消耗率Null() {
                return this.IsNull(this.table改性沥青生产能源消耗记录.用电消耗率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用电消耗率Null() {
                this[this.table改性沥青生产能源消耗记录.用电消耗率Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 乳化沥青生产能源消耗记录Row : global::System.Data.DataRow {
            
            private 乳化沥青生产能源消耗记录DataTable table乳化沥青生产能源消耗记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 乳化沥青生产能源消耗记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table乳化沥青生产能源消耗记录 = ((乳化沥青生产能源消耗记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品型号 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.产品型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“产品型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.产品型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产量 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.生产量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“生产量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.生产量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产工时 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.生产工时Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“生产工时”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.生产工时Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料名称 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.燃料名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“燃料名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.燃料名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料型号 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.燃料型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“燃料型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.燃料型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃油煤量 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.燃油煤量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“燃油煤量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.燃油煤量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料消耗率 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.燃料消耗率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“燃料消耗率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.燃料消耗率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用电量 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.用电量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“用电量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.用电量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用电消耗率 {
                get {
                    try {
                        return ((string)(this[this.table乳化沥青生产能源消耗记录.用电消耗率Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“乳化沥青生产能源消耗记录”中列“用电消耗率”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table乳化沥青生产能源消耗记录.用电消耗率Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.table乳化沥青生产能源消耗记录.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table乳化沥青生产能源消耗记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.table乳化沥青生产能源消耗记录.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品型号Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.产品型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品型号Null() {
                this[this.table乳化沥青生产能源消耗记录.产品型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产量Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.生产量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产量Null() {
                this[this.table乳化沥青生产能源消耗记录.生产量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产工时Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.生产工时Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产工时Null() {
                this[this.table乳化沥青生产能源消耗记录.生产工时Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料名称Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.燃料名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料名称Null() {
                this[this.table乳化沥青生产能源消耗记录.燃料名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料型号Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.燃料型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料型号Null() {
                this[this.table乳化沥青生产能源消耗记录.燃料型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃油煤量Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.燃油煤量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃油煤量Null() {
                this[this.table乳化沥青生产能源消耗记录.燃油煤量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料消耗率Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.燃料消耗率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料消耗率Null() {
                this[this.table乳化沥青生产能源消耗记录.燃料消耗率Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用电量Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.用电量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用电量Null() {
                this[this.table乳化沥青生产能源消耗记录.用电量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用电消耗率Null() {
                return this.IsNull(this.table乳化沥青生产能源消耗记录.用电消耗率Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用电消耗率Null() {
                this[this.table乳化沥青生产能源消耗记录.用电消耗率Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 热油炉能源消耗记录Row : global::System.Data.DataRow {
            
            private 热油炉能源消耗记录DataTable table热油炉能源消耗记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 热油炉能源消耗记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table热油炉能源消耗记录 = ((热油炉能源消耗记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.table热油炉能源消耗记录.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉能源消耗记录”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉能源消耗记录.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table热油炉能源消耗记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉能源消耗记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉能源消耗记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产工时 {
                get {
                    try {
                        return ((string)(this[this.table热油炉能源消耗记录.生产工时Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉能源消耗记录”中列“生产工时”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉能源消耗记录.生产工时Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料名称 {
                get {
                    try {
                        return ((string)(this[this.table热油炉能源消耗记录.燃料名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉能源消耗记录”中列“燃料名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉能源消耗记录.燃料名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 燃料型号 {
                get {
                    try {
                        return ((string)(this[this.table热油炉能源消耗记录.燃料型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉能源消耗记录”中列“燃料型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉能源消耗记录.燃料型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _燃油_煤_量 {
                get {
                    try {
                        return ((string)(this[this.table热油炉能源消耗记录._燃油_煤_量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉能源消耗记录”中列“燃油（煤）量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉能源消耗记录._燃油_煤_量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用电量 {
                get {
                    try {
                        return ((string)(this[this.table热油炉能源消耗记录.用电量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉能源消耗记录”中列“用电量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉能源消耗记录.用电量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.table热油炉能源消耗记录.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.table热油炉能源消耗记录.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table热油炉能源消耗记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table热油炉能源消耗记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产工时Null() {
                return this.IsNull(this.table热油炉能源消耗记录.生产工时Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产工时Null() {
                this[this.table热油炉能源消耗记录.生产工时Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料名称Null() {
                return this.IsNull(this.table热油炉能源消耗记录.燃料名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料名称Null() {
                this[this.table热油炉能源消耗记录.燃料名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is燃料型号Null() {
                return this.IsNull(this.table热油炉能源消耗记录.燃料型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set燃料型号Null() {
                this[this.table热油炉能源消耗记录.燃料型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_燃油_煤_量Null() {
                return this.IsNull(this.table热油炉能源消耗记录._燃油_煤_量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_燃油_煤_量Null() {
                this[this.table热油炉能源消耗记录._燃油_煤_量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用电量Null() {
                return this.IsNull(this.table热油炉能源消耗记录.用电量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用电量Null() {
                this[this.table热油炉能源消耗记录.用电量Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 热油炉用煤详细记录Row : global::System.Data.DataRow {
            
            private 热油炉用煤详细记录DataTable table热油炉用煤详细记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 热油炉用煤详细记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table热油炉用煤详细记录 = ((热油炉用煤详细记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 日期时间 {
                get {
                    try {
                        return ((string)(this[this.table热油炉用煤详细记录.日期时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉用煤详细记录”中列“日期时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉用煤详细记录.日期时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.table热油炉用煤详细记录.设备名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉用煤详细记录”中列“设备名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉用煤详细记录.设备名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table热油炉用煤详细记录.设备编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉用煤详细记录”中列“设备编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉用煤详细记录.设备编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用煤量 {
                get {
                    try {
                        return ((string)(this[this.table热油炉用煤详细记录.用煤量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉用煤详细记录”中列“用煤量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉用煤详细记录.用煤量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 操作员 {
                get {
                    try {
                        return ((string)(this[this.table热油炉用煤详细记录.操作员Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉用煤详细记录”中列“操作员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉用煤详细记录.操作员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.table热油炉用煤详细记录.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“热油炉用煤详细记录”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table热油炉用煤详细记录.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is日期时间Null() {
                return this.IsNull(this.table热油炉用煤详细记录.日期时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set日期时间Null() {
                this[this.table热油炉用煤详细记录.日期时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备名称Null() {
                return this.IsNull(this.table热油炉用煤详细记录.设备名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备名称Null() {
                this[this.table热油炉用煤详细记录.设备名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备编号Null() {
                return this.IsNull(this.table热油炉用煤详细记录.设备编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备编号Null() {
                this[this.table热油炉用煤详细记录.设备编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用煤量Null() {
                return this.IsNull(this.table热油炉用煤详细记录.用煤量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用煤量Null() {
                this[this.table热油炉用煤详细记录.用煤量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is操作员Null() {
                return this.IsNull(this.table热油炉用煤详细记录.操作员Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set操作员Null() {
                this[this.table热油炉用煤详细记录.操作员Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.table热油炉用煤详细记录.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.table热油炉用煤详细记录.备注Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class YearProducePlanRowChangeEvent : global::System.EventArgs {
            
            private YearProducePlanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearProducePlanRowChangeEvent(YearProducePlanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearProducePlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class YearMaterialRequirementsPlanningRowChangeEvent : global::System.EventArgs {
            
            private YearMaterialRequirementsPlanningRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearMaterialRequirementsPlanningRowChangeEvent(YearMaterialRequirementsPlanningRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearMaterialRequirementsPlanningRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProduceInfoRowChangeEvent : global::System.EventArgs {
            
            private ProduceInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProduceInfoRowChangeEvent(ProduceInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProduceInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 生产配合比信息RowChangeEvent : global::System.EventArgs {
            
            private 生产配合比信息Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产配合比信息RowChangeEvent(生产配合比信息Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产配合比信息Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 目标配合比信息RowChangeEvent : global::System.EventArgs {
            
            private 目标配合比信息Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 目标配合比信息RowChangeEvent(目标配合比信息Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 目标配合比信息Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 混合料生产情况记录RowChangeEvent : global::System.EventArgs {
            
            private 混合料生产情况记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合料生产情况记录RowChangeEvent(混合料生产情况记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合料生产情况记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 沥青生产情况记录RowChangeEvent : global::System.EventArgs {
            
            private 沥青生产情况记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青生产情况记录RowChangeEvent(沥青生产情况记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青生产情况记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 沥青加温生产情况记录RowChangeEvent : global::System.EventArgs {
            
            private 沥青加温生产情况记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青加温生产情况记录RowChangeEvent(沥青加温生产情况记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 沥青加温生产情况记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 生产月统计报表RowChangeEvent : global::System.EventArgs {
            
            private 生产月统计报表Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产月统计报表RowChangeEvent(生产月统计报表Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产月统计报表Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 生产日统计报表RowChangeEvent : global::System.EventArgs {
            
            private 生产日统计报表Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产日统计报表RowChangeEvent(生产日统计报表Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 生产日统计报表Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 能源消耗统计RowChangeEvent : global::System.EventArgs {
            
            private 能源消耗统计Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 能源消耗统计RowChangeEvent(能源消耗统计Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 能源消耗统计Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 混合能源消耗记录RowChangeEvent : global::System.EventArgs {
            
            private 混合能源消耗记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合能源消耗记录RowChangeEvent(混合能源消耗记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 混合能源消耗记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 改性沥青生产能源消耗记录RowChangeEvent : global::System.EventArgs {
            
            private 改性沥青生产能源消耗记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 改性沥青生产能源消耗记录RowChangeEvent(改性沥青生产能源消耗记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 改性沥青生产能源消耗记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 乳化沥青生产能源消耗记录RowChangeEvent : global::System.EventArgs {
            
            private 乳化沥青生产能源消耗记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 乳化沥青生产能源消耗记录RowChangeEvent(乳化沥青生产能源消耗记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 乳化沥青生产能源消耗记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 热油炉能源消耗记录RowChangeEvent : global::System.EventArgs {
            
            private 热油炉能源消耗记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉能源消耗记录RowChangeEvent(热油炉能源消耗记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉能源消耗记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 热油炉用煤详细记录RowChangeEvent : global::System.EventArgs {
            
            private 热油炉用煤详细记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉用煤详细记录RowChangeEvent(热油炉用煤详细记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 热油炉用煤详细记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591