//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DasherStation.ReportDistrict.financeReport {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("finance")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class finance : global::System.Data.DataSet {
        
        private shouldInputRecordDataTable tableshouldInputRecord;
        
        private receivablesRecordDataTable tablereceivablesRecord;
        
        private shouldOutputRecordDataTable tableshouldOutputRecord;
        
        private payablesRecordDataTable tablepayablesRecord;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public finance() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected finance(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["shouldInputRecord"] != null)) {
                    base.Tables.Add(new shouldInputRecordDataTable(ds.Tables["shouldInputRecord"]));
                }
                if ((ds.Tables["receivablesRecord"] != null)) {
                    base.Tables.Add(new receivablesRecordDataTable(ds.Tables["receivablesRecord"]));
                }
                if ((ds.Tables["shouldOutputRecord"] != null)) {
                    base.Tables.Add(new shouldOutputRecordDataTable(ds.Tables["shouldOutputRecord"]));
                }
                if ((ds.Tables["payablesRecord"] != null)) {
                    base.Tables.Add(new payablesRecordDataTable(ds.Tables["payablesRecord"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public shouldInputRecordDataTable shouldInputRecord {
            get {
                return this.tableshouldInputRecord;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public receivablesRecordDataTable receivablesRecord {
            get {
                return this.tablereceivablesRecord;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public shouldOutputRecordDataTable shouldOutputRecord {
            get {
                return this.tableshouldOutputRecord;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public payablesRecordDataTable payablesRecord {
            get {
                return this.tablepayablesRecord;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            finance cln = ((finance)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["shouldInputRecord"] != null)) {
                    base.Tables.Add(new shouldInputRecordDataTable(ds.Tables["shouldInputRecord"]));
                }
                if ((ds.Tables["receivablesRecord"] != null)) {
                    base.Tables.Add(new receivablesRecordDataTable(ds.Tables["receivablesRecord"]));
                }
                if ((ds.Tables["shouldOutputRecord"] != null)) {
                    base.Tables.Add(new shouldOutputRecordDataTable(ds.Tables["shouldOutputRecord"]));
                }
                if ((ds.Tables["payablesRecord"] != null)) {
                    base.Tables.Add(new payablesRecordDataTable(ds.Tables["payablesRecord"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableshouldInputRecord = ((shouldInputRecordDataTable)(base.Tables["shouldInputRecord"]));
            if ((initTable == true)) {
                if ((this.tableshouldInputRecord != null)) {
                    this.tableshouldInputRecord.InitVars();
                }
            }
            this.tablereceivablesRecord = ((receivablesRecordDataTable)(base.Tables["receivablesRecord"]));
            if ((initTable == true)) {
                if ((this.tablereceivablesRecord != null)) {
                    this.tablereceivablesRecord.InitVars();
                }
            }
            this.tableshouldOutputRecord = ((shouldOutputRecordDataTable)(base.Tables["shouldOutputRecord"]));
            if ((initTable == true)) {
                if ((this.tableshouldOutputRecord != null)) {
                    this.tableshouldOutputRecord.InitVars();
                }
            }
            this.tablepayablesRecord = ((payablesRecordDataTable)(base.Tables["payablesRecord"]));
            if ((initTable == true)) {
                if ((this.tablepayablesRecord != null)) {
                    this.tablepayablesRecord.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "finance";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/finance.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableshouldInputRecord = new shouldInputRecordDataTable();
            base.Tables.Add(this.tableshouldInputRecord);
            this.tablereceivablesRecord = new receivablesRecordDataTable();
            base.Tables.Add(this.tablereceivablesRecord);
            this.tableshouldOutputRecord = new shouldOutputRecordDataTable();
            base.Tables.Add(this.tableshouldOutputRecord);
            this.tablepayablesRecord = new payablesRecordDataTable();
            base.Tables.Add(this.tablepayablesRecord);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeshouldInputRecord() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereceivablesRecord() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeshouldOutputRecord() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepayablesRecord() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            finance ds = new finance();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void shouldInputRecordRowChangeEventHandler(object sender, shouldInputRecordRowChangeEvent e);
        
        public delegate void receivablesRecordRowChangeEventHandler(object sender, receivablesRecordRowChangeEvent e);
        
        public delegate void shouldOutputRecordRowChangeEventHandler(object sender, shouldOutputRecordRowChangeEvent e);
        
        public delegate void payablesRecordRowChangeEventHandler(object sender, payablesRecordRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class shouldInputRecordDataTable : global::System.Data.TypedTableBase<shouldInputRecordRow> {
            
            private global::System.Data.DataColumn columndocNum;
            
            private global::System.Data.DataColumn columnsupplierName;
            
            private global::System.Data.DataColumn columninvoiceNum;
            
            private global::System.Data.DataColumn columnshouldMoney;
            
            private global::System.Data.DataColumn columnalreadyMoney;
            
            private global::System.Data.DataColumn columnarrearsMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldInputRecordDataTable() {
                this.TableName = "shouldInputRecord";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal shouldInputRecordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected shouldInputRecordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docNumColumn {
                get {
                    return this.columndocNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn supplierNameColumn {
                get {
                    return this.columnsupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceNumColumn {
                get {
                    return this.columninvoiceNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shouldMoneyColumn {
                get {
                    return this.columnshouldMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn alreadyMoneyColumn {
                get {
                    return this.columnalreadyMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn arrearsMoneyColumn {
                get {
                    return this.columnarrearsMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldInputRecordRow this[int index] {
                get {
                    return ((shouldInputRecordRow)(this.Rows[index]));
                }
            }
            
            public event shouldInputRecordRowChangeEventHandler shouldInputRecordRowChanging;
            
            public event shouldInputRecordRowChangeEventHandler shouldInputRecordRowChanged;
            
            public event shouldInputRecordRowChangeEventHandler shouldInputRecordRowDeleting;
            
            public event shouldInputRecordRowChangeEventHandler shouldInputRecordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddshouldInputRecordRow(shouldInputRecordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldInputRecordRow AddshouldInputRecordRow(string docNum, string supplierName, string invoiceNum, string shouldMoney, string alreadyMoney, string arrearsMoney) {
                shouldInputRecordRow rowshouldInputRecordRow = ((shouldInputRecordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        docNum,
                        supplierName,
                        invoiceNum,
                        shouldMoney,
                        alreadyMoney,
                        arrearsMoney};
                rowshouldInputRecordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowshouldInputRecordRow);
                return rowshouldInputRecordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                shouldInputRecordDataTable cln = ((shouldInputRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new shouldInputRecordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndocNum = base.Columns["docNum"];
                this.columnsupplierName = base.Columns["supplierName"];
                this.columninvoiceNum = base.Columns["invoiceNum"];
                this.columnshouldMoney = base.Columns["shouldMoney"];
                this.columnalreadyMoney = base.Columns["alreadyMoney"];
                this.columnarrearsMoney = base.Columns["arrearsMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndocNum = new global::System.Data.DataColumn("docNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocNum);
                this.columnsupplierName = new global::System.Data.DataColumn("supplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsupplierName);
                this.columninvoiceNum = new global::System.Data.DataColumn("invoiceNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceNum);
                this.columnshouldMoney = new global::System.Data.DataColumn("shouldMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshouldMoney);
                this.columnalreadyMoney = new global::System.Data.DataColumn("alreadyMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalreadyMoney);
                this.columnarrearsMoney = new global::System.Data.DataColumn("arrearsMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnarrearsMoney);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldInputRecordRow NewshouldInputRecordRow() {
                return ((shouldInputRecordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new shouldInputRecordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(shouldInputRecordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.shouldInputRecordRowChanged != null)) {
                    this.shouldInputRecordRowChanged(this, new shouldInputRecordRowChangeEvent(((shouldInputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.shouldInputRecordRowChanging != null)) {
                    this.shouldInputRecordRowChanging(this, new shouldInputRecordRowChangeEvent(((shouldInputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.shouldInputRecordRowDeleted != null)) {
                    this.shouldInputRecordRowDeleted(this, new shouldInputRecordRowChangeEvent(((shouldInputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.shouldInputRecordRowDeleting != null)) {
                    this.shouldInputRecordRowDeleting(this, new shouldInputRecordRowChangeEvent(((shouldInputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveshouldInputRecordRow(shouldInputRecordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                finance ds = new finance();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "shouldInputRecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class receivablesRecordDataTable : global::System.Data.TypedTableBase<receivablesRecordRow> {
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columnguestName;
            
            private global::System.Data.DataColumn columninvoiceNum;
            
            private global::System.Data.DataColumn columnhistoryAlreadyMoney;
            
            private global::System.Data.DataColumn columnarrearsTotalMoney;
            
            private global::System.Data.DataColumn columnTheIncludeMoney;
            
            private global::System.Data.DataColumn columnbackup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receivablesRecordDataTable() {
                this.TableName = "receivablesRecord";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal receivablesRecordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected receivablesRecordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guestNameColumn {
                get {
                    return this.columnguestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceNumColumn {
                get {
                    return this.columninvoiceNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn historyAlreadyMoneyColumn {
                get {
                    return this.columnhistoryAlreadyMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn arrearsTotalMoneyColumn {
                get {
                    return this.columnarrearsTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TheIncludeMoneyColumn {
                get {
                    return this.columnTheIncludeMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn backupColumn {
                get {
                    return this.columnbackup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receivablesRecordRow this[int index] {
                get {
                    return ((receivablesRecordRow)(this.Rows[index]));
                }
            }
            
            public event receivablesRecordRowChangeEventHandler receivablesRecordRowChanging;
            
            public event receivablesRecordRowChangeEventHandler receivablesRecordRowChanged;
            
            public event receivablesRecordRowChangeEventHandler receivablesRecordRowDeleting;
            
            public event receivablesRecordRowChangeEventHandler receivablesRecordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddreceivablesRecordRow(receivablesRecordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receivablesRecordRow AddreceivablesRecordRow(string date, string guestName, string invoiceNum, string historyAlreadyMoney, string arrearsTotalMoney, string TheIncludeMoney, string backup) {
                receivablesRecordRow rowreceivablesRecordRow = ((receivablesRecordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        date,
                        guestName,
                        invoiceNum,
                        historyAlreadyMoney,
                        arrearsTotalMoney,
                        TheIncludeMoney,
                        backup};
                rowreceivablesRecordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreceivablesRecordRow);
                return rowreceivablesRecordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                receivablesRecordDataTable cln = ((receivablesRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new receivablesRecordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate = base.Columns["date"];
                this.columnguestName = base.Columns["guestName"];
                this.columninvoiceNum = base.Columns["invoiceNum"];
                this.columnhistoryAlreadyMoney = base.Columns["historyAlreadyMoney"];
                this.columnarrearsTotalMoney = base.Columns["arrearsTotalMoney"];
                this.columnTheIncludeMoney = base.Columns["TheIncludeMoney"];
                this.columnbackup = base.Columns["backup"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnguestName = new global::System.Data.DataColumn("guestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnguestName);
                this.columninvoiceNum = new global::System.Data.DataColumn("invoiceNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceNum);
                this.columnhistoryAlreadyMoney = new global::System.Data.DataColumn("historyAlreadyMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhistoryAlreadyMoney);
                this.columnarrearsTotalMoney = new global::System.Data.DataColumn("arrearsTotalMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnarrearsTotalMoney);
                this.columnTheIncludeMoney = new global::System.Data.DataColumn("TheIncludeMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTheIncludeMoney);
                this.columnbackup = new global::System.Data.DataColumn("backup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbackup);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receivablesRecordRow NewreceivablesRecordRow() {
                return ((receivablesRecordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new receivablesRecordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(receivablesRecordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.receivablesRecordRowChanged != null)) {
                    this.receivablesRecordRowChanged(this, new receivablesRecordRowChangeEvent(((receivablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.receivablesRecordRowChanging != null)) {
                    this.receivablesRecordRowChanging(this, new receivablesRecordRowChangeEvent(((receivablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.receivablesRecordRowDeleted != null)) {
                    this.receivablesRecordRowDeleted(this, new receivablesRecordRowChangeEvent(((receivablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.receivablesRecordRowDeleting != null)) {
                    this.receivablesRecordRowDeleting(this, new receivablesRecordRowChangeEvent(((receivablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovereceivablesRecordRow(receivablesRecordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                finance ds = new finance();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "receivablesRecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class shouldOutputRecordDataTable : global::System.Data.TypedTableBase<shouldOutputRecordRow> {
            
            private global::System.Data.DataColumn columndocNum;
            
            private global::System.Data.DataColumn columnsupplierName;
            
            private global::System.Data.DataColumn columninvoiceNum;
            
            private global::System.Data.DataColumn columnshouldMoney;
            
            private global::System.Data.DataColumn columnalreadyMoney;
            
            private global::System.Data.DataColumn columnarrearsMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldOutputRecordDataTable() {
                this.TableName = "shouldOutputRecord";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal shouldOutputRecordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected shouldOutputRecordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docNumColumn {
                get {
                    return this.columndocNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn supplierNameColumn {
                get {
                    return this.columnsupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceNumColumn {
                get {
                    return this.columninvoiceNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shouldMoneyColumn {
                get {
                    return this.columnshouldMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn alreadyMoneyColumn {
                get {
                    return this.columnalreadyMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn arrearsMoneyColumn {
                get {
                    return this.columnarrearsMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldOutputRecordRow this[int index] {
                get {
                    return ((shouldOutputRecordRow)(this.Rows[index]));
                }
            }
            
            public event shouldOutputRecordRowChangeEventHandler shouldOutputRecordRowChanging;
            
            public event shouldOutputRecordRowChangeEventHandler shouldOutputRecordRowChanged;
            
            public event shouldOutputRecordRowChangeEventHandler shouldOutputRecordRowDeleting;
            
            public event shouldOutputRecordRowChangeEventHandler shouldOutputRecordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddshouldOutputRecordRow(shouldOutputRecordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldOutputRecordRow AddshouldOutputRecordRow(string docNum, string supplierName, string invoiceNum, string shouldMoney, string alreadyMoney, string arrearsMoney) {
                shouldOutputRecordRow rowshouldOutputRecordRow = ((shouldOutputRecordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        docNum,
                        supplierName,
                        invoiceNum,
                        shouldMoney,
                        alreadyMoney,
                        arrearsMoney};
                rowshouldOutputRecordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowshouldOutputRecordRow);
                return rowshouldOutputRecordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                shouldOutputRecordDataTable cln = ((shouldOutputRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new shouldOutputRecordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndocNum = base.Columns["docNum"];
                this.columnsupplierName = base.Columns["supplierName"];
                this.columninvoiceNum = base.Columns["invoiceNum"];
                this.columnshouldMoney = base.Columns["shouldMoney"];
                this.columnalreadyMoney = base.Columns["alreadyMoney"];
                this.columnarrearsMoney = base.Columns["arrearsMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndocNum = new global::System.Data.DataColumn("docNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocNum);
                this.columnsupplierName = new global::System.Data.DataColumn("supplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsupplierName);
                this.columninvoiceNum = new global::System.Data.DataColumn("invoiceNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceNum);
                this.columnshouldMoney = new global::System.Data.DataColumn("shouldMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshouldMoney);
                this.columnalreadyMoney = new global::System.Data.DataColumn("alreadyMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalreadyMoney);
                this.columnarrearsMoney = new global::System.Data.DataColumn("arrearsMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnarrearsMoney);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldOutputRecordRow NewshouldOutputRecordRow() {
                return ((shouldOutputRecordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new shouldOutputRecordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(shouldOutputRecordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.shouldOutputRecordRowChanged != null)) {
                    this.shouldOutputRecordRowChanged(this, new shouldOutputRecordRowChangeEvent(((shouldOutputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.shouldOutputRecordRowChanging != null)) {
                    this.shouldOutputRecordRowChanging(this, new shouldOutputRecordRowChangeEvent(((shouldOutputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.shouldOutputRecordRowDeleted != null)) {
                    this.shouldOutputRecordRowDeleted(this, new shouldOutputRecordRowChangeEvent(((shouldOutputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.shouldOutputRecordRowDeleting != null)) {
                    this.shouldOutputRecordRowDeleting(this, new shouldOutputRecordRowChangeEvent(((shouldOutputRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveshouldOutputRecordRow(shouldOutputRecordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                finance ds = new finance();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "shouldOutputRecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class payablesRecordDataTable : global::System.Data.TypedTableBase<payablesRecordRow> {
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columnguestName;
            
            private global::System.Data.DataColumn columninvoiceNum;
            
            private global::System.Data.DataColumn columnhistoryAlreadyMoney;
            
            private global::System.Data.DataColumn columnarrearsTotalMoney;
            
            private global::System.Data.DataColumn columnTheIncludeMoney;
            
            private global::System.Data.DataColumn columnbackup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payablesRecordDataTable() {
                this.TableName = "payablesRecord";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal payablesRecordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected payablesRecordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guestNameColumn {
                get {
                    return this.columnguestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceNumColumn {
                get {
                    return this.columninvoiceNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn historyAlreadyMoneyColumn {
                get {
                    return this.columnhistoryAlreadyMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn arrearsTotalMoneyColumn {
                get {
                    return this.columnarrearsTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TheIncludeMoneyColumn {
                get {
                    return this.columnTheIncludeMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn backupColumn {
                get {
                    return this.columnbackup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payablesRecordRow this[int index] {
                get {
                    return ((payablesRecordRow)(this.Rows[index]));
                }
            }
            
            public event payablesRecordRowChangeEventHandler payablesRecordRowChanging;
            
            public event payablesRecordRowChangeEventHandler payablesRecordRowChanged;
            
            public event payablesRecordRowChangeEventHandler payablesRecordRowDeleting;
            
            public event payablesRecordRowChangeEventHandler payablesRecordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpayablesRecordRow(payablesRecordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payablesRecordRow AddpayablesRecordRow(string date, string guestName, string invoiceNum, string historyAlreadyMoney, string arrearsTotalMoney, string TheIncludeMoney, string backup) {
                payablesRecordRow rowpayablesRecordRow = ((payablesRecordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        date,
                        guestName,
                        invoiceNum,
                        historyAlreadyMoney,
                        arrearsTotalMoney,
                        TheIncludeMoney,
                        backup};
                rowpayablesRecordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpayablesRecordRow);
                return rowpayablesRecordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                payablesRecordDataTable cln = ((payablesRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new payablesRecordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate = base.Columns["date"];
                this.columnguestName = base.Columns["guestName"];
                this.columninvoiceNum = base.Columns["invoiceNum"];
                this.columnhistoryAlreadyMoney = base.Columns["historyAlreadyMoney"];
                this.columnarrearsTotalMoney = base.Columns["arrearsTotalMoney"];
                this.columnTheIncludeMoney = base.Columns["TheIncludeMoney"];
                this.columnbackup = base.Columns["backup"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnguestName = new global::System.Data.DataColumn("guestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnguestName);
                this.columninvoiceNum = new global::System.Data.DataColumn("invoiceNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceNum);
                this.columnhistoryAlreadyMoney = new global::System.Data.DataColumn("historyAlreadyMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhistoryAlreadyMoney);
                this.columnarrearsTotalMoney = new global::System.Data.DataColumn("arrearsTotalMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnarrearsTotalMoney);
                this.columnTheIncludeMoney = new global::System.Data.DataColumn("TheIncludeMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTheIncludeMoney);
                this.columnbackup = new global::System.Data.DataColumn("backup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbackup);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payablesRecordRow NewpayablesRecordRow() {
                return ((payablesRecordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new payablesRecordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(payablesRecordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.payablesRecordRowChanged != null)) {
                    this.payablesRecordRowChanged(this, new payablesRecordRowChangeEvent(((payablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.payablesRecordRowChanging != null)) {
                    this.payablesRecordRowChanging(this, new payablesRecordRowChangeEvent(((payablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.payablesRecordRowDeleted != null)) {
                    this.payablesRecordRowDeleted(this, new payablesRecordRowChangeEvent(((payablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.payablesRecordRowDeleting != null)) {
                    this.payablesRecordRowDeleting(this, new payablesRecordRowChangeEvent(((payablesRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepayablesRecordRow(payablesRecordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                finance ds = new finance();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "payablesRecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class shouldInputRecordRow : global::System.Data.DataRow {
            
            private shouldInputRecordDataTable tableshouldInputRecord;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal shouldInputRecordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableshouldInputRecord = ((shouldInputRecordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docNum {
                get {
                    try {
                        return ((string)(this[this.tableshouldInputRecord.docNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldInputRecord”中列“docNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldInputRecord.docNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string supplierName {
                get {
                    try {
                        return ((string)(this[this.tableshouldInputRecord.supplierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldInputRecord”中列“supplierName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldInputRecord.supplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoiceNum {
                get {
                    try {
                        return ((string)(this[this.tableshouldInputRecord.invoiceNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldInputRecord”中列“invoiceNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldInputRecord.invoiceNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string shouldMoney {
                get {
                    try {
                        return ((string)(this[this.tableshouldInputRecord.shouldMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldInputRecord”中列“shouldMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldInputRecord.shouldMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string alreadyMoney {
                get {
                    try {
                        return ((string)(this[this.tableshouldInputRecord.alreadyMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldInputRecord”中列“alreadyMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldInputRecord.alreadyMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arrearsMoney {
                get {
                    try {
                        return ((string)(this[this.tableshouldInputRecord.arrearsMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldInputRecord”中列“arrearsMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldInputRecord.arrearsMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocNumNull() {
                return this.IsNull(this.tableshouldInputRecord.docNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocNumNull() {
                this[this.tableshouldInputRecord.docNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssupplierNameNull() {
                return this.IsNull(this.tableshouldInputRecord.supplierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsupplierNameNull() {
                this[this.tableshouldInputRecord.supplierNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinvoiceNumNull() {
                return this.IsNull(this.tableshouldInputRecord.invoiceNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinvoiceNumNull() {
                this[this.tableshouldInputRecord.invoiceNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsshouldMoneyNull() {
                return this.IsNull(this.tableshouldInputRecord.shouldMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetshouldMoneyNull() {
                this[this.tableshouldInputRecord.shouldMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsalreadyMoneyNull() {
                return this.IsNull(this.tableshouldInputRecord.alreadyMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetalreadyMoneyNull() {
                this[this.tableshouldInputRecord.alreadyMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsarrearsMoneyNull() {
                return this.IsNull(this.tableshouldInputRecord.arrearsMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetarrearsMoneyNull() {
                this[this.tableshouldInputRecord.arrearsMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class receivablesRecordRow : global::System.Data.DataRow {
            
            private receivablesRecordDataTable tablereceivablesRecord;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal receivablesRecordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereceivablesRecord = ((receivablesRecordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    try {
                        return ((string)(this[this.tablereceivablesRecord.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“receivablesRecord”中列“date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablereceivablesRecord.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guestName {
                get {
                    try {
                        return ((string)(this[this.tablereceivablesRecord.guestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“receivablesRecord”中列“guestName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablereceivablesRecord.guestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoiceNum {
                get {
                    try {
                        return ((string)(this[this.tablereceivablesRecord.invoiceNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“receivablesRecord”中列“invoiceNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablereceivablesRecord.invoiceNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string historyAlreadyMoney {
                get {
                    try {
                        return ((string)(this[this.tablereceivablesRecord.historyAlreadyMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“receivablesRecord”中列“historyAlreadyMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablereceivablesRecord.historyAlreadyMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arrearsTotalMoney {
                get {
                    try {
                        return ((string)(this[this.tablereceivablesRecord.arrearsTotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“receivablesRecord”中列“arrearsTotalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablereceivablesRecord.arrearsTotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TheIncludeMoney {
                get {
                    try {
                        return ((string)(this[this.tablereceivablesRecord.TheIncludeMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“receivablesRecord”中列“TheIncludeMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablereceivablesRecord.TheIncludeMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string backup {
                get {
                    try {
                        return ((string)(this[this.tablereceivablesRecord.backupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“receivablesRecord”中列“backup”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablereceivablesRecord.backupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tablereceivablesRecord.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tablereceivablesRecord.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsguestNameNull() {
                return this.IsNull(this.tablereceivablesRecord.guestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetguestNameNull() {
                this[this.tablereceivablesRecord.guestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinvoiceNumNull() {
                return this.IsNull(this.tablereceivablesRecord.invoiceNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinvoiceNumNull() {
                this[this.tablereceivablesRecord.invoiceNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshistoryAlreadyMoneyNull() {
                return this.IsNull(this.tablereceivablesRecord.historyAlreadyMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethistoryAlreadyMoneyNull() {
                this[this.tablereceivablesRecord.historyAlreadyMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsarrearsTotalMoneyNull() {
                return this.IsNull(this.tablereceivablesRecord.arrearsTotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetarrearsTotalMoneyNull() {
                this[this.tablereceivablesRecord.arrearsTotalMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTheIncludeMoneyNull() {
                return this.IsNull(this.tablereceivablesRecord.TheIncludeMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTheIncludeMoneyNull() {
                this[this.tablereceivablesRecord.TheIncludeMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbackupNull() {
                return this.IsNull(this.tablereceivablesRecord.backupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbackupNull() {
                this[this.tablereceivablesRecord.backupColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class shouldOutputRecordRow : global::System.Data.DataRow {
            
            private shouldOutputRecordDataTable tableshouldOutputRecord;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal shouldOutputRecordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableshouldOutputRecord = ((shouldOutputRecordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docNum {
                get {
                    try {
                        return ((string)(this[this.tableshouldOutputRecord.docNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldOutputRecord”中列“docNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldOutputRecord.docNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string supplierName {
                get {
                    try {
                        return ((string)(this[this.tableshouldOutputRecord.supplierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldOutputRecord”中列“supplierName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldOutputRecord.supplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoiceNum {
                get {
                    try {
                        return ((string)(this[this.tableshouldOutputRecord.invoiceNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldOutputRecord”中列“invoiceNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldOutputRecord.invoiceNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string shouldMoney {
                get {
                    try {
                        return ((string)(this[this.tableshouldOutputRecord.shouldMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldOutputRecord”中列“shouldMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldOutputRecord.shouldMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string alreadyMoney {
                get {
                    try {
                        return ((string)(this[this.tableshouldOutputRecord.alreadyMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldOutputRecord”中列“alreadyMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldOutputRecord.alreadyMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arrearsMoney {
                get {
                    try {
                        return ((string)(this[this.tableshouldOutputRecord.arrearsMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“shouldOutputRecord”中列“arrearsMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableshouldOutputRecord.arrearsMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocNumNull() {
                return this.IsNull(this.tableshouldOutputRecord.docNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocNumNull() {
                this[this.tableshouldOutputRecord.docNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssupplierNameNull() {
                return this.IsNull(this.tableshouldOutputRecord.supplierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsupplierNameNull() {
                this[this.tableshouldOutputRecord.supplierNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinvoiceNumNull() {
                return this.IsNull(this.tableshouldOutputRecord.invoiceNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinvoiceNumNull() {
                this[this.tableshouldOutputRecord.invoiceNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsshouldMoneyNull() {
                return this.IsNull(this.tableshouldOutputRecord.shouldMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetshouldMoneyNull() {
                this[this.tableshouldOutputRecord.shouldMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsalreadyMoneyNull() {
                return this.IsNull(this.tableshouldOutputRecord.alreadyMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetalreadyMoneyNull() {
                this[this.tableshouldOutputRecord.alreadyMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsarrearsMoneyNull() {
                return this.IsNull(this.tableshouldOutputRecord.arrearsMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetarrearsMoneyNull() {
                this[this.tableshouldOutputRecord.arrearsMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class payablesRecordRow : global::System.Data.DataRow {
            
            private payablesRecordDataTable tablepayablesRecord;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal payablesRecordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepayablesRecord = ((payablesRecordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    try {
                        return ((string)(this[this.tablepayablesRecord.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“payablesRecord”中列“date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepayablesRecord.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guestName {
                get {
                    try {
                        return ((string)(this[this.tablepayablesRecord.guestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“payablesRecord”中列“guestName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepayablesRecord.guestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoiceNum {
                get {
                    try {
                        return ((string)(this[this.tablepayablesRecord.invoiceNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“payablesRecord”中列“invoiceNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepayablesRecord.invoiceNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string historyAlreadyMoney {
                get {
                    try {
                        return ((string)(this[this.tablepayablesRecord.historyAlreadyMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“payablesRecord”中列“historyAlreadyMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepayablesRecord.historyAlreadyMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arrearsTotalMoney {
                get {
                    try {
                        return ((string)(this[this.tablepayablesRecord.arrearsTotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“payablesRecord”中列“arrearsTotalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepayablesRecord.arrearsTotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TheIncludeMoney {
                get {
                    try {
                        return ((string)(this[this.tablepayablesRecord.TheIncludeMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“payablesRecord”中列“TheIncludeMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepayablesRecord.TheIncludeMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string backup {
                get {
                    try {
                        return ((string)(this[this.tablepayablesRecord.backupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“payablesRecord”中列“backup”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablepayablesRecord.backupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tablepayablesRecord.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tablepayablesRecord.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsguestNameNull() {
                return this.IsNull(this.tablepayablesRecord.guestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetguestNameNull() {
                this[this.tablepayablesRecord.guestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinvoiceNumNull() {
                return this.IsNull(this.tablepayablesRecord.invoiceNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinvoiceNumNull() {
                this[this.tablepayablesRecord.invoiceNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshistoryAlreadyMoneyNull() {
                return this.IsNull(this.tablepayablesRecord.historyAlreadyMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethistoryAlreadyMoneyNull() {
                this[this.tablepayablesRecord.historyAlreadyMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsarrearsTotalMoneyNull() {
                return this.IsNull(this.tablepayablesRecord.arrearsTotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetarrearsTotalMoneyNull() {
                this[this.tablepayablesRecord.arrearsTotalMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTheIncludeMoneyNull() {
                return this.IsNull(this.tablepayablesRecord.TheIncludeMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTheIncludeMoneyNull() {
                this[this.tablepayablesRecord.TheIncludeMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbackupNull() {
                return this.IsNull(this.tablepayablesRecord.backupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbackupNull() {
                this[this.tablepayablesRecord.backupColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class shouldInputRecordRowChangeEvent : global::System.EventArgs {
            
            private shouldInputRecordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldInputRecordRowChangeEvent(shouldInputRecordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldInputRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class receivablesRecordRowChangeEvent : global::System.EventArgs {
            
            private receivablesRecordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receivablesRecordRowChangeEvent(receivablesRecordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receivablesRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class shouldOutputRecordRowChangeEvent : global::System.EventArgs {
            
            private shouldOutputRecordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldOutputRecordRowChangeEvent(shouldOutputRecordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public shouldOutputRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class payablesRecordRowChangeEvent : global::System.EventArgs {
            
            private payablesRecordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payablesRecordRowChangeEvent(payablesRecordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payablesRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591