//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Report.storage {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("stock")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class stock : global::System.Data.DataSet {
        
        private StuffInAccountDataTable tableStuffInAccount;
        
        private MonthStuffStorageDataTable tableMonthStuffStorage;
        
        private ProductInAccountDataTable tableProductInAccount;
        
        private ProductOutAccountDataTable tableProductOutAccount;
        
        private MonthProductStorageDataTable tableMonthProductStorage;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public stock() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected stock(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StuffInAccount"] != null)) {
                    base.Tables.Add(new StuffInAccountDataTable(ds.Tables["StuffInAccount"]));
                }
                if ((ds.Tables["MonthStuffStorage"] != null)) {
                    base.Tables.Add(new MonthStuffStorageDataTable(ds.Tables["MonthStuffStorage"]));
                }
                if ((ds.Tables["ProductInAccount"] != null)) {
                    base.Tables.Add(new ProductInAccountDataTable(ds.Tables["ProductInAccount"]));
                }
                if ((ds.Tables["ProductOutAccount"] != null)) {
                    base.Tables.Add(new ProductOutAccountDataTable(ds.Tables["ProductOutAccount"]));
                }
                if ((ds.Tables["MonthProductStorage"] != null)) {
                    base.Tables.Add(new MonthProductStorageDataTable(ds.Tables["MonthProductStorage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StuffInAccountDataTable StuffInAccount {
            get {
                return this.tableStuffInAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MonthStuffStorageDataTable MonthStuffStorage {
            get {
                return this.tableMonthStuffStorage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductInAccountDataTable ProductInAccount {
            get {
                return this.tableProductInAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductOutAccountDataTable ProductOutAccount {
            get {
                return this.tableProductOutAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MonthProductStorageDataTable MonthProductStorage {
            get {
                return this.tableMonthProductStorage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            stock cln = ((stock)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StuffInAccount"] != null)) {
                    base.Tables.Add(new StuffInAccountDataTable(ds.Tables["StuffInAccount"]));
                }
                if ((ds.Tables["MonthStuffStorage"] != null)) {
                    base.Tables.Add(new MonthStuffStorageDataTable(ds.Tables["MonthStuffStorage"]));
                }
                if ((ds.Tables["ProductInAccount"] != null)) {
                    base.Tables.Add(new ProductInAccountDataTable(ds.Tables["ProductInAccount"]));
                }
                if ((ds.Tables["ProductOutAccount"] != null)) {
                    base.Tables.Add(new ProductOutAccountDataTable(ds.Tables["ProductOutAccount"]));
                }
                if ((ds.Tables["MonthProductStorage"] != null)) {
                    base.Tables.Add(new MonthProductStorageDataTable(ds.Tables["MonthProductStorage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStuffInAccount = ((StuffInAccountDataTable)(base.Tables["StuffInAccount"]));
            if ((initTable == true)) {
                if ((this.tableStuffInAccount != null)) {
                    this.tableStuffInAccount.InitVars();
                }
            }
            this.tableMonthStuffStorage = ((MonthStuffStorageDataTable)(base.Tables["MonthStuffStorage"]));
            if ((initTable == true)) {
                if ((this.tableMonthStuffStorage != null)) {
                    this.tableMonthStuffStorage.InitVars();
                }
            }
            this.tableProductInAccount = ((ProductInAccountDataTable)(base.Tables["ProductInAccount"]));
            if ((initTable == true)) {
                if ((this.tableProductInAccount != null)) {
                    this.tableProductInAccount.InitVars();
                }
            }
            this.tableProductOutAccount = ((ProductOutAccountDataTable)(base.Tables["ProductOutAccount"]));
            if ((initTable == true)) {
                if ((this.tableProductOutAccount != null)) {
                    this.tableProductOutAccount.InitVars();
                }
            }
            this.tableMonthProductStorage = ((MonthProductStorageDataTable)(base.Tables["MonthProductStorage"]));
            if ((initTable == true)) {
                if ((this.tableMonthProductStorage != null)) {
                    this.tableMonthProductStorage.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "stock";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/stock.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStuffInAccount = new StuffInAccountDataTable();
            base.Tables.Add(this.tableStuffInAccount);
            this.tableMonthStuffStorage = new MonthStuffStorageDataTable();
            base.Tables.Add(this.tableMonthStuffStorage);
            this.tableProductInAccount = new ProductInAccountDataTable();
            base.Tables.Add(this.tableProductInAccount);
            this.tableProductOutAccount = new ProductOutAccountDataTable();
            base.Tables.Add(this.tableProductOutAccount);
            this.tableMonthProductStorage = new MonthProductStorageDataTable();
            base.Tables.Add(this.tableMonthProductStorage);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStuffInAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMonthStuffStorage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductInAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductOutAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMonthProductStorage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            stock ds = new stock();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StuffInAccountRowChangeEventHandler(object sender, StuffInAccountRowChangeEvent e);
        
        public delegate void MonthStuffStorageRowChangeEventHandler(object sender, MonthStuffStorageRowChangeEvent e);
        
        public delegate void ProductInAccountRowChangeEventHandler(object sender, ProductInAccountRowChangeEvent e);
        
        public delegate void ProductOutAccountRowChangeEventHandler(object sender, ProductOutAccountRowChangeEvent e);
        
        public delegate void MonthProductStorageRowChangeEventHandler(object sender, MonthProductStorageRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StuffInAccountDataTable : global::System.Data.TypedTableBase<StuffInAccountRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsnInputDate;
            
            private global::System.Data.DataColumn columnmkSort;
            
            private global::System.Data.DataColumn columnmnName;
            
            private global::System.Data.DataColumn columnmmModel;
            
            private global::System.Data.DataColumn columnpiName;
            
            private global::System.Data.DataColumn columnviNo;
            
            private global::System.Data.DataColumn columntuName;
            
            private global::System.Data.DataColumn columngrossWeight;
            
            private global::System.Data.DataColumn columntare;
            
            private global::System.Data.DataColumn columnsnSuttle;
            
            private global::System.Data.DataColumn columnunitPrice;
            
            private global::System.Data.DataColumn columntotalPrice;
            
            private global::System.Data.DataColumn columnsnSurveyor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StuffInAccountDataTable() {
                this.TableName = "StuffInAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StuffInAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StuffInAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snInputDateColumn {
                get {
                    return this.columnsnInputDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mkSortColumn {
                get {
                    return this.columnmkSort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mnNameColumn {
                get {
                    return this.columnmnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mmModelColumn {
                get {
                    return this.columnmmModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn piNameColumn {
                get {
                    return this.columnpiName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn viNoColumn {
                get {
                    return this.columnviNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tuNameColumn {
                get {
                    return this.columntuName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grossWeightColumn {
                get {
                    return this.columngrossWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tareColumn {
                get {
                    return this.columntare;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snSuttleColumn {
                get {
                    return this.columnsnSuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitPriceColumn {
                get {
                    return this.columnunitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalPriceColumn {
                get {
                    return this.columntotalPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snSurveyorColumn {
                get {
                    return this.columnsnSurveyor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StuffInAccountRow this[int index] {
                get {
                    return ((StuffInAccountRow)(this.Rows[index]));
                }
            }
            
            public event StuffInAccountRowChangeEventHandler StuffInAccountRowChanging;
            
            public event StuffInAccountRowChangeEventHandler StuffInAccountRowChanged;
            
            public event StuffInAccountRowChangeEventHandler StuffInAccountRowDeleting;
            
            public event StuffInAccountRowChangeEventHandler StuffInAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStuffInAccountRow(StuffInAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StuffInAccountRow AddStuffInAccountRow(long id, System.DateTime snInputDate, string mkSort, string mnName, string mmModel, string piName, string viNo, string tuName, decimal grossWeight, decimal tare, decimal snSuttle, decimal unitPrice, decimal totalPrice, string snSurveyor) {
                StuffInAccountRow rowStuffInAccountRow = ((StuffInAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        snInputDate,
                        mkSort,
                        mnName,
                        mmModel,
                        piName,
                        viNo,
                        tuName,
                        grossWeight,
                        tare,
                        snSuttle,
                        unitPrice,
                        totalPrice,
                        snSurveyor};
                rowStuffInAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStuffInAccountRow);
                return rowStuffInAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StuffInAccountDataTable cln = ((StuffInAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StuffInAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsnInputDate = base.Columns["snInputDate"];
                this.columnmkSort = base.Columns["mkSort"];
                this.columnmnName = base.Columns["mnName"];
                this.columnmmModel = base.Columns["mmModel"];
                this.columnpiName = base.Columns["piName"];
                this.columnviNo = base.Columns["viNo"];
                this.columntuName = base.Columns["tuName"];
                this.columngrossWeight = base.Columns["grossWeight"];
                this.columntare = base.Columns["tare"];
                this.columnsnSuttle = base.Columns["snSuttle"];
                this.columnunitPrice = base.Columns["unitPrice"];
                this.columntotalPrice = base.Columns["totalPrice"];
                this.columnsnSurveyor = base.Columns["snSurveyor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsnInputDate = new global::System.Data.DataColumn("snInputDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnInputDate);
                this.columnmkSort = new global::System.Data.DataColumn("mkSort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmkSort);
                this.columnmnName = new global::System.Data.DataColumn("mnName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmnName);
                this.columnmmModel = new global::System.Data.DataColumn("mmModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmmModel);
                this.columnpiName = new global::System.Data.DataColumn("piName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpiName);
                this.columnviNo = new global::System.Data.DataColumn("viNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnviNo);
                this.columntuName = new global::System.Data.DataColumn("tuName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntuName);
                this.columngrossWeight = new global::System.Data.DataColumn("grossWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrossWeight);
                this.columntare = new global::System.Data.DataColumn("tare", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntare);
                this.columnsnSuttle = new global::System.Data.DataColumn("snSuttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnSuttle);
                this.columnunitPrice = new global::System.Data.DataColumn("unitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunitPrice);
                this.columntotalPrice = new global::System.Data.DataColumn("totalPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalPrice);
                this.columnsnSurveyor = new global::System.Data.DataColumn("snSurveyor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnSurveyor);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StuffInAccountRow NewStuffInAccountRow() {
                return ((StuffInAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StuffInAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StuffInAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StuffInAccountRowChanged != null)) {
                    this.StuffInAccountRowChanged(this, new StuffInAccountRowChangeEvent(((StuffInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StuffInAccountRowChanging != null)) {
                    this.StuffInAccountRowChanging(this, new StuffInAccountRowChangeEvent(((StuffInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StuffInAccountRowDeleted != null)) {
                    this.StuffInAccountRowDeleted(this, new StuffInAccountRowChangeEvent(((StuffInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StuffInAccountRowDeleting != null)) {
                    this.StuffInAccountRowDeleting(this, new StuffInAccountRowChangeEvent(((StuffInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStuffInAccountRow(StuffInAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                stock ds = new stock();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StuffInAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MonthStuffStorageDataTable : global::System.Data.TypedTableBase<MonthStuffStorageRow> {
            
            private global::System.Data.DataColumn columninputDate;
            
            private global::System.Data.DataColumn columnmkSort;
            
            private global::System.Data.DataColumn columnmnName;
            
            private global::System.Data.DataColumn columnmmModel;
            
            private global::System.Data.DataColumn columnlmNumber;
            
            private global::System.Data.DataColumn columnlmPrice;
            
            private global::System.Data.DataColumn columntmInNumber;
            
            private global::System.Data.DataColumn columntmInPrice;
            
            private global::System.Data.DataColumn columntmOutNumber;
            
            private global::System.Data.DataColumn columntmOutPrice;
            
            private global::System.Data.DataColumn columntmTotalNumber;
            
            private global::System.Data.DataColumn columntmTotalPrice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthStuffStorageDataTable() {
                this.TableName = "MonthStuffStorage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonthStuffStorageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MonthStuffStorageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputDateColumn {
                get {
                    return this.columninputDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mkSortColumn {
                get {
                    return this.columnmkSort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mnNameColumn {
                get {
                    return this.columnmnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mmModelColumn {
                get {
                    return this.columnmmModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lmNumberColumn {
                get {
                    return this.columnlmNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lmPriceColumn {
                get {
                    return this.columnlmPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmInNumberColumn {
                get {
                    return this.columntmInNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmInPriceColumn {
                get {
                    return this.columntmInPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmOutNumberColumn {
                get {
                    return this.columntmOutNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmOutPriceColumn {
                get {
                    return this.columntmOutPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmTotalNumberColumn {
                get {
                    return this.columntmTotalNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmTotalPriceColumn {
                get {
                    return this.columntmTotalPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthStuffStorageRow this[int index] {
                get {
                    return ((MonthStuffStorageRow)(this.Rows[index]));
                }
            }
            
            public event MonthStuffStorageRowChangeEventHandler MonthStuffStorageRowChanging;
            
            public event MonthStuffStorageRowChangeEventHandler MonthStuffStorageRowChanged;
            
            public event MonthStuffStorageRowChangeEventHandler MonthStuffStorageRowDeleting;
            
            public event MonthStuffStorageRowChangeEventHandler MonthStuffStorageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMonthStuffStorageRow(MonthStuffStorageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthStuffStorageRow AddMonthStuffStorageRow(string inputDate, string mkSort, string mnName, string mmModel, string lmNumber, string lmPrice, string tmInNumber, string tmInPrice, string tmOutNumber, string tmOutPrice, string tmTotalNumber, string tmTotalPrice) {
                MonthStuffStorageRow rowMonthStuffStorageRow = ((MonthStuffStorageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inputDate,
                        mkSort,
                        mnName,
                        mmModel,
                        lmNumber,
                        lmPrice,
                        tmInNumber,
                        tmInPrice,
                        tmOutNumber,
                        tmOutPrice,
                        tmTotalNumber,
                        tmTotalPrice};
                rowMonthStuffStorageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMonthStuffStorageRow);
                return rowMonthStuffStorageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MonthStuffStorageDataTable cln = ((MonthStuffStorageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MonthStuffStorageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninputDate = base.Columns["inputDate"];
                this.columnmkSort = base.Columns["mkSort"];
                this.columnmnName = base.Columns["mnName"];
                this.columnmmModel = base.Columns["mmModel"];
                this.columnlmNumber = base.Columns["lmNumber"];
                this.columnlmPrice = base.Columns["lmPrice"];
                this.columntmInNumber = base.Columns["tmInNumber"];
                this.columntmInPrice = base.Columns["tmInPrice"];
                this.columntmOutNumber = base.Columns["tmOutNumber"];
                this.columntmOutPrice = base.Columns["tmOutPrice"];
                this.columntmTotalNumber = base.Columns["tmTotalNumber"];
                this.columntmTotalPrice = base.Columns["tmTotalPrice"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninputDate = new global::System.Data.DataColumn("inputDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputDate);
                this.columnmkSort = new global::System.Data.DataColumn("mkSort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmkSort);
                this.columnmnName = new global::System.Data.DataColumn("mnName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmnName);
                this.columnmmModel = new global::System.Data.DataColumn("mmModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmmModel);
                this.columnlmNumber = new global::System.Data.DataColumn("lmNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlmNumber);
                this.columnlmPrice = new global::System.Data.DataColumn("lmPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlmPrice);
                this.columntmInNumber = new global::System.Data.DataColumn("tmInNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntmInNumber);
                this.columntmInPrice = new global::System.Data.DataColumn("tmInPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntmInPrice);
                this.columntmOutNumber = new global::System.Data.DataColumn("tmOutNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntmOutNumber);
                this.columntmOutPrice = new global::System.Data.DataColumn("tmOutPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntmOutPrice);
                this.columntmTotalNumber = new global::System.Data.DataColumn("tmTotalNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntmTotalNumber);
                this.columntmTotalPrice = new global::System.Data.DataColumn("tmTotalPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntmTotalPrice);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthStuffStorageRow NewMonthStuffStorageRow() {
                return ((MonthStuffStorageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MonthStuffStorageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MonthStuffStorageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MonthStuffStorageRowChanged != null)) {
                    this.MonthStuffStorageRowChanged(this, new MonthStuffStorageRowChangeEvent(((MonthStuffStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MonthStuffStorageRowChanging != null)) {
                    this.MonthStuffStorageRowChanging(this, new MonthStuffStorageRowChangeEvent(((MonthStuffStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MonthStuffStorageRowDeleted != null)) {
                    this.MonthStuffStorageRowDeleted(this, new MonthStuffStorageRowChangeEvent(((MonthStuffStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MonthStuffStorageRowDeleting != null)) {
                    this.MonthStuffStorageRowDeleting(this, new MonthStuffStorageRowChangeEvent(((MonthStuffStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMonthStuffStorageRow(MonthStuffStorageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                stock ds = new stock();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MonthStuffStorageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductInAccountDataTable : global::System.Data.TypedTableBase<ProductInAccountRow> {
            
            private global::System.Data.DataColumn column生产日期;
            
            private global::System.Data.DataColumn column产品种类;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column产品规格;
            
            private global::System.Data.DataColumn column入库数量;
            
            private global::System.Data.DataColumn column入库单价;
            
            private global::System.Data.DataColumn column入库金额;
            
            private global::System.Data.DataColumn column设备名称;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductInAccountDataTable() {
                this.TableName = "ProductInAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductInAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductInAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 生产日期Column {
                get {
                    return this.column生产日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品种类Column {
                get {
                    return this.column产品种类;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品规格Column {
                get {
                    return this.column产品规格;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库数量Column {
                get {
                    return this.column入库数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库单价Column {
                get {
                    return this.column入库单价;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库金额Column {
                get {
                    return this.column入库金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductInAccountRow this[int index] {
                get {
                    return ((ProductInAccountRow)(this.Rows[index]));
                }
            }
            
            public event ProductInAccountRowChangeEventHandler ProductInAccountRowChanging;
            
            public event ProductInAccountRowChangeEventHandler ProductInAccountRowChanged;
            
            public event ProductInAccountRowChangeEventHandler ProductInAccountRowDeleting;
            
            public event ProductInAccountRowChangeEventHandler ProductInAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductInAccountRow(ProductInAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductInAccountRow AddProductInAccountRow(string 生产日期, string 产品种类, string 产品名称, string 产品规格, string 入库数量, string 入库单价, string 入库金额, string 设备名称) {
                ProductInAccountRow rowProductInAccountRow = ((ProductInAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        生产日期,
                        产品种类,
                        产品名称,
                        产品规格,
                        入库数量,
                        入库单价,
                        入库金额,
                        设备名称};
                rowProductInAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProductInAccountRow);
                return rowProductInAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProductInAccountDataTable cln = ((ProductInAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProductInAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column生产日期 = base.Columns["生产日期"];
                this.column产品种类 = base.Columns["产品种类"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column产品规格 = base.Columns["产品规格"];
                this.column入库数量 = base.Columns["入库数量"];
                this.column入库单价 = base.Columns["入库单价"];
                this.column入库金额 = base.Columns["入库金额"];
                this.column设备名称 = base.Columns["设备名称"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column生产日期 = new global::System.Data.DataColumn("生产日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column生产日期);
                this.column产品种类 = new global::System.Data.DataColumn("产品种类", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品种类);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column产品规格 = new global::System.Data.DataColumn("产品规格", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品规格);
                this.column入库数量 = new global::System.Data.DataColumn("入库数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库数量);
                this.column入库单价 = new global::System.Data.DataColumn("入库单价", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库单价);
                this.column入库金额 = new global::System.Data.DataColumn("入库金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库金额);
                this.column设备名称 = new global::System.Data.DataColumn("设备名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column设备名称);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductInAccountRow NewProductInAccountRow() {
                return ((ProductInAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProductInAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProductInAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductInAccountRowChanged != null)) {
                    this.ProductInAccountRowChanged(this, new ProductInAccountRowChangeEvent(((ProductInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductInAccountRowChanging != null)) {
                    this.ProductInAccountRowChanging(this, new ProductInAccountRowChangeEvent(((ProductInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductInAccountRowDeleted != null)) {
                    this.ProductInAccountRowDeleted(this, new ProductInAccountRowChangeEvent(((ProductInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductInAccountRowDeleting != null)) {
                    this.ProductInAccountRowDeleting(this, new ProductInAccountRowChangeEvent(((ProductInAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductInAccountRow(ProductInAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                stock ds = new stock();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductInAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductOutAccountDataTable : global::System.Data.TypedTableBase<ProductOutAccountRow> {
            
            private global::System.Data.DataColumn column时间;
            
            private global::System.Data.DataColumn column产品种类;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column产品型号;
            
            private global::System.Data.DataColumn column客户名称;
            
            private global::System.Data.DataColumn column车牌号;
            
            private global::System.Data.DataColumn column运输单位;
            
            private global::System.Data.DataColumn column净重;
            
            private global::System.Data.DataColumn column销售单价;
            
            private global::System.Data.DataColumn column销售金额;
            
            private global::System.Data.DataColumn column检斤员;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductOutAccountDataTable() {
                this.TableName = "ProductOutAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductOutAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductOutAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 时间Column {
                get {
                    return this.column时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品种类Column {
                get {
                    return this.column产品种类;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品型号Column {
                get {
                    return this.column产品型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 客户名称Column {
                get {
                    return this.column客户名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车牌号Column {
                get {
                    return this.column车牌号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 运输单位Column {
                get {
                    return this.column运输单位;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 净重Column {
                get {
                    return this.column净重;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 销售单价Column {
                get {
                    return this.column销售单价;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 销售金额Column {
                get {
                    return this.column销售金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检斤员Column {
                get {
                    return this.column检斤员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductOutAccountRow this[int index] {
                get {
                    return ((ProductOutAccountRow)(this.Rows[index]));
                }
            }
            
            public event ProductOutAccountRowChangeEventHandler ProductOutAccountRowChanging;
            
            public event ProductOutAccountRowChangeEventHandler ProductOutAccountRowChanged;
            
            public event ProductOutAccountRowChangeEventHandler ProductOutAccountRowDeleting;
            
            public event ProductOutAccountRowChangeEventHandler ProductOutAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductOutAccountRow(ProductOutAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductOutAccountRow AddProductOutAccountRow(string 时间, string 产品种类, string 产品名称, string 产品型号, string 客户名称, string 车牌号, string 运输单位, string 净重, string 销售单价, string 销售金额, string 检斤员) {
                ProductOutAccountRow rowProductOutAccountRow = ((ProductOutAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        时间,
                        产品种类,
                        产品名称,
                        产品型号,
                        客户名称,
                        车牌号,
                        运输单位,
                        净重,
                        销售单价,
                        销售金额,
                        检斤员};
                rowProductOutAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProductOutAccountRow);
                return rowProductOutAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProductOutAccountDataTable cln = ((ProductOutAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProductOutAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column时间 = base.Columns["时间"];
                this.column产品种类 = base.Columns["产品种类"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column产品型号 = base.Columns["产品型号"];
                this.column客户名称 = base.Columns["客户名称"];
                this.column车牌号 = base.Columns["车牌号"];
                this.column运输单位 = base.Columns["运输单位"];
                this.column净重 = base.Columns["净重"];
                this.column销售单价 = base.Columns["销售单价"];
                this.column销售金额 = base.Columns["销售金额"];
                this.column检斤员 = base.Columns["检斤员"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column时间 = new global::System.Data.DataColumn("时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column时间);
                this.column产品种类 = new global::System.Data.DataColumn("产品种类", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品种类);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column产品型号 = new global::System.Data.DataColumn("产品型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品型号);
                this.column客户名称 = new global::System.Data.DataColumn("客户名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column客户名称);
                this.column车牌号 = new global::System.Data.DataColumn("车牌号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车牌号);
                this.column运输单位 = new global::System.Data.DataColumn("运输单位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column运输单位);
                this.column净重 = new global::System.Data.DataColumn("净重", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column净重);
                this.column销售单价 = new global::System.Data.DataColumn("销售单价", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column销售单价);
                this.column销售金额 = new global::System.Data.DataColumn("销售金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column销售金额);
                this.column检斤员 = new global::System.Data.DataColumn("检斤员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检斤员);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductOutAccountRow NewProductOutAccountRow() {
                return ((ProductOutAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProductOutAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProductOutAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductOutAccountRowChanged != null)) {
                    this.ProductOutAccountRowChanged(this, new ProductOutAccountRowChangeEvent(((ProductOutAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductOutAccountRowChanging != null)) {
                    this.ProductOutAccountRowChanging(this, new ProductOutAccountRowChangeEvent(((ProductOutAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductOutAccountRowDeleted != null)) {
                    this.ProductOutAccountRowDeleted(this, new ProductOutAccountRowChangeEvent(((ProductOutAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductOutAccountRowDeleting != null)) {
                    this.ProductOutAccountRowDeleting(this, new ProductOutAccountRowChangeEvent(((ProductOutAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductOutAccountRow(ProductOutAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                stock ds = new stock();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductOutAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MonthProductStorageDataTable : global::System.Data.TypedTableBase<MonthProductStorageRow> {
            
            private global::System.Data.DataColumn column年月;
            
            private global::System.Data.DataColumn column产品种类;
            
            private global::System.Data.DataColumn column产品名称;
            
            private global::System.Data.DataColumn column规格型号;
            
            private global::System.Data.DataColumn column上月结存数量;
            
            private global::System.Data.DataColumn column上月结存金额;
            
            private global::System.Data.DataColumn column本月入库数量;
            
            private global::System.Data.DataColumn column本月入库金额;
            
            private global::System.Data.DataColumn column本月出库数量;
            
            private global::System.Data.DataColumn column本月出库金额;
            
            private global::System.Data.DataColumn column月底结存数量;
            
            private global::System.Data.DataColumn column月底结存金额;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthProductStorageDataTable() {
                this.TableName = "MonthProductStorage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonthProductStorageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MonthProductStorageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年月Column {
                get {
                    return this.column年月;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品种类Column {
                get {
                    return this.column产品种类;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品名称Column {
                get {
                    return this.column产品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格型号Column {
                get {
                    return this.column规格型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 上月结存数量Column {
                get {
                    return this.column上月结存数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 上月结存金额Column {
                get {
                    return this.column上月结存金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 本月入库数量Column {
                get {
                    return this.column本月入库数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 本月入库金额Column {
                get {
                    return this.column本月入库金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 本月出库数量Column {
                get {
                    return this.column本月出库数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 本月出库金额Column {
                get {
                    return this.column本月出库金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 月底结存数量Column {
                get {
                    return this.column月底结存数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 月底结存金额Column {
                get {
                    return this.column月底结存金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthProductStorageRow this[int index] {
                get {
                    return ((MonthProductStorageRow)(this.Rows[index]));
                }
            }
            
            public event MonthProductStorageRowChangeEventHandler MonthProductStorageRowChanging;
            
            public event MonthProductStorageRowChangeEventHandler MonthProductStorageRowChanged;
            
            public event MonthProductStorageRowChangeEventHandler MonthProductStorageRowDeleting;
            
            public event MonthProductStorageRowChangeEventHandler MonthProductStorageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMonthProductStorageRow(MonthProductStorageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthProductStorageRow AddMonthProductStorageRow(string 年月, string 产品种类, string 产品名称, string 规格型号, string 上月结存数量, string 上月结存金额, string 本月入库数量, string 本月入库金额, string 本月出库数量, string 本月出库金额, string 月底结存数量, string 月底结存金额) {
                MonthProductStorageRow rowMonthProductStorageRow = ((MonthProductStorageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        年月,
                        产品种类,
                        产品名称,
                        规格型号,
                        上月结存数量,
                        上月结存金额,
                        本月入库数量,
                        本月入库金额,
                        本月出库数量,
                        本月出库金额,
                        月底结存数量,
                        月底结存金额};
                rowMonthProductStorageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMonthProductStorageRow);
                return rowMonthProductStorageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MonthProductStorageDataTable cln = ((MonthProductStorageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MonthProductStorageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column年月 = base.Columns["年月"];
                this.column产品种类 = base.Columns["产品种类"];
                this.column产品名称 = base.Columns["产品名称"];
                this.column规格型号 = base.Columns["规格型号"];
                this.column上月结存数量 = base.Columns["上月结存数量"];
                this.column上月结存金额 = base.Columns["上月结存金额"];
                this.column本月入库数量 = base.Columns["本月入库数量"];
                this.column本月入库金额 = base.Columns["本月入库金额"];
                this.column本月出库数量 = base.Columns["本月出库数量"];
                this.column本月出库金额 = base.Columns["本月出库金额"];
                this.column月底结存数量 = base.Columns["月底结存数量"];
                this.column月底结存金额 = base.Columns["月底结存金额"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column年月 = new global::System.Data.DataColumn("年月", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年月);
                this.column产品种类 = new global::System.Data.DataColumn("产品种类", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品种类);
                this.column产品名称 = new global::System.Data.DataColumn("产品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品名称);
                this.column规格型号 = new global::System.Data.DataColumn("规格型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格型号);
                this.column上月结存数量 = new global::System.Data.DataColumn("上月结存数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column上月结存数量);
                this.column上月结存金额 = new global::System.Data.DataColumn("上月结存金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column上月结存金额);
                this.column本月入库数量 = new global::System.Data.DataColumn("本月入库数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column本月入库数量);
                this.column本月入库金额 = new global::System.Data.DataColumn("本月入库金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column本月入库金额);
                this.column本月出库数量 = new global::System.Data.DataColumn("本月出库数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column本月出库数量);
                this.column本月出库金额 = new global::System.Data.DataColumn("本月出库金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column本月出库金额);
                this.column月底结存数量 = new global::System.Data.DataColumn("月底结存数量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column月底结存数量);
                this.column月底结存金额 = new global::System.Data.DataColumn("月底结存金额", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column月底结存金额);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthProductStorageRow NewMonthProductStorageRow() {
                return ((MonthProductStorageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MonthProductStorageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MonthProductStorageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MonthProductStorageRowChanged != null)) {
                    this.MonthProductStorageRowChanged(this, new MonthProductStorageRowChangeEvent(((MonthProductStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MonthProductStorageRowChanging != null)) {
                    this.MonthProductStorageRowChanging(this, new MonthProductStorageRowChangeEvent(((MonthProductStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MonthProductStorageRowDeleted != null)) {
                    this.MonthProductStorageRowDeleted(this, new MonthProductStorageRowChangeEvent(((MonthProductStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MonthProductStorageRowDeleting != null)) {
                    this.MonthProductStorageRowDeleting(this, new MonthProductStorageRowChangeEvent(((MonthProductStorageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMonthProductStorageRow(MonthProductStorageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                stock ds = new stock();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MonthProductStorageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StuffInAccountRow : global::System.Data.DataRow {
            
            private StuffInAccountDataTable tableStuffInAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StuffInAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStuffInAccount = ((StuffInAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long id {
                get {
                    try {
                        return ((long)(this[this.tableStuffInAccount.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime snInputDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStuffInAccount.snInputDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“snInputDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.snInputDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mkSort {
                get {
                    try {
                        return ((string)(this[this.tableStuffInAccount.mkSortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“mkSort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.mkSortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mnName {
                get {
                    try {
                        return ((string)(this[this.tableStuffInAccount.mnNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“mnName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.mnNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mmModel {
                get {
                    try {
                        return ((string)(this[this.tableStuffInAccount.mmModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“mmModel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.mmModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string piName {
                get {
                    try {
                        return ((string)(this[this.tableStuffInAccount.piNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“piName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.piNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string viNo {
                get {
                    try {
                        return ((string)(this[this.tableStuffInAccount.viNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“viNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.viNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tuName {
                get {
                    try {
                        return ((string)(this[this.tableStuffInAccount.tuNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“tuName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.tuNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal grossWeight {
                get {
                    try {
                        return ((decimal)(this[this.tableStuffInAccount.grossWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“grossWeight”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.grossWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal tare {
                get {
                    try {
                        return ((decimal)(this[this.tableStuffInAccount.tareColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“tare”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.tareColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal snSuttle {
                get {
                    try {
                        return ((decimal)(this[this.tableStuffInAccount.snSuttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“snSuttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.snSuttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal unitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableStuffInAccount.unitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“unitPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.unitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableStuffInAccount.totalPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“totalPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.totalPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string snSurveyor {
                get {
                    try {
                        return ((string)(this[this.tableStuffInAccount.snSurveyorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StuffInAccount”中列“snSurveyor”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStuffInAccount.snSurveyorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableStuffInAccount.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableStuffInAccount.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnInputDateNull() {
                return this.IsNull(this.tableStuffInAccount.snInputDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnInputDateNull() {
                this[this.tableStuffInAccount.snInputDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmkSortNull() {
                return this.IsNull(this.tableStuffInAccount.mkSortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmkSortNull() {
                this[this.tableStuffInAccount.mkSortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmnNameNull() {
                return this.IsNull(this.tableStuffInAccount.mnNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmnNameNull() {
                this[this.tableStuffInAccount.mnNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmmModelNull() {
                return this.IsNull(this.tableStuffInAccount.mmModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmmModelNull() {
                this[this.tableStuffInAccount.mmModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspiNameNull() {
                return this.IsNull(this.tableStuffInAccount.piNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpiNameNull() {
                this[this.tableStuffInAccount.piNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsviNoNull() {
                return this.IsNull(this.tableStuffInAccount.viNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetviNoNull() {
                this[this.tableStuffInAccount.viNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstuNameNull() {
                return this.IsNull(this.tableStuffInAccount.tuNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettuNameNull() {
                this[this.tableStuffInAccount.tuNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrossWeightNull() {
                return this.IsNull(this.tableStuffInAccount.grossWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrossWeightNull() {
                this[this.tableStuffInAccount.grossWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstareNull() {
                return this.IsNull(this.tableStuffInAccount.tareColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettareNull() {
                this[this.tableStuffInAccount.tareColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnSuttleNull() {
                return this.IsNull(this.tableStuffInAccount.snSuttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnSuttleNull() {
                this[this.tableStuffInAccount.snSuttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitPriceNull() {
                return this.IsNull(this.tableStuffInAccount.unitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitPriceNull() {
                this[this.tableStuffInAccount.unitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalPriceNull() {
                return this.IsNull(this.tableStuffInAccount.totalPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalPriceNull() {
                this[this.tableStuffInAccount.totalPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnSurveyorNull() {
                return this.IsNull(this.tableStuffInAccount.snSurveyorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnSurveyorNull() {
                this[this.tableStuffInAccount.snSurveyorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MonthStuffStorageRow : global::System.Data.DataRow {
            
            private MonthStuffStorageDataTable tableMonthStuffStorage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonthStuffStorageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMonthStuffStorage = ((MonthStuffStorageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inputDate {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.inputDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“inputDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.inputDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mkSort {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.mkSortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“mkSort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.mkSortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mnName {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.mnNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“mnName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.mnNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mmModel {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.mmModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“mmModel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.mmModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lmNumber {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.lmNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“lmNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.lmNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lmPrice {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.lmPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“lmPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.lmPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tmInNumber {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.tmInNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“tmInNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.tmInNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tmInPrice {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.tmInPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“tmInPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.tmInPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tmOutNumber {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.tmOutNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“tmOutNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.tmOutNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tmOutPrice {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.tmOutPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“tmOutPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.tmOutPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tmTotalNumber {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.tmTotalNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“tmTotalNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.tmTotalNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tmTotalPrice {
                get {
                    try {
                        return ((string)(this[this.tableMonthStuffStorage.tmTotalPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthStuffStorage”中列“tmTotalPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthStuffStorage.tmTotalPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputDateNull() {
                return this.IsNull(this.tableMonthStuffStorage.inputDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputDateNull() {
                this[this.tableMonthStuffStorage.inputDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmkSortNull() {
                return this.IsNull(this.tableMonthStuffStorage.mkSortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmkSortNull() {
                this[this.tableMonthStuffStorage.mkSortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmnNameNull() {
                return this.IsNull(this.tableMonthStuffStorage.mnNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmnNameNull() {
                this[this.tableMonthStuffStorage.mnNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmmModelNull() {
                return this.IsNull(this.tableMonthStuffStorage.mmModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmmModelNull() {
                this[this.tableMonthStuffStorage.mmModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslmNumberNull() {
                return this.IsNull(this.tableMonthStuffStorage.lmNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlmNumberNull() {
                this[this.tableMonthStuffStorage.lmNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslmPriceNull() {
                return this.IsNull(this.tableMonthStuffStorage.lmPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlmPriceNull() {
                this[this.tableMonthStuffStorage.lmPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstmInNumberNull() {
                return this.IsNull(this.tableMonthStuffStorage.tmInNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettmInNumberNull() {
                this[this.tableMonthStuffStorage.tmInNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstmInPriceNull() {
                return this.IsNull(this.tableMonthStuffStorage.tmInPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettmInPriceNull() {
                this[this.tableMonthStuffStorage.tmInPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstmOutNumberNull() {
                return this.IsNull(this.tableMonthStuffStorage.tmOutNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettmOutNumberNull() {
                this[this.tableMonthStuffStorage.tmOutNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstmOutPriceNull() {
                return this.IsNull(this.tableMonthStuffStorage.tmOutPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettmOutPriceNull() {
                this[this.tableMonthStuffStorage.tmOutPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstmTotalNumberNull() {
                return this.IsNull(this.tableMonthStuffStorage.tmTotalNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettmTotalNumberNull() {
                this[this.tableMonthStuffStorage.tmTotalNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstmTotalPriceNull() {
                return this.IsNull(this.tableMonthStuffStorage.tmTotalPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettmTotalPriceNull() {
                this[this.tableMonthStuffStorage.tmTotalPriceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductInAccountRow : global::System.Data.DataRow {
            
            private ProductInAccountDataTable tableProductInAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductInAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductInAccount = ((ProductInAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 生产日期 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.生产日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“生产日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.生产日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品种类 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.产品种类Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“产品种类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.产品种类Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品规格 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.产品规格Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“产品规格”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.产品规格Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 入库数量 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.入库数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“入库数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.入库数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 入库单价 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.入库单价Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“入库单价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.入库单价Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 入库金额 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.入库金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“入库金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.入库金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.tableProductInAccount.设备名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductInAccount”中列“设备名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductInAccount.设备名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is生产日期Null() {
                return this.IsNull(this.tableProductInAccount.生产日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set生产日期Null() {
                this[this.tableProductInAccount.生产日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品种类Null() {
                return this.IsNull(this.tableProductInAccount.产品种类Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品种类Null() {
                this[this.tableProductInAccount.产品种类Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.tableProductInAccount.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.tableProductInAccount.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品规格Null() {
                return this.IsNull(this.tableProductInAccount.产品规格Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品规格Null() {
                this[this.tableProductInAccount.产品规格Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库数量Null() {
                return this.IsNull(this.tableProductInAccount.入库数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库数量Null() {
                this[this.tableProductInAccount.入库数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库单价Null() {
                return this.IsNull(this.tableProductInAccount.入库单价Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库单价Null() {
                this[this.tableProductInAccount.入库单价Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库金额Null() {
                return this.IsNull(this.tableProductInAccount.入库金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库金额Null() {
                this[this.tableProductInAccount.入库金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is设备名称Null() {
                return this.IsNull(this.tableProductInAccount.设备名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set设备名称Null() {
                this[this.tableProductInAccount.设备名称Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductOutAccountRow : global::System.Data.DataRow {
            
            private ProductOutAccountDataTable tableProductOutAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductOutAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductOutAccount = ((ProductOutAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 时间 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品种类 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.产品种类Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“产品种类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.产品种类Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品型号 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.产品型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“产品型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.产品型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 客户名称 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.客户名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“客户名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.客户名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车牌号 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.车牌号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“车牌号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.车牌号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 运输单位 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.运输单位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“运输单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.运输单位Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 净重 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.净重Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“净重”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.净重Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 销售单价 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.销售单价Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“销售单价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.销售单价Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 销售金额 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.销售金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“销售金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.销售金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 检斤员 {
                get {
                    try {
                        return ((string)(this[this.tableProductOutAccount.检斤员Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductOutAccount”中列“检斤员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductOutAccount.检斤员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is时间Null() {
                return this.IsNull(this.tableProductOutAccount.时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set时间Null() {
                this[this.tableProductOutAccount.时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品种类Null() {
                return this.IsNull(this.tableProductOutAccount.产品种类Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品种类Null() {
                this[this.tableProductOutAccount.产品种类Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.tableProductOutAccount.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.tableProductOutAccount.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品型号Null() {
                return this.IsNull(this.tableProductOutAccount.产品型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品型号Null() {
                this[this.tableProductOutAccount.产品型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is客户名称Null() {
                return this.IsNull(this.tableProductOutAccount.客户名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set客户名称Null() {
                this[this.tableProductOutAccount.客户名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车牌号Null() {
                return this.IsNull(this.tableProductOutAccount.车牌号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车牌号Null() {
                this[this.tableProductOutAccount.车牌号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is运输单位Null() {
                return this.IsNull(this.tableProductOutAccount.运输单位Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set运输单位Null() {
                this[this.tableProductOutAccount.运输单位Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is净重Null() {
                return this.IsNull(this.tableProductOutAccount.净重Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set净重Null() {
                this[this.tableProductOutAccount.净重Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is销售单价Null() {
                return this.IsNull(this.tableProductOutAccount.销售单价Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set销售单价Null() {
                this[this.tableProductOutAccount.销售单价Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is销售金额Null() {
                return this.IsNull(this.tableProductOutAccount.销售金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set销售金额Null() {
                this[this.tableProductOutAccount.销售金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检斤员Null() {
                return this.IsNull(this.tableProductOutAccount.检斤员Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检斤员Null() {
                this[this.tableProductOutAccount.检斤员Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MonthProductStorageRow : global::System.Data.DataRow {
            
            private MonthProductStorageDataTable tableMonthProductStorage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MonthProductStorageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMonthProductStorage = ((MonthProductStorageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 年月 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.年月Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“年月”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.年月Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品种类 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.产品种类Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“产品种类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.产品种类Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品名称 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.产品名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“产品名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.产品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格型号 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.规格型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“规格型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.规格型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 上月结存数量 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.上月结存数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“上月结存数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.上月结存数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 上月结存金额 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.上月结存金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“上月结存金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.上月结存金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 本月入库数量 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.本月入库数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“本月入库数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.本月入库数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 本月入库金额 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.本月入库金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“本月入库金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.本月入库金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 本月出库数量 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.本月出库数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“本月出库数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.本月出库数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 本月出库金额 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.本月出库金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“本月出库金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.本月出库金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 月底结存数量 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.月底结存数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“月底结存数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.月底结存数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 月底结存金额 {
                get {
                    try {
                        return ((string)(this[this.tableMonthProductStorage.月底结存金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MonthProductStorage”中列“月底结存金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMonthProductStorage.月底结存金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年月Null() {
                return this.IsNull(this.tableMonthProductStorage.年月Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年月Null() {
                this[this.tableMonthProductStorage.年月Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品种类Null() {
                return this.IsNull(this.tableMonthProductStorage.产品种类Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品种类Null() {
                this[this.tableMonthProductStorage.产品种类Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is产品名称Null() {
                return this.IsNull(this.tableMonthProductStorage.产品名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set产品名称Null() {
                this[this.tableMonthProductStorage.产品名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格型号Null() {
                return this.IsNull(this.tableMonthProductStorage.规格型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格型号Null() {
                this[this.tableMonthProductStorage.规格型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is上月结存数量Null() {
                return this.IsNull(this.tableMonthProductStorage.上月结存数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set上月结存数量Null() {
                this[this.tableMonthProductStorage.上月结存数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is上月结存金额Null() {
                return this.IsNull(this.tableMonthProductStorage.上月结存金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set上月结存金额Null() {
                this[this.tableMonthProductStorage.上月结存金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is本月入库数量Null() {
                return this.IsNull(this.tableMonthProductStorage.本月入库数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set本月入库数量Null() {
                this[this.tableMonthProductStorage.本月入库数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is本月入库金额Null() {
                return this.IsNull(this.tableMonthProductStorage.本月入库金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set本月入库金额Null() {
                this[this.tableMonthProductStorage.本月入库金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is本月出库数量Null() {
                return this.IsNull(this.tableMonthProductStorage.本月出库数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set本月出库数量Null() {
                this[this.tableMonthProductStorage.本月出库数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is本月出库金额Null() {
                return this.IsNull(this.tableMonthProductStorage.本月出库金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set本月出库金额Null() {
                this[this.tableMonthProductStorage.本月出库金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is月底结存数量Null() {
                return this.IsNull(this.tableMonthProductStorage.月底结存数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set月底结存数量Null() {
                this[this.tableMonthProductStorage.月底结存数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is月底结存金额Null() {
                return this.IsNull(this.tableMonthProductStorage.月底结存金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set月底结存金额Null() {
                this[this.tableMonthProductStorage.月底结存金额Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StuffInAccountRowChangeEvent : global::System.EventArgs {
            
            private StuffInAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StuffInAccountRowChangeEvent(StuffInAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StuffInAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MonthStuffStorageRowChangeEvent : global::System.EventArgs {
            
            private MonthStuffStorageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthStuffStorageRowChangeEvent(MonthStuffStorageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthStuffStorageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductInAccountRowChangeEvent : global::System.EventArgs {
            
            private ProductInAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductInAccountRowChangeEvent(ProductInAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductInAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductOutAccountRowChangeEvent : global::System.EventArgs {
            
            private ProductOutAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductOutAccountRowChangeEvent(ProductOutAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductOutAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MonthProductStorageRowChangeEvent : global::System.EventArgs {
            
            private MonthProductStorageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthProductStorageRowChangeEvent(MonthProductStorageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MonthProductStorageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591