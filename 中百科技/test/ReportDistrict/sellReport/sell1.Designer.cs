//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DasherStation.ReportDistrict.sellReport {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("sell")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class sell : global::System.Data.DataSet {
        
        private YearSellPlanDataTable tableYearSellPlan;
        
        private ProductSellClearingDataTable tableProductSellClearing;
        
        private ClearBillDetailDataTable tableClearBillDetail;
        
        private SellOutByProductDataTable tableSellOutByProduct;
        
        private SellOutByClientDataTable tableSellOutByClient;
        
        private SellOutByProjectDataTable tableSellOutByProject;
        
        private SellOutByTransportDataTable tableSellOutByTransport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sell() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected sell(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["YearSellPlan"] != null)) {
                    base.Tables.Add(new YearSellPlanDataTable(ds.Tables["YearSellPlan"]));
                }
                if ((ds.Tables["ProductSellClearing"] != null)) {
                    base.Tables.Add(new ProductSellClearingDataTable(ds.Tables["ProductSellClearing"]));
                }
                if ((ds.Tables["ClearBillDetail"] != null)) {
                    base.Tables.Add(new ClearBillDetailDataTable(ds.Tables["ClearBillDetail"]));
                }
                if ((ds.Tables["SellOutByProduct"] != null)) {
                    base.Tables.Add(new SellOutByProductDataTable(ds.Tables["SellOutByProduct"]));
                }
                if ((ds.Tables["SellOutByClient"] != null)) {
                    base.Tables.Add(new SellOutByClientDataTable(ds.Tables["SellOutByClient"]));
                }
                if ((ds.Tables["SellOutByProject"] != null)) {
                    base.Tables.Add(new SellOutByProjectDataTable(ds.Tables["SellOutByProject"]));
                }
                if ((ds.Tables["SellOutByTransport"] != null)) {
                    base.Tables.Add(new SellOutByTransportDataTable(ds.Tables["SellOutByTransport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YearSellPlanDataTable YearSellPlan {
            get {
                return this.tableYearSellPlan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductSellClearingDataTable ProductSellClearing {
            get {
                return this.tableProductSellClearing;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClearBillDetailDataTable ClearBillDetail {
            get {
                return this.tableClearBillDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SellOutByProductDataTable SellOutByProduct {
            get {
                return this.tableSellOutByProduct;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SellOutByClientDataTable SellOutByClient {
            get {
                return this.tableSellOutByClient;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SellOutByProjectDataTable SellOutByProject {
            get {
                return this.tableSellOutByProject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SellOutByTransportDataTable SellOutByTransport {
            get {
                return this.tableSellOutByTransport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            sell cln = ((sell)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["YearSellPlan"] != null)) {
                    base.Tables.Add(new YearSellPlanDataTable(ds.Tables["YearSellPlan"]));
                }
                if ((ds.Tables["ProductSellClearing"] != null)) {
                    base.Tables.Add(new ProductSellClearingDataTable(ds.Tables["ProductSellClearing"]));
                }
                if ((ds.Tables["ClearBillDetail"] != null)) {
                    base.Tables.Add(new ClearBillDetailDataTable(ds.Tables["ClearBillDetail"]));
                }
                if ((ds.Tables["SellOutByProduct"] != null)) {
                    base.Tables.Add(new SellOutByProductDataTable(ds.Tables["SellOutByProduct"]));
                }
                if ((ds.Tables["SellOutByClient"] != null)) {
                    base.Tables.Add(new SellOutByClientDataTable(ds.Tables["SellOutByClient"]));
                }
                if ((ds.Tables["SellOutByProject"] != null)) {
                    base.Tables.Add(new SellOutByProjectDataTable(ds.Tables["SellOutByProject"]));
                }
                if ((ds.Tables["SellOutByTransport"] != null)) {
                    base.Tables.Add(new SellOutByTransportDataTable(ds.Tables["SellOutByTransport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableYearSellPlan = ((YearSellPlanDataTable)(base.Tables["YearSellPlan"]));
            if ((initTable == true)) {
                if ((this.tableYearSellPlan != null)) {
                    this.tableYearSellPlan.InitVars();
                }
            }
            this.tableProductSellClearing = ((ProductSellClearingDataTable)(base.Tables["ProductSellClearing"]));
            if ((initTable == true)) {
                if ((this.tableProductSellClearing != null)) {
                    this.tableProductSellClearing.InitVars();
                }
            }
            this.tableClearBillDetail = ((ClearBillDetailDataTable)(base.Tables["ClearBillDetail"]));
            if ((initTable == true)) {
                if ((this.tableClearBillDetail != null)) {
                    this.tableClearBillDetail.InitVars();
                }
            }
            this.tableSellOutByProduct = ((SellOutByProductDataTable)(base.Tables["SellOutByProduct"]));
            if ((initTable == true)) {
                if ((this.tableSellOutByProduct != null)) {
                    this.tableSellOutByProduct.InitVars();
                }
            }
            this.tableSellOutByClient = ((SellOutByClientDataTable)(base.Tables["SellOutByClient"]));
            if ((initTable == true)) {
                if ((this.tableSellOutByClient != null)) {
                    this.tableSellOutByClient.InitVars();
                }
            }
            this.tableSellOutByProject = ((SellOutByProjectDataTable)(base.Tables["SellOutByProject"]));
            if ((initTable == true)) {
                if ((this.tableSellOutByProject != null)) {
                    this.tableSellOutByProject.InitVars();
                }
            }
            this.tableSellOutByTransport = ((SellOutByTransportDataTable)(base.Tables["SellOutByTransport"]));
            if ((initTable == true)) {
                if ((this.tableSellOutByTransport != null)) {
                    this.tableSellOutByTransport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "sell";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/sell.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableYearSellPlan = new YearSellPlanDataTable();
            base.Tables.Add(this.tableYearSellPlan);
            this.tableProductSellClearing = new ProductSellClearingDataTable();
            base.Tables.Add(this.tableProductSellClearing);
            this.tableClearBillDetail = new ClearBillDetailDataTable();
            base.Tables.Add(this.tableClearBillDetail);
            this.tableSellOutByProduct = new SellOutByProductDataTable();
            base.Tables.Add(this.tableSellOutByProduct);
            this.tableSellOutByClient = new SellOutByClientDataTable();
            base.Tables.Add(this.tableSellOutByClient);
            this.tableSellOutByProject = new SellOutByProjectDataTable();
            base.Tables.Add(this.tableSellOutByProject);
            this.tableSellOutByTransport = new SellOutByTransportDataTable();
            base.Tables.Add(this.tableSellOutByTransport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeYearSellPlan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductSellClearing() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClearBillDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSellOutByProduct() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSellOutByClient() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSellOutByProject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSellOutByTransport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            sell ds = new sell();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void YearSellPlanRowChangeEventHandler(object sender, YearSellPlanRowChangeEvent e);
        
        public delegate void ProductSellClearingRowChangeEventHandler(object sender, ProductSellClearingRowChangeEvent e);
        
        public delegate void ClearBillDetailRowChangeEventHandler(object sender, ClearBillDetailRowChangeEvent e);
        
        public delegate void SellOutByProductRowChangeEventHandler(object sender, SellOutByProductRowChangeEvent e);
        
        public delegate void SellOutByClientRowChangeEventHandler(object sender, SellOutByClientRowChangeEvent e);
        
        public delegate void SellOutByProjectRowChangeEventHandler(object sender, SellOutByProjectRowChangeEvent e);
        
        public delegate void SellOutByTransportRowChangeEventHandler(object sender, SellOutByTransportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class YearSellPlanDataTable : global::System.Data.TypedTableBase<YearSellPlanRow> {
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnquantity;
            
            private global::System.Data.DataColumn columnjanuary;
            
            private global::System.Data.DataColumn columnfebruary;
            
            private global::System.Data.DataColumn columnmarch;
            
            private global::System.Data.DataColumn columnapril;
            
            private global::System.Data.DataColumn columnmay;
            
            private global::System.Data.DataColumn columnjune;
            
            private global::System.Data.DataColumn columnjuly;
            
            private global::System.Data.DataColumn columnaugust;
            
            private global::System.Data.DataColumn columnseptember;
            
            private global::System.Data.DataColumn columnoctober;
            
            private global::System.Data.DataColumn columnnovember;
            
            private global::System.Data.DataColumn columndecember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearSellPlanDataTable() {
                this.TableName = "YearSellPlan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal YearSellPlanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected YearSellPlanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantityColumn {
                get {
                    return this.columnquantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn januaryColumn {
                get {
                    return this.columnjanuary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn februaryColumn {
                get {
                    return this.columnfebruary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn marchColumn {
                get {
                    return this.columnmarch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn aprilColumn {
                get {
                    return this.columnapril;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mayColumn {
                get {
                    return this.columnmay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn juneColumn {
                get {
                    return this.columnjune;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn julyColumn {
                get {
                    return this.columnjuly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn augustColumn {
                get {
                    return this.columnaugust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn septemberColumn {
                get {
                    return this.columnseptember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn octoberColumn {
                get {
                    return this.columnoctober;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn novemberColumn {
                get {
                    return this.columnnovember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn decemberColumn {
                get {
                    return this.columndecember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearSellPlanRow this[int index] {
                get {
                    return ((YearSellPlanRow)(this.Rows[index]));
                }
            }
            
            public event YearSellPlanRowChangeEventHandler YearSellPlanRowChanging;
            
            public event YearSellPlanRowChangeEventHandler YearSellPlanRowChanged;
            
            public event YearSellPlanRowChangeEventHandler YearSellPlanRowDeleting;
            
            public event YearSellPlanRowChangeEventHandler YearSellPlanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddYearSellPlanRow(YearSellPlanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearSellPlanRow AddYearSellPlanRow(
                        int sort, 
                        int name, 
                        string model, 
                        decimal quantity, 
                        decimal january, 
                        decimal february, 
                        decimal march, 
                        decimal april, 
                        decimal may, 
                        decimal june, 
                        decimal july, 
                        decimal august, 
                        decimal september, 
                        decimal october, 
                        decimal november, 
                        decimal december) {
                YearSellPlanRow rowYearSellPlanRow = ((YearSellPlanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sort,
                        name,
                        model,
                        quantity,
                        january,
                        february,
                        march,
                        april,
                        may,
                        june,
                        july,
                        august,
                        september,
                        october,
                        november,
                        december};
                rowYearSellPlanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowYearSellPlanRow);
                return rowYearSellPlanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                YearSellPlanDataTable cln = ((YearSellPlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new YearSellPlanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnquantity = base.Columns["quantity"];
                this.columnjanuary = base.Columns["january"];
                this.columnfebruary = base.Columns["february"];
                this.columnmarch = base.Columns["march"];
                this.columnapril = base.Columns["april"];
                this.columnmay = base.Columns["may"];
                this.columnjune = base.Columns["june"];
                this.columnjuly = base.Columns["july"];
                this.columnaugust = base.Columns["august"];
                this.columnseptember = base.Columns["september"];
                this.columnoctober = base.Columns["october"];
                this.columnnovember = base.Columns["november"];
                this.columndecember = base.Columns["december"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnquantity = new global::System.Data.DataColumn("quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity);
                this.columnjanuary = new global::System.Data.DataColumn("january", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjanuary);
                this.columnfebruary = new global::System.Data.DataColumn("february", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfebruary);
                this.columnmarch = new global::System.Data.DataColumn("march", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarch);
                this.columnapril = new global::System.Data.DataColumn("april", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapril);
                this.columnmay = new global::System.Data.DataColumn("may", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmay);
                this.columnjune = new global::System.Data.DataColumn("june", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjune);
                this.columnjuly = new global::System.Data.DataColumn("july", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjuly);
                this.columnaugust = new global::System.Data.DataColumn("august", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaugust);
                this.columnseptember = new global::System.Data.DataColumn("september", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseptember);
                this.columnoctober = new global::System.Data.DataColumn("october", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoctober);
                this.columnnovember = new global::System.Data.DataColumn("november", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnovember);
                this.columndecember = new global::System.Data.DataColumn("december", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndecember);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearSellPlanRow NewYearSellPlanRow() {
                return ((YearSellPlanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new YearSellPlanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(YearSellPlanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YearSellPlanRowChanged != null)) {
                    this.YearSellPlanRowChanged(this, new YearSellPlanRowChangeEvent(((YearSellPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YearSellPlanRowChanging != null)) {
                    this.YearSellPlanRowChanging(this, new YearSellPlanRowChangeEvent(((YearSellPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YearSellPlanRowDeleted != null)) {
                    this.YearSellPlanRowDeleted(this, new YearSellPlanRowChangeEvent(((YearSellPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YearSellPlanRowDeleting != null)) {
                    this.YearSellPlanRowDeleting(this, new YearSellPlanRowChangeEvent(((YearSellPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveYearSellPlanRow(YearSellPlanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                sell ds = new sell();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "YearSellPlanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductSellClearingDataTable : global::System.Data.TypedTableBase<ProductSellClearingRow> {
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnsuttle;
            
            private global::System.Data.DataColumn columnunitPrice;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductSellClearingDataTable() {
                this.TableName = "ProductSellClearing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductSellClearingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductSellClearingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suttleColumn {
                get {
                    return this.columnsuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitPriceColumn {
                get {
                    return this.columnunitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductSellClearingRow this[int index] {
                get {
                    return ((ProductSellClearingRow)(this.Rows[index]));
                }
            }
            
            public event ProductSellClearingRowChangeEventHandler ProductSellClearingRowChanging;
            
            public event ProductSellClearingRowChangeEventHandler ProductSellClearingRowChanged;
            
            public event ProductSellClearingRowChangeEventHandler ProductSellClearingRowDeleting;
            
            public event ProductSellClearingRowChangeEventHandler ProductSellClearingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductSellClearingRow(ProductSellClearingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductSellClearingRow AddProductSellClearingRow(string sort, string name, string model, decimal suttle, decimal unitPrice, decimal total) {
                ProductSellClearingRow rowProductSellClearingRow = ((ProductSellClearingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sort,
                        name,
                        model,
                        suttle,
                        unitPrice,
                        total};
                rowProductSellClearingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProductSellClearingRow);
                return rowProductSellClearingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProductSellClearingDataTable cln = ((ProductSellClearingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProductSellClearingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnsuttle = base.Columns["suttle"];
                this.columnunitPrice = base.Columns["unitPrice"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnsuttle = new global::System.Data.DataColumn("suttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuttle);
                this.columnunitPrice = new global::System.Data.DataColumn("unitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunitPrice);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductSellClearingRow NewProductSellClearingRow() {
                return ((ProductSellClearingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProductSellClearingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProductSellClearingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductSellClearingRowChanged != null)) {
                    this.ProductSellClearingRowChanged(this, new ProductSellClearingRowChangeEvent(((ProductSellClearingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductSellClearingRowChanging != null)) {
                    this.ProductSellClearingRowChanging(this, new ProductSellClearingRowChangeEvent(((ProductSellClearingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductSellClearingRowDeleted != null)) {
                    this.ProductSellClearingRowDeleted(this, new ProductSellClearingRowChangeEvent(((ProductSellClearingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductSellClearingRowDeleting != null)) {
                    this.ProductSellClearingRowDeleting(this, new ProductSellClearingRowChangeEvent(((ProductSellClearingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductSellClearingRow(ProductSellClearingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                sell ds = new sell();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductSellClearingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClearBillDetailDataTable : global::System.Data.TypedTableBase<ClearBillDetailRow> {
            
            private global::System.Data.DataColumn columnidx;
            
            private global::System.Data.DataColumn columninputDate;
            
            private global::System.Data.DataColumn columncname;
            
            private global::System.Data.DataColumn columnscname;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columngrossWeight;
            
            private global::System.Data.DataColumn columntare;
            
            private global::System.Data.DataColumn columnsuttle;
            
            private global::System.Data.DataColumn columnsurveyor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearBillDetailDataTable() {
                this.TableName = "ClearBillDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClearBillDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClearBillDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idxColumn {
                get {
                    return this.columnidx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputDateColumn {
                get {
                    return this.columninputDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cnameColumn {
                get {
                    return this.columncname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scnameColumn {
                get {
                    return this.columnscname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grossWeightColumn {
                get {
                    return this.columngrossWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tareColumn {
                get {
                    return this.columntare;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suttleColumn {
                get {
                    return this.columnsuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn surveyorColumn {
                get {
                    return this.columnsurveyor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearBillDetailRow this[int index] {
                get {
                    return ((ClearBillDetailRow)(this.Rows[index]));
                }
            }
            
            public event ClearBillDetailRowChangeEventHandler ClearBillDetailRowChanging;
            
            public event ClearBillDetailRowChangeEventHandler ClearBillDetailRowChanged;
            
            public event ClearBillDetailRowChangeEventHandler ClearBillDetailRowDeleting;
            
            public event ClearBillDetailRowChangeEventHandler ClearBillDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClearBillDetailRow(ClearBillDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearBillDetailRow AddClearBillDetailRow(string inputDate, string cname, string scname, string no, string name, string model, decimal grossWeight, decimal tare, decimal suttle, string surveyor) {
                ClearBillDetailRow rowClearBillDetailRow = ((ClearBillDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        inputDate,
                        cname,
                        scname,
                        no,
                        name,
                        model,
                        grossWeight,
                        tare,
                        suttle,
                        surveyor};
                rowClearBillDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClearBillDetailRow);
                return rowClearBillDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClearBillDetailDataTable cln = ((ClearBillDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClearBillDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidx = base.Columns["idx"];
                this.columninputDate = base.Columns["inputDate"];
                this.columncname = base.Columns["cname"];
                this.columnscname = base.Columns["scname"];
                this.columnno = base.Columns["no"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columngrossWeight = base.Columns["grossWeight"];
                this.columntare = base.Columns["tare"];
                this.columnsuttle = base.Columns["suttle"];
                this.columnsurveyor = base.Columns["surveyor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidx = new global::System.Data.DataColumn("idx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidx);
                this.columninputDate = new global::System.Data.DataColumn("inputDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputDate);
                this.columncname = new global::System.Data.DataColumn("cname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncname);
                this.columnscname = new global::System.Data.DataColumn("scname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscname);
                this.columnno = new global::System.Data.DataColumn("no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columngrossWeight = new global::System.Data.DataColumn("grossWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrossWeight);
                this.columntare = new global::System.Data.DataColumn("tare", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntare);
                this.columnsuttle = new global::System.Data.DataColumn("suttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuttle);
                this.columnsurveyor = new global::System.Data.DataColumn("surveyor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurveyor);
                this.columnidx.AutoIncrement = true;
                this.columnidx.AutoIncrementSeed = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearBillDetailRow NewClearBillDetailRow() {
                return ((ClearBillDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClearBillDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClearBillDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClearBillDetailRowChanged != null)) {
                    this.ClearBillDetailRowChanged(this, new ClearBillDetailRowChangeEvent(((ClearBillDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClearBillDetailRowChanging != null)) {
                    this.ClearBillDetailRowChanging(this, new ClearBillDetailRowChangeEvent(((ClearBillDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClearBillDetailRowDeleted != null)) {
                    this.ClearBillDetailRowDeleted(this, new ClearBillDetailRowChangeEvent(((ClearBillDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClearBillDetailRowDeleting != null)) {
                    this.ClearBillDetailRowDeleting(this, new ClearBillDetailRowChangeEvent(((ClearBillDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClearBillDetailRow(ClearBillDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                sell ds = new sell();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClearBillDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SellOutByProductDataTable : global::System.Data.TypedTableBase<SellOutByProductRow> {
            
            private global::System.Data.DataColumn columninputdate;
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnsuttle;
            
            private global::System.Data.DataColumn columnunitname;
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columntotalSuttle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProductDataTable() {
                this.TableName = "SellOutByProduct";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByProductDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SellOutByProductDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputdateColumn {
                get {
                    return this.columninputdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suttleColumn {
                get {
                    return this.columnsuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitnameColumn {
                get {
                    return this.columnunitname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalSuttleColumn {
                get {
                    return this.columntotalSuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProductRow this[int index] {
                get {
                    return ((SellOutByProductRow)(this.Rows[index]));
                }
            }
            
            public event SellOutByProductRowChangeEventHandler SellOutByProductRowChanging;
            
            public event SellOutByProductRowChangeEventHandler SellOutByProductRowChanged;
            
            public event SellOutByProductRowChangeEventHandler SellOutByProductRowDeleting;
            
            public event SellOutByProductRowChangeEventHandler SellOutByProductRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSellOutByProductRow(SellOutByProductRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProductRow AddSellOutByProductRow(string inputdate, string sort, string name, string model, decimal suttle, string unitname, decimal count, decimal totalSuttle) {
                SellOutByProductRow rowSellOutByProductRow = ((SellOutByProductRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inputdate,
                        sort,
                        name,
                        model,
                        suttle,
                        unitname,
                        count,
                        totalSuttle};
                rowSellOutByProductRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSellOutByProductRow);
                return rowSellOutByProductRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SellOutByProductDataTable cln = ((SellOutByProductDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SellOutByProductDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninputdate = base.Columns["inputdate"];
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnsuttle = base.Columns["suttle"];
                this.columnunitname = base.Columns["unitname"];
                this.columncount = base.Columns["count"];
                this.columntotalSuttle = base.Columns["totalSuttle"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninputdate = new global::System.Data.DataColumn("inputdate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputdate);
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnsuttle = new global::System.Data.DataColumn("suttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuttle);
                this.columnunitname = new global::System.Data.DataColumn("unitname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunitname);
                this.columncount = new global::System.Data.DataColumn("count", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncount);
                this.columntotalSuttle = new global::System.Data.DataColumn("totalSuttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalSuttle);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProductRow NewSellOutByProductRow() {
                return ((SellOutByProductRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SellOutByProductRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SellOutByProductRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SellOutByProductRowChanged != null)) {
                    this.SellOutByProductRowChanged(this, new SellOutByProductRowChangeEvent(((SellOutByProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SellOutByProductRowChanging != null)) {
                    this.SellOutByProductRowChanging(this, new SellOutByProductRowChangeEvent(((SellOutByProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SellOutByProductRowDeleted != null)) {
                    this.SellOutByProductRowDeleted(this, new SellOutByProductRowChangeEvent(((SellOutByProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SellOutByProductRowDeleting != null)) {
                    this.SellOutByProductRowDeleting(this, new SellOutByProductRowChangeEvent(((SellOutByProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSellOutByProductRow(SellOutByProductRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                sell ds = new sell();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SellOutByProductDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SellOutByClientDataTable : global::System.Data.TypedTableBase<SellOutByClientRow> {
            
            private global::System.Data.DataColumn columninputdate;
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnsuttle;
            
            private global::System.Data.DataColumn columnunitname;
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columntotalSuttle;
            
            private global::System.Data.DataColumn columnclientName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByClientDataTable() {
                this.TableName = "SellOutByClient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByClientDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SellOutByClientDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputdateColumn {
                get {
                    return this.columninputdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suttleColumn {
                get {
                    return this.columnsuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitnameColumn {
                get {
                    return this.columnunitname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalSuttleColumn {
                get {
                    return this.columntotalSuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientNameColumn {
                get {
                    return this.columnclientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByClientRow this[int index] {
                get {
                    return ((SellOutByClientRow)(this.Rows[index]));
                }
            }
            
            public event SellOutByClientRowChangeEventHandler SellOutByClientRowChanging;
            
            public event SellOutByClientRowChangeEventHandler SellOutByClientRowChanged;
            
            public event SellOutByClientRowChangeEventHandler SellOutByClientRowDeleting;
            
            public event SellOutByClientRowChangeEventHandler SellOutByClientRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSellOutByClientRow(SellOutByClientRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByClientRow AddSellOutByClientRow(string inputdate, string sort, string name, string model, decimal suttle, string unitname, decimal count, decimal totalSuttle, string clientName) {
                SellOutByClientRow rowSellOutByClientRow = ((SellOutByClientRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inputdate,
                        sort,
                        name,
                        model,
                        suttle,
                        unitname,
                        count,
                        totalSuttle,
                        clientName};
                rowSellOutByClientRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSellOutByClientRow);
                return rowSellOutByClientRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SellOutByClientDataTable cln = ((SellOutByClientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SellOutByClientDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninputdate = base.Columns["inputdate"];
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnsuttle = base.Columns["suttle"];
                this.columnunitname = base.Columns["unitname"];
                this.columncount = base.Columns["count"];
                this.columntotalSuttle = base.Columns["totalSuttle"];
                this.columnclientName = base.Columns["clientName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninputdate = new global::System.Data.DataColumn("inputdate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputdate);
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnsuttle = new global::System.Data.DataColumn("suttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuttle);
                this.columnunitname = new global::System.Data.DataColumn("unitname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunitname);
                this.columncount = new global::System.Data.DataColumn("count", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncount);
                this.columntotalSuttle = new global::System.Data.DataColumn("totalSuttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalSuttle);
                this.columnclientName = new global::System.Data.DataColumn("clientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByClientRow NewSellOutByClientRow() {
                return ((SellOutByClientRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SellOutByClientRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SellOutByClientRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SellOutByClientRowChanged != null)) {
                    this.SellOutByClientRowChanged(this, new SellOutByClientRowChangeEvent(((SellOutByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SellOutByClientRowChanging != null)) {
                    this.SellOutByClientRowChanging(this, new SellOutByClientRowChangeEvent(((SellOutByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SellOutByClientRowDeleted != null)) {
                    this.SellOutByClientRowDeleted(this, new SellOutByClientRowChangeEvent(((SellOutByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SellOutByClientRowDeleting != null)) {
                    this.SellOutByClientRowDeleting(this, new SellOutByClientRowChangeEvent(((SellOutByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSellOutByClientRow(SellOutByClientRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                sell ds = new sell();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SellOutByClientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SellOutByProjectDataTable : global::System.Data.TypedTableBase<SellOutByProjectRow> {
            
            private global::System.Data.DataColumn columninputdate;
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnsuttle;
            
            private global::System.Data.DataColumn columnunitname;
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columnprojectName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProjectDataTable() {
                this.TableName = "SellOutByProject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByProjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SellOutByProjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputdateColumn {
                get {
                    return this.columninputdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suttleColumn {
                get {
                    return this.columnsuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitnameColumn {
                get {
                    return this.columnunitname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectNameColumn {
                get {
                    return this.columnprojectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProjectRow this[int index] {
                get {
                    return ((SellOutByProjectRow)(this.Rows[index]));
                }
            }
            
            public event SellOutByProjectRowChangeEventHandler SellOutByProjectRowChanging;
            
            public event SellOutByProjectRowChangeEventHandler SellOutByProjectRowChanged;
            
            public event SellOutByProjectRowChangeEventHandler SellOutByProjectRowDeleting;
            
            public event SellOutByProjectRowChangeEventHandler SellOutByProjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSellOutByProjectRow(SellOutByProjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProjectRow AddSellOutByProjectRow(string inputdate, string sort, string name, string model, decimal suttle, string unitname, decimal count, string projectName) {
                SellOutByProjectRow rowSellOutByProjectRow = ((SellOutByProjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inputdate,
                        sort,
                        name,
                        model,
                        suttle,
                        unitname,
                        count,
                        projectName};
                rowSellOutByProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSellOutByProjectRow);
                return rowSellOutByProjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SellOutByProjectDataTable cln = ((SellOutByProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SellOutByProjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninputdate = base.Columns["inputdate"];
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnsuttle = base.Columns["suttle"];
                this.columnunitname = base.Columns["unitname"];
                this.columncount = base.Columns["count"];
                this.columnprojectName = base.Columns["projectName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninputdate = new global::System.Data.DataColumn("inputdate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputdate);
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnsuttle = new global::System.Data.DataColumn("suttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuttle);
                this.columnunitname = new global::System.Data.DataColumn("unitname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunitname);
                this.columncount = new global::System.Data.DataColumn("count", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncount);
                this.columnprojectName = new global::System.Data.DataColumn("projectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectName);
                this.columnprojectName.Caption = "clientName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProjectRow NewSellOutByProjectRow() {
                return ((SellOutByProjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SellOutByProjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SellOutByProjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SellOutByProjectRowChanged != null)) {
                    this.SellOutByProjectRowChanged(this, new SellOutByProjectRowChangeEvent(((SellOutByProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SellOutByProjectRowChanging != null)) {
                    this.SellOutByProjectRowChanging(this, new SellOutByProjectRowChangeEvent(((SellOutByProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SellOutByProjectRowDeleted != null)) {
                    this.SellOutByProjectRowDeleted(this, new SellOutByProjectRowChangeEvent(((SellOutByProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SellOutByProjectRowDeleting != null)) {
                    this.SellOutByProjectRowDeleting(this, new SellOutByProjectRowChangeEvent(((SellOutByProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSellOutByProjectRow(SellOutByProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                sell ds = new sell();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SellOutByProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SellOutByTransportDataTable : global::System.Data.TypedTableBase<SellOutByTransportRow> {
            
            private global::System.Data.DataColumn columninputdate;
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmodel;
            
            private global::System.Data.DataColumn columnsuttle;
            
            private global::System.Data.DataColumn columnunitname;
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columntransportName;
            
            private global::System.Data.DataColumn columnstopSite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByTransportDataTable() {
                this.TableName = "SellOutByTransport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByTransportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SellOutByTransportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inputdateColumn {
                get {
                    return this.columninputdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modelColumn {
                get {
                    return this.columnmodel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suttleColumn {
                get {
                    return this.columnsuttle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitnameColumn {
                get {
                    return this.columnunitname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transportNameColumn {
                get {
                    return this.columntransportName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stopSiteColumn {
                get {
                    return this.columnstopSite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByTransportRow this[int index] {
                get {
                    return ((SellOutByTransportRow)(this.Rows[index]));
                }
            }
            
            public event SellOutByTransportRowChangeEventHandler SellOutByTransportRowChanging;
            
            public event SellOutByTransportRowChangeEventHandler SellOutByTransportRowChanged;
            
            public event SellOutByTransportRowChangeEventHandler SellOutByTransportRowDeleting;
            
            public event SellOutByTransportRowChangeEventHandler SellOutByTransportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSellOutByTransportRow(SellOutByTransportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByTransportRow AddSellOutByTransportRow(string inputdate, string sort, string name, string model, decimal suttle, string unitname, decimal count, string transportName, string stopSite) {
                SellOutByTransportRow rowSellOutByTransportRow = ((SellOutByTransportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inputdate,
                        sort,
                        name,
                        model,
                        suttle,
                        unitname,
                        count,
                        transportName,
                        stopSite};
                rowSellOutByTransportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSellOutByTransportRow);
                return rowSellOutByTransportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SellOutByTransportDataTable cln = ((SellOutByTransportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SellOutByTransportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninputdate = base.Columns["inputdate"];
                this.columnsort = base.Columns["sort"];
                this.columnname = base.Columns["name"];
                this.columnmodel = base.Columns["model"];
                this.columnsuttle = base.Columns["suttle"];
                this.columnunitname = base.Columns["unitname"];
                this.columncount = base.Columns["count"];
                this.columntransportName = base.Columns["transportName"];
                this.columnstopSite = base.Columns["stopSite"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninputdate = new global::System.Data.DataColumn("inputdate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputdate);
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsort);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmodel = new global::System.Data.DataColumn("model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel);
                this.columnsuttle = new global::System.Data.DataColumn("suttle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuttle);
                this.columnunitname = new global::System.Data.DataColumn("unitname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunitname);
                this.columncount = new global::System.Data.DataColumn("count", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncount);
                this.columntransportName = new global::System.Data.DataColumn("transportName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransportName);
                this.columnstopSite = new global::System.Data.DataColumn("stopSite", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstopSite);
                this.columntransportName.Caption = "clientName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByTransportRow NewSellOutByTransportRow() {
                return ((SellOutByTransportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SellOutByTransportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SellOutByTransportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SellOutByTransportRowChanged != null)) {
                    this.SellOutByTransportRowChanged(this, new SellOutByTransportRowChangeEvent(((SellOutByTransportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SellOutByTransportRowChanging != null)) {
                    this.SellOutByTransportRowChanging(this, new SellOutByTransportRowChangeEvent(((SellOutByTransportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SellOutByTransportRowDeleted != null)) {
                    this.SellOutByTransportRowDeleted(this, new SellOutByTransportRowChangeEvent(((SellOutByTransportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SellOutByTransportRowDeleting != null)) {
                    this.SellOutByTransportRowDeleting(this, new SellOutByTransportRowChangeEvent(((SellOutByTransportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSellOutByTransportRow(SellOutByTransportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                sell ds = new sell();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SellOutByTransportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class YearSellPlanRow : global::System.Data.DataRow {
            
            private YearSellPlanDataTable tableYearSellPlan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal YearSellPlanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableYearSellPlan = ((YearSellPlanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sort {
                get {
                    try {
                        return ((int)(this[this.tableYearSellPlan.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int name {
                get {
                    try {
                        return ((int)(this[this.tableYearSellPlan.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableYearSellPlan.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal quantity {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.quantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“quantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.quantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal january {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.januaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“january”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.januaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal february {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.februaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“february”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.februaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal march {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.marchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“march”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.marchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal april {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.aprilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“april”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.aprilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal may {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.mayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“may”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.mayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal june {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.juneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“june”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.juneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal july {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.julyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“july”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.julyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal august {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.augustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“august”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.augustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal september {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.septemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“september”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.septemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal october {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.octoberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“october”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.octoberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal november {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.novemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“november”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.novemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal december {
                get {
                    try {
                        return ((decimal)(this[this.tableYearSellPlan.decemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“YearSellPlan”中列“december”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableYearSellPlan.decemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableYearSellPlan.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableYearSellPlan.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableYearSellPlan.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableYearSellPlan.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableYearSellPlan.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableYearSellPlan.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsquantityNull() {
                return this.IsNull(this.tableYearSellPlan.quantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetquantityNull() {
                this[this.tableYearSellPlan.quantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjanuaryNull() {
                return this.IsNull(this.tableYearSellPlan.januaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjanuaryNull() {
                this[this.tableYearSellPlan.januaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfebruaryNull() {
                return this.IsNull(this.tableYearSellPlan.februaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfebruaryNull() {
                this[this.tableYearSellPlan.februaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarchNull() {
                return this.IsNull(this.tableYearSellPlan.marchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarchNull() {
                this[this.tableYearSellPlan.marchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaprilNull() {
                return this.IsNull(this.tableYearSellPlan.aprilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaprilNull() {
                this[this.tableYearSellPlan.aprilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmayNull() {
                return this.IsNull(this.tableYearSellPlan.mayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmayNull() {
                this[this.tableYearSellPlan.mayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjuneNull() {
                return this.IsNull(this.tableYearSellPlan.juneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjuneNull() {
                this[this.tableYearSellPlan.juneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjulyNull() {
                return this.IsNull(this.tableYearSellPlan.julyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjulyNull() {
                this[this.tableYearSellPlan.julyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaugustNull() {
                return this.IsNull(this.tableYearSellPlan.augustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaugustNull() {
                this[this.tableYearSellPlan.augustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseptemberNull() {
                return this.IsNull(this.tableYearSellPlan.septemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseptemberNull() {
                this[this.tableYearSellPlan.septemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoctoberNull() {
                return this.IsNull(this.tableYearSellPlan.octoberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoctoberNull() {
                this[this.tableYearSellPlan.octoberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnovemberNull() {
                return this.IsNull(this.tableYearSellPlan.novemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnovemberNull() {
                this[this.tableYearSellPlan.novemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdecemberNull() {
                return this.IsNull(this.tableYearSellPlan.decemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdecemberNull() {
                this[this.tableYearSellPlan.decemberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductSellClearingRow : global::System.Data.DataRow {
            
            private ProductSellClearingDataTable tableProductSellClearing;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductSellClearingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductSellClearing = ((ProductSellClearingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableProductSellClearing.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductSellClearing”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductSellClearing.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableProductSellClearing.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductSellClearing”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductSellClearing.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableProductSellClearing.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductSellClearing”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductSellClearing.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suttle {
                get {
                    try {
                        return ((decimal)(this[this.tableProductSellClearing.suttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductSellClearing”中列“suttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductSellClearing.suttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal unitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableProductSellClearing.unitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductSellClearing”中列“unitPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductSellClearing.unitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal total {
                get {
                    try {
                        return ((decimal)(this[this.tableProductSellClearing.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ProductSellClearing”中列“total”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProductSellClearing.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableProductSellClearing.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableProductSellClearing.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableProductSellClearing.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableProductSellClearing.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableProductSellClearing.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableProductSellClearing.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuttleNull() {
                return this.IsNull(this.tableProductSellClearing.suttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuttleNull() {
                this[this.tableProductSellClearing.suttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitPriceNull() {
                return this.IsNull(this.tableProductSellClearing.unitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitPriceNull() {
                this[this.tableProductSellClearing.unitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableProductSellClearing.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableProductSellClearing.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClearBillDetailRow : global::System.Data.DataRow {
            
            private ClearBillDetailDataTable tableClearBillDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClearBillDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClearBillDetail = ((ClearBillDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idx {
                get {
                    try {
                        return ((int)(this[this.tableClearBillDetail.idxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“idx”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.idxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inputDate {
                get {
                    try {
                        return ((string)(this[this.tableClearBillDetail.inputDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“inputDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.inputDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cname {
                get {
                    try {
                        return ((string)(this[this.tableClearBillDetail.cnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“cname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.cnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scname {
                get {
                    try {
                        return ((string)(this[this.tableClearBillDetail.scnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“scname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.scnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string no {
                get {
                    try {
                        return ((string)(this[this.tableClearBillDetail.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“no”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableClearBillDetail.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableClearBillDetail.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal grossWeight {
                get {
                    try {
                        return ((decimal)(this[this.tableClearBillDetail.grossWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“grossWeight”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.grossWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal tare {
                get {
                    try {
                        return ((decimal)(this[this.tableClearBillDetail.tareColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“tare”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.tareColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suttle {
                get {
                    try {
                        return ((decimal)(this[this.tableClearBillDetail.suttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“suttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.suttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string surveyor {
                get {
                    try {
                        return ((string)(this[this.tableClearBillDetail.surveyorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClearBillDetail”中列“surveyor”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClearBillDetail.surveyorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidxNull() {
                return this.IsNull(this.tableClearBillDetail.idxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidxNull() {
                this[this.tableClearBillDetail.idxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputDateNull() {
                return this.IsNull(this.tableClearBillDetail.inputDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputDateNull() {
                this[this.tableClearBillDetail.inputDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscnameNull() {
                return this.IsNull(this.tableClearBillDetail.cnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcnameNull() {
                this[this.tableClearBillDetail.cnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscnameNull() {
                return this.IsNull(this.tableClearBillDetail.scnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscnameNull() {
                this[this.tableClearBillDetail.scnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableClearBillDetail.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableClearBillDetail.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableClearBillDetail.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableClearBillDetail.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableClearBillDetail.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableClearBillDetail.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrossWeightNull() {
                return this.IsNull(this.tableClearBillDetail.grossWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrossWeightNull() {
                this[this.tableClearBillDetail.grossWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstareNull() {
                return this.IsNull(this.tableClearBillDetail.tareColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettareNull() {
                this[this.tableClearBillDetail.tareColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuttleNull() {
                return this.IsNull(this.tableClearBillDetail.suttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuttleNull() {
                this[this.tableClearBillDetail.suttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssurveyorNull() {
                return this.IsNull(this.tableClearBillDetail.surveyorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsurveyorNull() {
                this[this.tableClearBillDetail.surveyorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SellOutByProductRow : global::System.Data.DataRow {
            
            private SellOutByProductDataTable tableSellOutByProduct;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByProductRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSellOutByProduct = ((SellOutByProductDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inputdate {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProduct.inputdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“inputdate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.inputdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProduct.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProduct.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProduct.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suttle {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByProduct.suttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“suttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.suttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitname {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProduct.unitnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“unitname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.unitnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal count {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByProduct.countColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalSuttle {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByProduct.totalSuttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProduct”中列“totalSuttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProduct.totalSuttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputdateNull() {
                return this.IsNull(this.tableSellOutByProduct.inputdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputdateNull() {
                this[this.tableSellOutByProduct.inputdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableSellOutByProduct.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableSellOutByProduct.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableSellOutByProduct.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableSellOutByProduct.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableSellOutByProduct.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableSellOutByProduct.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuttleNull() {
                return this.IsNull(this.tableSellOutByProduct.suttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuttleNull() {
                this[this.tableSellOutByProduct.suttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitnameNull() {
                return this.IsNull(this.tableSellOutByProduct.unitnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitnameNull() {
                this[this.tableSellOutByProduct.unitnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountNull() {
                return this.IsNull(this.tableSellOutByProduct.countColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountNull() {
                this[this.tableSellOutByProduct.countColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalSuttleNull() {
                return this.IsNull(this.tableSellOutByProduct.totalSuttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalSuttleNull() {
                this[this.tableSellOutByProduct.totalSuttleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SellOutByClientRow : global::System.Data.DataRow {
            
            private SellOutByClientDataTable tableSellOutByClient;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByClientRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSellOutByClient = ((SellOutByClientDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inputdate {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByClient.inputdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“inputdate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.inputdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByClient.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByClient.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByClient.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suttle {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByClient.suttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“suttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.suttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitname {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByClient.unitnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“unitname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.unitnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal count {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByClient.countColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalSuttle {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByClient.totalSuttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“totalSuttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.totalSuttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clientName {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByClient.clientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByClient”中列“clientName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByClient.clientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputdateNull() {
                return this.IsNull(this.tableSellOutByClient.inputdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputdateNull() {
                this[this.tableSellOutByClient.inputdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableSellOutByClient.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableSellOutByClient.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableSellOutByClient.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableSellOutByClient.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableSellOutByClient.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableSellOutByClient.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuttleNull() {
                return this.IsNull(this.tableSellOutByClient.suttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuttleNull() {
                this[this.tableSellOutByClient.suttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitnameNull() {
                return this.IsNull(this.tableSellOutByClient.unitnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitnameNull() {
                this[this.tableSellOutByClient.unitnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountNull() {
                return this.IsNull(this.tableSellOutByClient.countColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountNull() {
                this[this.tableSellOutByClient.countColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalSuttleNull() {
                return this.IsNull(this.tableSellOutByClient.totalSuttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalSuttleNull() {
                this[this.tableSellOutByClient.totalSuttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientNameNull() {
                return this.IsNull(this.tableSellOutByClient.clientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientNameNull() {
                this[this.tableSellOutByClient.clientNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SellOutByProjectRow : global::System.Data.DataRow {
            
            private SellOutByProjectDataTable tableSellOutByProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByProjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSellOutByProject = ((SellOutByProjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inputdate {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProject.inputdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“inputdate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.inputdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProject.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProject.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProject.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suttle {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByProject.suttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“suttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.suttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitname {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProject.unitnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“unitname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.unitnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal count {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByProject.countColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectName {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByProject.projectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByProject”中列“projectName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByProject.projectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputdateNull() {
                return this.IsNull(this.tableSellOutByProject.inputdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputdateNull() {
                this[this.tableSellOutByProject.inputdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableSellOutByProject.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableSellOutByProject.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableSellOutByProject.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableSellOutByProject.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableSellOutByProject.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableSellOutByProject.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuttleNull() {
                return this.IsNull(this.tableSellOutByProject.suttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuttleNull() {
                this[this.tableSellOutByProject.suttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitnameNull() {
                return this.IsNull(this.tableSellOutByProject.unitnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitnameNull() {
                this[this.tableSellOutByProject.unitnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountNull() {
                return this.IsNull(this.tableSellOutByProject.countColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountNull() {
                this[this.tableSellOutByProject.countColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprojectNameNull() {
                return this.IsNull(this.tableSellOutByProject.projectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprojectNameNull() {
                this[this.tableSellOutByProject.projectNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SellOutByTransportRow : global::System.Data.DataRow {
            
            private SellOutByTransportDataTable tableSellOutByTransport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SellOutByTransportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSellOutByTransport = ((SellOutByTransportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inputdate {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByTransport.inputdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“inputdate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.inputdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByTransport.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“sort”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByTransport.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByTransport.modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“model”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suttle {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByTransport.suttleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“suttle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.suttleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unitname {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByTransport.unitnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“unitname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.unitnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal count {
                get {
                    try {
                        return ((decimal)(this[this.tableSellOutByTransport.countColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transportName {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByTransport.transportNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“transportName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.transportNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stopSite {
                get {
                    try {
                        return ((string)(this[this.tableSellOutByTransport.stopSiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SellOutByTransport”中列“stopSite”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSellOutByTransport.stopSiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinputdateNull() {
                return this.IsNull(this.tableSellOutByTransport.inputdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinputdateNull() {
                this[this.tableSellOutByTransport.inputdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableSellOutByTransport.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableSellOutByTransport.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableSellOutByTransport.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableSellOutByTransport.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodelNull() {
                return this.IsNull(this.tableSellOutByTransport.modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodelNull() {
                this[this.tableSellOutByTransport.modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuttleNull() {
                return this.IsNull(this.tableSellOutByTransport.suttleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuttleNull() {
                this[this.tableSellOutByTransport.suttleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitnameNull() {
                return this.IsNull(this.tableSellOutByTransport.unitnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitnameNull() {
                this[this.tableSellOutByTransport.unitnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountNull() {
                return this.IsNull(this.tableSellOutByTransport.countColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountNull() {
                this[this.tableSellOutByTransport.countColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransportNameNull() {
                return this.IsNull(this.tableSellOutByTransport.transportNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransportNameNull() {
                this[this.tableSellOutByTransport.transportNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstopSiteNull() {
                return this.IsNull(this.tableSellOutByTransport.stopSiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstopSiteNull() {
                this[this.tableSellOutByTransport.stopSiteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class YearSellPlanRowChangeEvent : global::System.EventArgs {
            
            private YearSellPlanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearSellPlanRowChangeEvent(YearSellPlanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public YearSellPlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductSellClearingRowChangeEvent : global::System.EventArgs {
            
            private ProductSellClearingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductSellClearingRowChangeEvent(ProductSellClearingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductSellClearingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClearBillDetailRowChangeEvent : global::System.EventArgs {
            
            private ClearBillDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearBillDetailRowChangeEvent(ClearBillDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearBillDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SellOutByProductRowChangeEvent : global::System.EventArgs {
            
            private SellOutByProductRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProductRowChangeEvent(SellOutByProductRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProductRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SellOutByClientRowChangeEvent : global::System.EventArgs {
            
            private SellOutByClientRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByClientRowChangeEvent(SellOutByClientRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByClientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SellOutByProjectRowChangeEvent : global::System.EventArgs {
            
            private SellOutByProjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProjectRowChangeEvent(SellOutByProjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SellOutByTransportRowChangeEvent : global::System.EventArgs {
            
            private SellOutByTransportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByTransportRowChangeEvent(SellOutByTransportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SellOutByTransportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591