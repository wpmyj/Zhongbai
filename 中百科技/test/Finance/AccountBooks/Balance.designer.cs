#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DasherStation.Finance.AccountBooks
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DasherStation")]
	public partial class BalanceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFundsRecorder(FundsRecorder instance);
    partial void UpdateFundsRecorder(FundsRecorder instance);
    partial void DeleteFundsRecorder(FundsRecorder instance);
    partial void InsertArrearage(Arrearage instance);
    partial void UpdateArrearage(Arrearage instance);
    partial void DeleteArrearage(Arrearage instance);
    partial void InsertAccountReceivable(AccountReceivable instance);
    partial void UpdateAccountReceivable(AccountReceivable instance);
    partial void DeleteAccountReceivable(AccountReceivable instance);
    #endregion
		
		public BalanceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BalanceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BalanceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BalanceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FundsRecorder> FundsRecorder
		{
			get
			{
				return this.GetTable<FundsRecorder>();
			}
		}
		
		public System.Data.Linq.Table<Arrearage> Arrearage
		{
			get
			{
				return this.GetTable<Arrearage>();
			}
		}
		
		public System.Data.Linq.Table<AccountReceivable> AccountReceivable
		{
			get
			{
				return this.GetTable<AccountReceivable>();
			}
		}
	}
	
	[Table(Name="dbo.fundsRecorder")]
	public partial class FundsRecorder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _customerId;
		
		private System.Nullable<long> _ciid;
		
		private System.Nullable<long> _tuid;
		
		private decimal _paidup;
		
		private string _type;
		
		private string _checkNo;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private string _invoiceNo;
		
		private string _remark;
		
		private System.Nullable<decimal> _cash1;
		
		private System.Nullable<decimal> _cash2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OncustomerIdChanging(System.Nullable<long> value);
    partial void OncustomerIdChanged();
    partial void OnciidChanging(System.Nullable<long> value);
    partial void OnciidChanged();
    partial void OntuidChanging(System.Nullable<long> value);
    partial void OntuidChanged();
    partial void OnpaidupChanging(decimal value);
    partial void OnpaidupChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OncheckNoChanging(string value);
    partial void OncheckNoChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OninvoiceNoChanging(string value);
    partial void OninvoiceNoChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void Oncash1Changing(System.Nullable<decimal> value);
    partial void Oncash1Changed();
    partial void Oncash2Changing(System.Nullable<decimal> value);
    partial void Oncash2Changed();
    #endregion
		
		public FundsRecorder()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_customerId", DbType="BigInt")]
		public System.Nullable<long> customerId
		{
			get
			{
				return this._customerId;
			}
			set
			{
				if ((this._customerId != value))
				{
					this.OncustomerIdChanging(value);
					this.SendPropertyChanging();
					this._customerId = value;
					this.SendPropertyChanged("customerId");
					this.OncustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ciid", DbType="BigInt")]
		public System.Nullable<long> ciid
		{
			get
			{
				return this._ciid;
			}
			set
			{
				if ((this._ciid != value))
				{
					this.OnciidChanging(value);
					this.SendPropertyChanging();
					this._ciid = value;
					this.SendPropertyChanged("ciid");
					this.OnciidChanged();
				}
			}
		}
		
		[Column(Storage="_tuid", DbType="BigInt")]
		public System.Nullable<long> tuid
		{
			get
			{
				return this._tuid;
			}
			set
			{
				if ((this._tuid != value))
				{
					this.OntuidChanging(value);
					this.SendPropertyChanging();
					this._tuid = value;
					this.SendPropertyChanged("tuid");
					this.OntuidChanged();
				}
			}
		}
		
		[Column(Storage="_paidup", DbType="Money NOT NULL")]
		public decimal paidup
		{
			get
			{
				return this._paidup;
			}
			set
			{
				if ((this._paidup != value))
				{
					this.OnpaidupChanging(value);
					this.SendPropertyChanging();
					this._paidup = value;
					this.SendPropertyChanged("paidup");
					this.OnpaidupChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_checkNo", DbType="VarChar(50)")]
		public string checkNo
		{
			get
			{
				return this._checkNo;
			}
			set
			{
				if ((this._checkNo != value))
				{
					this.OncheckNoChanging(value);
					this.SendPropertyChanging();
					this._checkNo = value;
					this.SendPropertyChanged("checkNo");
					this.OncheckNoChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime", IsDbGenerated=true)]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_invoiceNo", DbType="VarChar(50)")]
		public string invoiceNo
		{
			get
			{
				return this._invoiceNo;
			}
			set
			{
				if ((this._invoiceNo != value))
				{
					this.OninvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._invoiceNo = value;
					this.SendPropertyChanged("invoiceNo");
					this.OninvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(1000)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_cash1", DbType="Money")]
		public System.Nullable<decimal> cash1
		{
			get
			{
				return this._cash1;
			}
			set
			{
				if ((this._cash1 != value))
				{
					this.Oncash1Changing(value);
					this.SendPropertyChanging();
					this._cash1 = value;
					this.SendPropertyChanged("cash1");
					this.Oncash1Changed();
				}
			}
		}
		
		[Column(Storage="_cash2", DbType="Money")]
		public System.Nullable<decimal> cash2
		{
			get
			{
				return this._cash2;
			}
			set
			{
				if ((this._cash2 != value))
				{
					this.Oncash2Changing(value);
					this.SendPropertyChanging();
					this._cash2 = value;
					this.SendPropertyChanged("cash2");
					this.Oncash2Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.arrearage")]
	public partial class Arrearage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _piId;
		
		private System.Nullable<long> _tuId;
		
		private System.Nullable<decimal> _due;
		
		private System.Nullable<decimal> _paidUp;
		
		private System.Nullable<decimal> _default;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnpiIdChanging(System.Nullable<long> value);
    partial void OnpiIdChanged();
    partial void OntuIdChanging(System.Nullable<long> value);
    partial void OntuIdChanged();
    partial void OndueChanging(System.Nullable<decimal> value);
    partial void OndueChanged();
    partial void OnpaidUpChanging(System.Nullable<decimal> value);
    partial void OnpaidUpChanged();
    partial void OndefaultChanging(System.Nullable<decimal> value);
    partial void OndefaultChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    #endregion
		
		public Arrearage()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_piId", DbType="BigInt")]
		public System.Nullable<long> piId
		{
			get
			{
				return this._piId;
			}
			set
			{
				if ((this._piId != value))
				{
					this.OnpiIdChanging(value);
					this.SendPropertyChanging();
					this._piId = value;
					this.SendPropertyChanged("piId");
					this.OnpiIdChanged();
				}
			}
		}
		
		[Column(Storage="_tuId", DbType="BigInt")]
		public System.Nullable<long> tuId
		{
			get
			{
				return this._tuId;
			}
			set
			{
				if ((this._tuId != value))
				{
					this.OntuIdChanging(value);
					this.SendPropertyChanging();
					this._tuId = value;
					this.SendPropertyChanged("tuId");
					this.OntuIdChanged();
				}
			}
		}
		
		[Column(Storage="_due", DbType="Money")]
		public System.Nullable<decimal> due
		{
			get
			{
				return this._due;
			}
			set
			{
				if ((this._due != value))
				{
					this.OndueChanging(value);
					this.SendPropertyChanging();
					this._due = value;
					this.SendPropertyChanged("due");
					this.OndueChanged();
				}
			}
		}
		
		[Column(Storage="_paidUp", DbType="Money")]
		public System.Nullable<decimal> paidUp
		{
			get
			{
				return this._paidUp;
			}
			set
			{
				if ((this._paidUp != value))
				{
					this.OnpaidUpChanging(value);
					this.SendPropertyChanging();
					this._paidUp = value;
					this.SendPropertyChanged("paidUp");
					this.OnpaidUpChanged();
				}
			}
		}
		
		[Column(Name="[default]", Storage="_default", DbType="Money")]
		public System.Nullable<decimal> @default
		{
			get
			{
				return this._default;
			}
			set
			{
				if ((this._default != value))
				{
					this.OndefaultChanging(value);
					this.SendPropertyChanging();
					this._default = value;
					this.SendPropertyChanged("@default");
					this.OndefaultChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime", IsDbGenerated=true)]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.accountReceivable")]
	public partial class AccountReceivable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _ciId;
		
		private System.Nullable<decimal> _accountReceivable1;
		
		private System.Nullable<decimal> _accept;
		
		private System.Nullable<decimal> _default;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnciIdChanging(System.Nullable<long> value);
    partial void OnciIdChanged();
    partial void OnaccountReceivable1Changing(System.Nullable<decimal> value);
    partial void OnaccountReceivable1Changed();
    partial void OnacceptChanging(System.Nullable<decimal> value);
    partial void OnacceptChanged();
    partial void OndefaultChanging(System.Nullable<decimal> value);
    partial void OndefaultChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    #endregion
		
		public AccountReceivable()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_ciId", DbType="BigInt")]
		public System.Nullable<long> ciId
		{
			get
			{
				return this._ciId;
			}
			set
			{
				if ((this._ciId != value))
				{
					this.OnciIdChanging(value);
					this.SendPropertyChanging();
					this._ciId = value;
					this.SendPropertyChanged("ciId");
					this.OnciIdChanged();
				}
			}
		}
		
		[Column(Name="accountReceivable", Storage="_accountReceivable1", DbType="Money")]
		public System.Nullable<decimal> accountReceivable1
		{
			get
			{
				return this._accountReceivable1;
			}
			set
			{
				if ((this._accountReceivable1 != value))
				{
					this.OnaccountReceivable1Changing(value);
					this.SendPropertyChanging();
					this._accountReceivable1 = value;
					this.SendPropertyChanged("accountReceivable1");
					this.OnaccountReceivable1Changed();
				}
			}
		}
		
		[Column(Storage="_accept", DbType="Money")]
		public System.Nullable<decimal> accept
		{
			get
			{
				return this._accept;
			}
			set
			{
				if ((this._accept != value))
				{
					this.OnacceptChanging(value);
					this.SendPropertyChanging();
					this._accept = value;
					this.SendPropertyChanged("accept");
					this.OnacceptChanged();
				}
			}
		}
		
		[Column(Name="[default]", Storage="_default", DbType="Money")]
		public System.Nullable<decimal> @default
		{
			get
			{
				return this._default;
			}
			set
			{
				if ((this._default != value))
				{
					this.OndefaultChanging(value);
					this.SendPropertyChanging();
					this._default = value;
					this.SendPropertyChanged("@default");
					this.OndefaultChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime", IsDbGenerated=true)]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
