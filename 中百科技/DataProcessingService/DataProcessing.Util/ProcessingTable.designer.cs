#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataProcessing.Util
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DasherStation")]
	public partial class ProcessingTableDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEquipmentInformation(EquipmentInformation instance);
    partial void UpdateEquipmentInformation(EquipmentInformation instance);
    partial void DeleteEquipmentInformation(EquipmentInformation instance);
    partial void InsertFlowmeterNo(FlowmeterNo instance);
    partial void UpdateFlowmeterNo(FlowmeterNo instance);
    partial void DeleteFlowmeterNo(FlowmeterNo instance);
    partial void InsertTemperatureNo(TemperatureNo instance);
    partial void UpdateTemperatureNo(TemperatureNo instance);
    partial void DeleteTemperatureNo(TemperatureNo instance);
    partial void InsertTemperatureHistory(TemperatureHistory instance);
    partial void UpdateTemperatureHistory(TemperatureHistory instance);
    partial void DeleteTemperatureHistory(TemperatureHistory instance);
    partial void InsertLiquidMatterStockList(LiquidMatterStockList instance);
    partial void UpdateLiquidMatterStockList(LiquidMatterStockList instance);
    partial void DeleteLiquidMatterStockList(LiquidMatterStockList instance);
    partial void InsertLiquidPositionNo(LiquidPositionNo instance);
    partial void UpdateLiquidPositionNo(LiquidPositionNo instance);
    partial void DeleteLiquidPositionNo(LiquidPositionNo instance);
    partial void InsertLiquidPositionHistory(LiquidPositionHistory instance);
    partial void UpdateLiquidPositionHistory(LiquidPositionHistory instance);
    partial void DeleteLiquidPositionHistory(LiquidPositionHistory instance);
    partial void InsertProduceMeasureMonitor(ProduceMeasureMonitor instance);
    partial void UpdateProduceMeasureMonitor(ProduceMeasureMonitor instance);
    partial void DeleteProduceMeasureMonitor(ProduceMeasureMonitor instance);
    partial void InsertEmulsificationGatherProduceLog(EmulsificationGatherProduceLog instance);
    partial void UpdateEmulsificationGatherProduceLog(EmulsificationGatherProduceLog instance);
    partial void DeleteEmulsificationGatherProduceLog(EmulsificationGatherProduceLog instance);
    partial void InsertDeepFatConsumeDailyStatisticsDetail(DeepFatConsumeDailyStatisticsDetail instance);
    partial void UpdateDeepFatConsumeDailyStatisticsDetail(DeepFatConsumeDailyStatisticsDetail instance);
    partial void DeleteDeepFatConsumeDailyStatisticsDetail(DeepFatConsumeDailyStatisticsDetail instance);
    partial void InsertFlowmeterHistory(FlowmeterHistory instance);
    partial void UpdateFlowmeterHistory(FlowmeterHistory instance);
    partial void DeleteFlowmeterHistory(FlowmeterHistory instance);
    #endregion
		
		public ProcessingTableDataContext() : 
				base(global::DataProcessing.Util.Properties.Settings.Default.DasherStationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ProcessingTableDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProcessingTableDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProcessingTableDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProcessingTableDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EquipmentInformation> EquipmentInformation
		{
			get
			{
				return this.GetTable<EquipmentInformation>();
			}
		}
		
		public System.Data.Linq.Table<FlowmeterNo> FlowmeterNo
		{
			get
			{
				return this.GetTable<FlowmeterNo>();
			}
		}
		
		public System.Data.Linq.Table<TemperatureNo> TemperatureNo
		{
			get
			{
				return this.GetTable<TemperatureNo>();
			}
		}
		
		public System.Data.Linq.Table<TemperatureHistory> TemperatureHistory
		{
			get
			{
				return this.GetTable<TemperatureHistory>();
			}
		}
		
		public System.Data.Linq.Table<LiquidMatterStockList> LiquidMatterStockList
		{
			get
			{
				return this.GetTable<LiquidMatterStockList>();
			}
		}
		
		public System.Data.Linq.Table<LiquidPositionNo> LiquidPositionNo
		{
			get
			{
				return this.GetTable<LiquidPositionNo>();
			}
		}
		
		public System.Data.Linq.Table<LiquidPositionHistory> LiquidPositionHistory
		{
			get
			{
				return this.GetTable<LiquidPositionHistory>();
			}
		}
		
		public System.Data.Linq.Table<ProduceMeasureMonitor> ProduceMeasureMonitor
		{
			get
			{
				return this.GetTable<ProduceMeasureMonitor>();
			}
		}
		
		public System.Data.Linq.Table<EmulsificationGatherProduceLog> EmulsificationGatherProduceLog
		{
			get
			{
				return this.GetTable<EmulsificationGatherProduceLog>();
			}
		}
		
		public System.Data.Linq.Table<DeepFatConsumeDailyStatisticsDetail> DeepFatConsumeDailyStatisticsDetail
		{
			get
			{
				return this.GetTable<DeepFatConsumeDailyStatisticsDetail>();
			}
		}
		
		public System.Data.Linq.Table<FlowmeterHistory> FlowmeterHistory
		{
			get
			{
				return this.GetTable<FlowmeterHistory>();
			}
		}
	}
	
	[Table(Name="dbo.equipmentInformation")]
	public partial class EquipmentInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _no;
		
		private System.Nullable<long> _enId;
		
		private System.Nullable<long> _emId;
		
		private System.Nullable<long> _dId;
		
		private System.Nullable<long> _count;
		
		private System.Nullable<long> _registrationMark;
		
		private string _installationPosition;
		
		private System.Nullable<double> _sumPower;
		
		private string _addMethod;
		
		private System.Nullable<double> _primaryValue;
		
		private System.Nullable<double> _remainsValue;
		
		private System.Nullable<long> _depreciationYear;
		
		private System.Nullable<System.DateTime> _produceDate;
		
		private string _factoryNo;
		
		private string _contactMethod;
		
		private string _factoryAddress;
		
		private string _postCode;
		
		private string _workMan;
		
		private System.Nullable<double> _diameter;
		
		private System.Nullable<double> _height;
		
		private System.Nullable<System.DateTime> _beginUseTime;
		
		private string _contactMan;
		
		private string _producer;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private string _remark;
		
		private System.Nullable<long> _dId2;
		
		private string _kind;
		
		private System.Nullable<decimal> _proportionError;
		
		private System.Nullable<decimal> _totalMaterialWeight;
		
		private string _mark;
		
		private EntitySet<LiquidMatterStockList> _LiquidMatterStockList;
		
		private EntitySet<ProduceMeasureMonitor> _ProduceMeasureMonitor;
		
		private EntitySet<EmulsificationGatherProduceLog> _EmulsificationGatherProduceLog;
		
		private EntitySet<DeepFatConsumeDailyStatisticsDetail> _DeepFatConsumeDailyStatisticsDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    partial void OnenIdChanging(System.Nullable<long> value);
    partial void OnenIdChanged();
    partial void OnemIdChanging(System.Nullable<long> value);
    partial void OnemIdChanged();
    partial void OndIdChanging(System.Nullable<long> value);
    partial void OndIdChanged();
    partial void OncountChanging(System.Nullable<long> value);
    partial void OncountChanged();
    partial void OnregistrationMarkChanging(System.Nullable<long> value);
    partial void OnregistrationMarkChanged();
    partial void OninstallationPositionChanging(string value);
    partial void OninstallationPositionChanged();
    partial void OnsumPowerChanging(System.Nullable<double> value);
    partial void OnsumPowerChanged();
    partial void OnaddMethodChanging(string value);
    partial void OnaddMethodChanged();
    partial void OnprimaryValueChanging(System.Nullable<double> value);
    partial void OnprimaryValueChanged();
    partial void OnremainsValueChanging(System.Nullable<double> value);
    partial void OnremainsValueChanged();
    partial void OndepreciationYearChanging(System.Nullable<long> value);
    partial void OndepreciationYearChanged();
    partial void OnproduceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnproduceDateChanged();
    partial void OnfactoryNoChanging(string value);
    partial void OnfactoryNoChanged();
    partial void OncontactMethodChanging(string value);
    partial void OncontactMethodChanged();
    partial void OnfactoryAddressChanging(string value);
    partial void OnfactoryAddressChanged();
    partial void OnpostCodeChanging(string value);
    partial void OnpostCodeChanged();
    partial void OnworkManChanging(string value);
    partial void OnworkManChanged();
    partial void OndiameterChanging(System.Nullable<double> value);
    partial void OndiameterChanged();
    partial void OnheightChanging(System.Nullable<double> value);
    partial void OnheightChanged();
    partial void OnbeginUseTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnbeginUseTimeChanged();
    partial void OncontactManChanging(string value);
    partial void OncontactManChanged();
    partial void OnproducerChanging(string value);
    partial void OnproducerChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OndId2Changing(System.Nullable<long> value);
    partial void OndId2Changed();
    partial void OnkindChanging(string value);
    partial void OnkindChanged();
    partial void OnproportionErrorChanging(System.Nullable<decimal> value);
    partial void OnproportionErrorChanged();
    partial void OntotalMaterialWeightChanging(System.Nullable<decimal> value);
    partial void OntotalMaterialWeightChanged();
    partial void OnmarkChanging(string value);
    partial void OnmarkChanged();
    #endregion
		
		public EquipmentInformation()
		{
			this._LiquidMatterStockList = new EntitySet<LiquidMatterStockList>(new Action<LiquidMatterStockList>(this.attach_LiquidMatterStockList), new Action<LiquidMatterStockList>(this.detach_LiquidMatterStockList));
			this._ProduceMeasureMonitor = new EntitySet<ProduceMeasureMonitor>(new Action<ProduceMeasureMonitor>(this.attach_ProduceMeasureMonitor), new Action<ProduceMeasureMonitor>(this.detach_ProduceMeasureMonitor));
			this._EmulsificationGatherProduceLog = new EntitySet<EmulsificationGatherProduceLog>(new Action<EmulsificationGatherProduceLog>(this.attach_EmulsificationGatherProduceLog), new Action<EmulsificationGatherProduceLog>(this.detach_EmulsificationGatherProduceLog));
			this._DeepFatConsumeDailyStatisticsDetail = new EntitySet<DeepFatConsumeDailyStatisticsDetail>(new Action<DeepFatConsumeDailyStatisticsDetail>(this.attach_DeepFatConsumeDailyStatisticsDetail), new Action<DeepFatConsumeDailyStatisticsDetail>(this.detach_DeepFatConsumeDailyStatisticsDetail));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_no", DbType="VarChar(50)")]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[Column(Storage="_enId", DbType="BigInt")]
		public System.Nullable<long> enId
		{
			get
			{
				return this._enId;
			}
			set
			{
				if ((this._enId != value))
				{
					this.OnenIdChanging(value);
					this.SendPropertyChanging();
					this._enId = value;
					this.SendPropertyChanged("enId");
					this.OnenIdChanged();
				}
			}
		}
		
		[Column(Storage="_emId", DbType="BigInt")]
		public System.Nullable<long> emId
		{
			get
			{
				return this._emId;
			}
			set
			{
				if ((this._emId != value))
				{
					this.OnemIdChanging(value);
					this.SendPropertyChanging();
					this._emId = value;
					this.SendPropertyChanged("emId");
					this.OnemIdChanged();
				}
			}
		}
		
		[Column(Storage="_dId", DbType="BigInt")]
		public System.Nullable<long> dId
		{
			get
			{
				return this._dId;
			}
			set
			{
				if ((this._dId != value))
				{
					this.OndIdChanging(value);
					this.SendPropertyChanging();
					this._dId = value;
					this.SendPropertyChanged("dId");
					this.OndIdChanged();
				}
			}
		}
		
		[Column(Storage="_count", DbType="BigInt")]
		public System.Nullable<long> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[Column(Storage="_registrationMark", DbType="BigInt")]
		public System.Nullable<long> registrationMark
		{
			get
			{
				return this._registrationMark;
			}
			set
			{
				if ((this._registrationMark != value))
				{
					this.OnregistrationMarkChanging(value);
					this.SendPropertyChanging();
					this._registrationMark = value;
					this.SendPropertyChanged("registrationMark");
					this.OnregistrationMarkChanged();
				}
			}
		}
		
		[Column(Storage="_installationPosition", DbType="VarChar(50)")]
		public string installationPosition
		{
			get
			{
				return this._installationPosition;
			}
			set
			{
				if ((this._installationPosition != value))
				{
					this.OninstallationPositionChanging(value);
					this.SendPropertyChanging();
					this._installationPosition = value;
					this.SendPropertyChanged("installationPosition");
					this.OninstallationPositionChanged();
				}
			}
		}
		
		[Column(Storage="_sumPower", DbType="Float")]
		public System.Nullable<double> sumPower
		{
			get
			{
				return this._sumPower;
			}
			set
			{
				if ((this._sumPower != value))
				{
					this.OnsumPowerChanging(value);
					this.SendPropertyChanging();
					this._sumPower = value;
					this.SendPropertyChanged("sumPower");
					this.OnsumPowerChanged();
				}
			}
		}
		
		[Column(Storage="_addMethod", DbType="VarChar(50)")]
		public string addMethod
		{
			get
			{
				return this._addMethod;
			}
			set
			{
				if ((this._addMethod != value))
				{
					this.OnaddMethodChanging(value);
					this.SendPropertyChanging();
					this._addMethod = value;
					this.SendPropertyChanged("addMethod");
					this.OnaddMethodChanged();
				}
			}
		}
		
		[Column(Storage="_primaryValue", DbType="Float")]
		public System.Nullable<double> primaryValue
		{
			get
			{
				return this._primaryValue;
			}
			set
			{
				if ((this._primaryValue != value))
				{
					this.OnprimaryValueChanging(value);
					this.SendPropertyChanging();
					this._primaryValue = value;
					this.SendPropertyChanged("primaryValue");
					this.OnprimaryValueChanged();
				}
			}
		}
		
		[Column(Storage="_remainsValue", DbType="Float")]
		public System.Nullable<double> remainsValue
		{
			get
			{
				return this._remainsValue;
			}
			set
			{
				if ((this._remainsValue != value))
				{
					this.OnremainsValueChanging(value);
					this.SendPropertyChanging();
					this._remainsValue = value;
					this.SendPropertyChanged("remainsValue");
					this.OnremainsValueChanged();
				}
			}
		}
		
		[Column(Storage="_depreciationYear", DbType="BigInt")]
		public System.Nullable<long> depreciationYear
		{
			get
			{
				return this._depreciationYear;
			}
			set
			{
				if ((this._depreciationYear != value))
				{
					this.OndepreciationYearChanging(value);
					this.SendPropertyChanging();
					this._depreciationYear = value;
					this.SendPropertyChanged("depreciationYear");
					this.OndepreciationYearChanged();
				}
			}
		}
		
		[Column(Storage="_produceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> produceDate
		{
			get
			{
				return this._produceDate;
			}
			set
			{
				if ((this._produceDate != value))
				{
					this.OnproduceDateChanging(value);
					this.SendPropertyChanging();
					this._produceDate = value;
					this.SendPropertyChanged("produceDate");
					this.OnproduceDateChanged();
				}
			}
		}
		
		[Column(Storage="_factoryNo", DbType="VarChar(50)")]
		public string factoryNo
		{
			get
			{
				return this._factoryNo;
			}
			set
			{
				if ((this._factoryNo != value))
				{
					this.OnfactoryNoChanging(value);
					this.SendPropertyChanging();
					this._factoryNo = value;
					this.SendPropertyChanged("factoryNo");
					this.OnfactoryNoChanged();
				}
			}
		}
		
		[Column(Storage="_contactMethod", DbType="VarChar(50)")]
		public string contactMethod
		{
			get
			{
				return this._contactMethod;
			}
			set
			{
				if ((this._contactMethod != value))
				{
					this.OncontactMethodChanging(value);
					this.SendPropertyChanging();
					this._contactMethod = value;
					this.SendPropertyChanged("contactMethod");
					this.OncontactMethodChanged();
				}
			}
		}
		
		[Column(Storage="_factoryAddress", DbType="VarChar(50)")]
		public string factoryAddress
		{
			get
			{
				return this._factoryAddress;
			}
			set
			{
				if ((this._factoryAddress != value))
				{
					this.OnfactoryAddressChanging(value);
					this.SendPropertyChanging();
					this._factoryAddress = value;
					this.SendPropertyChanged("factoryAddress");
					this.OnfactoryAddressChanged();
				}
			}
		}
		
		[Column(Storage="_postCode", DbType="VarChar(50)")]
		public string postCode
		{
			get
			{
				return this._postCode;
			}
			set
			{
				if ((this._postCode != value))
				{
					this.OnpostCodeChanging(value);
					this.SendPropertyChanging();
					this._postCode = value;
					this.SendPropertyChanged("postCode");
					this.OnpostCodeChanged();
				}
			}
		}
		
		[Column(Storage="_workMan", DbType="VarChar(50)")]
		public string workMan
		{
			get
			{
				return this._workMan;
			}
			set
			{
				if ((this._workMan != value))
				{
					this.OnworkManChanging(value);
					this.SendPropertyChanging();
					this._workMan = value;
					this.SendPropertyChanged("workMan");
					this.OnworkManChanged();
				}
			}
		}
		
		[Column(Storage="_diameter", DbType="Float")]
		public System.Nullable<double> diameter
		{
			get
			{
				return this._diameter;
			}
			set
			{
				if ((this._diameter != value))
				{
					this.OndiameterChanging(value);
					this.SendPropertyChanging();
					this._diameter = value;
					this.SendPropertyChanged("diameter");
					this.OndiameterChanged();
				}
			}
		}
		
		[Column(Storage="_height", DbType="Float")]
		public System.Nullable<double> height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[Column(Storage="_beginUseTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> beginUseTime
		{
			get
			{
				return this._beginUseTime;
			}
			set
			{
				if ((this._beginUseTime != value))
				{
					this.OnbeginUseTimeChanging(value);
					this.SendPropertyChanging();
					this._beginUseTime = value;
					this.SendPropertyChanged("beginUseTime");
					this.OnbeginUseTimeChanged();
				}
			}
		}
		
		[Column(Storage="_contactMan", DbType="VarChar(50)")]
		public string contactMan
		{
			get
			{
				return this._contactMan;
			}
			set
			{
				if ((this._contactMan != value))
				{
					this.OncontactManChanging(value);
					this.SendPropertyChanging();
					this._contactMan = value;
					this.SendPropertyChanged("contactMan");
					this.OncontactManChanged();
				}
			}
		}
		
		[Column(Storage="_producer", DbType="VarChar(50)")]
		public string producer
		{
			get
			{
				return this._producer;
			}
			set
			{
				if ((this._producer != value))
				{
					this.OnproducerChanging(value);
					this.SendPropertyChanging();
					this._producer = value;
					this.SendPropertyChanged("producer");
					this.OnproducerChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_dId2", DbType="BigInt")]
		public System.Nullable<long> dId2
		{
			get
			{
				return this._dId2;
			}
			set
			{
				if ((this._dId2 != value))
				{
					this.OndId2Changing(value);
					this.SendPropertyChanging();
					this._dId2 = value;
					this.SendPropertyChanged("dId2");
					this.OndId2Changed();
				}
			}
		}
		
		[Column(Storage="_kind", DbType="VarChar(50)")]
		public string kind
		{
			get
			{
				return this._kind;
			}
			set
			{
				if ((this._kind != value))
				{
					this.OnkindChanging(value);
					this.SendPropertyChanging();
					this._kind = value;
					this.SendPropertyChanged("kind");
					this.OnkindChanged();
				}
			}
		}
		
		[Column(Storage="_proportionError", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> proportionError
		{
			get
			{
				return this._proportionError;
			}
			set
			{
				if ((this._proportionError != value))
				{
					this.OnproportionErrorChanging(value);
					this.SendPropertyChanging();
					this._proportionError = value;
					this.SendPropertyChanged("proportionError");
					this.OnproportionErrorChanged();
				}
			}
		}
		
		[Column(Storage="_totalMaterialWeight", DbType="Decimal(14,2)")]
		public System.Nullable<decimal> totalMaterialWeight
		{
			get
			{
				return this._totalMaterialWeight;
			}
			set
			{
				if ((this._totalMaterialWeight != value))
				{
					this.OntotalMaterialWeightChanging(value);
					this.SendPropertyChanging();
					this._totalMaterialWeight = value;
					this.SendPropertyChanged("totalMaterialWeight");
					this.OntotalMaterialWeightChanged();
				}
			}
		}
		
		[Column(Storage="_mark", DbType="VarChar(50)")]
		public string mark
		{
			get
			{
				return this._mark;
			}
			set
			{
				if ((this._mark != value))
				{
					this.OnmarkChanging(value);
					this.SendPropertyChanging();
					this._mark = value;
					this.SendPropertyChanged("mark");
					this.OnmarkChanged();
				}
			}
		}
		
		[Association(Name="EquipmentInformation_LiquidMatterStockList", Storage="_LiquidMatterStockList", ThisKey="id", OtherKey="eiId")]
		public EntitySet<LiquidMatterStockList> LiquidMatterStockList
		{
			get
			{
				return this._LiquidMatterStockList;
			}
			set
			{
				this._LiquidMatterStockList.Assign(value);
			}
		}
		
		[Association(Name="EquipmentInformation_ProduceMeasureMonitor", Storage="_ProduceMeasureMonitor", ThisKey="id", OtherKey="eiId")]
		public EntitySet<ProduceMeasureMonitor> ProduceMeasureMonitor
		{
			get
			{
				return this._ProduceMeasureMonitor;
			}
			set
			{
				this._ProduceMeasureMonitor.Assign(value);
			}
		}
		
		[Association(Name="EquipmentInformation_EmulsificationGatherProduceLog", Storage="_EmulsificationGatherProduceLog", ThisKey="id", OtherKey="eiId")]
		public EntitySet<EmulsificationGatherProduceLog> EmulsificationGatherProduceLog
		{
			get
			{
				return this._EmulsificationGatherProduceLog;
			}
			set
			{
				this._EmulsificationGatherProduceLog.Assign(value);
			}
		}
		
		[Association(Name="EquipmentInformation_deepFatConsumeDailyStatisticsDetail", Storage="_DeepFatConsumeDailyStatisticsDetail", ThisKey="id", OtherKey="eiId")]
		public EntitySet<DeepFatConsumeDailyStatisticsDetail> DeepFatConsumeDailyStatisticsDetail
		{
			get
			{
				return this._DeepFatConsumeDailyStatisticsDetail;
			}
			set
			{
				this._DeepFatConsumeDailyStatisticsDetail.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LiquidMatterStockList(LiquidMatterStockList entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = this;
		}
		
		private void detach_LiquidMatterStockList(LiquidMatterStockList entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = null;
		}
		
		private void attach_ProduceMeasureMonitor(ProduceMeasureMonitor entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = this;
		}
		
		private void detach_ProduceMeasureMonitor(ProduceMeasureMonitor entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = null;
		}
		
		private void attach_EmulsificationGatherProduceLog(EmulsificationGatherProduceLog entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = this;
		}
		
		private void detach_EmulsificationGatherProduceLog(EmulsificationGatherProduceLog entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = null;
		}
		
		private void attach_DeepFatConsumeDailyStatisticsDetail(DeepFatConsumeDailyStatisticsDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = this;
		}
		
		private void detach_DeepFatConsumeDailyStatisticsDetail(DeepFatConsumeDailyStatisticsDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentInformation = null;
		}
	}
	
	[Table(Name="dbo.flowmeterNo")]
	public partial class FlowmeterNo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _no;
		
		private string _name;
		
		private string _position;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private string _remark;
		
		private EntitySet<FlowmeterHistory> _FlowmeterHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    #endregion
		
		public FlowmeterNo()
		{
			this._FlowmeterHistory = new EntitySet<FlowmeterHistory>(new Action<FlowmeterHistory>(this.attach_FlowmeterHistory), new Action<FlowmeterHistory>(this.detach_FlowmeterHistory));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_no", DbType="VarChar(50)")]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="VarChar(50)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Association(Name="FlowmeterNo_flowmeterHistory", Storage="_FlowmeterHistory", ThisKey="id", OtherKey="fnId")]
		public EntitySet<FlowmeterHistory> FlowmeterHistory
		{
			get
			{
				return this._FlowmeterHistory;
			}
			set
			{
				this._FlowmeterHistory.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlowmeterHistory(FlowmeterHistory entity)
		{
			this.SendPropertyChanging();
			entity.FlowmeterNo = this;
		}
		
		private void detach_FlowmeterHistory(FlowmeterHistory entity)
		{
			this.SendPropertyChanging();
			entity.FlowmeterNo = null;
		}
	}
	
	[Table(Name="dbo.temperatureNo")]
	public partial class TemperatureNo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _no;
		
		private string _name;
		
		private string _position;
		
		private string _remark;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private System.Nullable<decimal> _minTemperature;
		
		private System.Nullable<decimal> _maxTemperature;
		
		private EntitySet<TemperatureHistory> _TemperatureHistory;
		
		private EntitySet<LiquidMatterStockList> _LiquidMatterStockList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnminTemperatureChanging(System.Nullable<decimal> value);
    partial void OnminTemperatureChanged();
    partial void OnmaxTemperatureChanging(System.Nullable<decimal> value);
    partial void OnmaxTemperatureChanged();
    #endregion
		
		public TemperatureNo()
		{
			this._TemperatureHistory = new EntitySet<TemperatureHistory>(new Action<TemperatureHistory>(this.attach_TemperatureHistory), new Action<TemperatureHistory>(this.detach_TemperatureHistory));
			this._LiquidMatterStockList = new EntitySet<LiquidMatterStockList>(new Action<LiquidMatterStockList>(this.attach_LiquidMatterStockList), new Action<LiquidMatterStockList>(this.detach_LiquidMatterStockList));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_no", DbType="VarChar(50)")]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="VarChar(200)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_minTemperature", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> minTemperature
		{
			get
			{
				return this._minTemperature;
			}
			set
			{
				if ((this._minTemperature != value))
				{
					this.OnminTemperatureChanging(value);
					this.SendPropertyChanging();
					this._minTemperature = value;
					this.SendPropertyChanged("minTemperature");
					this.OnminTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_maxTemperature", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> maxTemperature
		{
			get
			{
				return this._maxTemperature;
			}
			set
			{
				if ((this._maxTemperature != value))
				{
					this.OnmaxTemperatureChanging(value);
					this.SendPropertyChanging();
					this._maxTemperature = value;
					this.SendPropertyChanged("maxTemperature");
					this.OnmaxTemperatureChanged();
				}
			}
		}
		
		[Association(Name="TemperatureNo_TemperatureHistory", Storage="_TemperatureHistory", ThisKey="id", OtherKey="tId")]
		public EntitySet<TemperatureHistory> TemperatureHistory
		{
			get
			{
				return this._TemperatureHistory;
			}
			set
			{
				this._TemperatureHistory.Assign(value);
			}
		}
		
		[Association(Name="TemperatureNo_LiquidMatterStockList", Storage="_LiquidMatterStockList", ThisKey="id", OtherKey="tnId")]
		public EntitySet<LiquidMatterStockList> LiquidMatterStockList
		{
			get
			{
				return this._LiquidMatterStockList;
			}
			set
			{
				this._LiquidMatterStockList.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TemperatureHistory(TemperatureHistory entity)
		{
			this.SendPropertyChanging();
			entity.TemperatureNo = this;
		}
		
		private void detach_TemperatureHistory(TemperatureHistory entity)
		{
			this.SendPropertyChanging();
			entity.TemperatureNo = null;
		}
		
		private void attach_LiquidMatterStockList(LiquidMatterStockList entity)
		{
			this.SendPropertyChanging();
			entity.TemperatureNo = this;
		}
		
		private void detach_LiquidMatterStockList(LiquidMatterStockList entity)
		{
			this.SendPropertyChanging();
			entity.TemperatureNo = null;
		}
	}
	
	[Table(Name="dbo.temperatureHistory")]
	public partial class TemperatureHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<long> _tId;
		
		private System.Nullable<decimal> _value;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private string _remark;
		
		private System.Nullable<decimal> _minTemperature;
		
		private System.Nullable<decimal> _maxTemperature;
		
		private EntityRef<TemperatureNo> _TemperatureNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OntIdChanging(System.Nullable<long> value);
    partial void OntIdChanged();
    partial void OnvalueChanging(System.Nullable<decimal> value);
    partial void OnvalueChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnminTemperatureChanging(System.Nullable<decimal> value);
    partial void OnminTemperatureChanged();
    partial void OnmaxTemperatureChanging(System.Nullable<decimal> value);
    partial void OnmaxTemperatureChanged();
    #endregion
		
		public TemperatureHistory()
		{
			this._TemperatureNo = default(EntityRef<TemperatureNo>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_tId", DbType="BigInt")]
		public System.Nullable<long> tId
		{
			get
			{
				return this._tId;
			}
			set
			{
				if ((this._tId != value))
				{
					if (this._TemperatureNo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntIdChanging(value);
					this.SendPropertyChanging();
					this._tId = value;
					this.SendPropertyChanged("tId");
					this.OntIdChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_minTemperature", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> minTemperature
		{
			get
			{
				return this._minTemperature;
			}
			set
			{
				if ((this._minTemperature != value))
				{
					this.OnminTemperatureChanging(value);
					this.SendPropertyChanging();
					this._minTemperature = value;
					this.SendPropertyChanged("minTemperature");
					this.OnminTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_maxTemperature", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> maxTemperature
		{
			get
			{
				return this._maxTemperature;
			}
			set
			{
				if ((this._maxTemperature != value))
				{
					this.OnmaxTemperatureChanging(value);
					this.SendPropertyChanging();
					this._maxTemperature = value;
					this.SendPropertyChanged("maxTemperature");
					this.OnmaxTemperatureChanged();
				}
			}
		}
		
		[Association(Name="TemperatureNo_TemperatureHistory", Storage="_TemperatureNo", ThisKey="tId", OtherKey="id", IsForeignKey=true)]
		public TemperatureNo TemperatureNo
		{
			get
			{
				return this._TemperatureNo.Entity;
			}
			set
			{
				TemperatureNo previousValue = this._TemperatureNo.Entity;
				if (((previousValue != value) 
							|| (this._TemperatureNo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemperatureNo.Entity = null;
						previousValue.TemperatureHistory.Remove(this);
					}
					this._TemperatureNo.Entity = value;
					if ((value != null))
					{
						value.TemperatureHistory.Add(this);
						this._tId = value.id;
					}
					else
					{
						this._tId = default(Nullable<long>);
					}
					this.SendPropertyChanged("TemperatureNo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.liquidMatterStockList")]
	public partial class LiquidMatterStockList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _eiId;
		
		private System.Nullable<long> _pId;
		
		private System.Nullable<long> _mId;
		
		private string _remark;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private System.Nullable<long> _lpnId;
		
		private string _updateDate;
		
		private string _updateMan;
		
		private System.Nullable<long> _tnId;
		
		private EntityRef<EquipmentInformation> _EquipmentInformation;
		
		private EntityRef<TemperatureNo> _TemperatureNo;
		
		private EntityRef<LiquidPositionNo> _LiquidPositionNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OneiIdChanging(System.Nullable<long> value);
    partial void OneiIdChanged();
    partial void OnpIdChanging(System.Nullable<long> value);
    partial void OnpIdChanged();
    partial void OnmIdChanging(System.Nullable<long> value);
    partial void OnmIdChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnlpnIdChanging(System.Nullable<long> value);
    partial void OnlpnIdChanged();
    partial void OnupdateDateChanging(string value);
    partial void OnupdateDateChanged();
    partial void OnupdateManChanging(string value);
    partial void OnupdateManChanged();
    partial void OntnIdChanging(System.Nullable<long> value);
    partial void OntnIdChanged();
    #endregion
		
		public LiquidMatterStockList()
		{
			this._EquipmentInformation = default(EntityRef<EquipmentInformation>);
			this._TemperatureNo = default(EntityRef<TemperatureNo>);
			this._LiquidPositionNo = default(EntityRef<LiquidPositionNo>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_eiId", DbType="BigInt")]
		public System.Nullable<long> eiId
		{
			get
			{
				return this._eiId;
			}
			set
			{
				if ((this._eiId != value))
				{
					if (this._EquipmentInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneiIdChanging(value);
					this.SendPropertyChanging();
					this._eiId = value;
					this.SendPropertyChanged("eiId");
					this.OneiIdChanged();
				}
			}
		}
		
		[Column(Storage="_pId", DbType="BigInt")]
		public System.Nullable<long> pId
		{
			get
			{
				return this._pId;
			}
			set
			{
				if ((this._pId != value))
				{
					this.OnpIdChanging(value);
					this.SendPropertyChanging();
					this._pId = value;
					this.SendPropertyChanged("pId");
					this.OnpIdChanged();
				}
			}
		}
		
		[Column(Storage="_mId", DbType="BigInt")]
		public System.Nullable<long> mId
		{
			get
			{
				return this._mId;
			}
			set
			{
				if ((this._mId != value))
				{
					this.OnmIdChanging(value);
					this.SendPropertyChanging();
					this._mId = value;
					this.SendPropertyChanged("mId");
					this.OnmIdChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_lpnId", DbType="BigInt")]
		public System.Nullable<long> lpnId
		{
			get
			{
				return this._lpnId;
			}
			set
			{
				if ((this._lpnId != value))
				{
					if (this._LiquidPositionNo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlpnIdChanging(value);
					this.SendPropertyChanging();
					this._lpnId = value;
					this.SendPropertyChanged("lpnId");
					this.OnlpnIdChanged();
				}
			}
		}
		
		[Column(Storage="_updateDate", DbType="VarChar(50)")]
		public string updateDate
		{
			get
			{
				return this._updateDate;
			}
			set
			{
				if ((this._updateDate != value))
				{
					this.OnupdateDateChanging(value);
					this.SendPropertyChanging();
					this._updateDate = value;
					this.SendPropertyChanged("updateDate");
					this.OnupdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_updateMan", DbType="VarChar(50)")]
		public string updateMan
		{
			get
			{
				return this._updateMan;
			}
			set
			{
				if ((this._updateMan != value))
				{
					this.OnupdateManChanging(value);
					this.SendPropertyChanging();
					this._updateMan = value;
					this.SendPropertyChanged("updateMan");
					this.OnupdateManChanged();
				}
			}
		}
		
		[Column(Storage="_tnId", DbType="BigInt")]
		public System.Nullable<long> tnId
		{
			get
			{
				return this._tnId;
			}
			set
			{
				if ((this._tnId != value))
				{
					if (this._TemperatureNo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntnIdChanging(value);
					this.SendPropertyChanging();
					this._tnId = value;
					this.SendPropertyChanged("tnId");
					this.OntnIdChanged();
				}
			}
		}
		
		[Association(Name="EquipmentInformation_LiquidMatterStockList", Storage="_EquipmentInformation", ThisKey="eiId", OtherKey="id", IsForeignKey=true)]
		public EquipmentInformation EquipmentInformation
		{
			get
			{
				return this._EquipmentInformation.Entity;
			}
			set
			{
				EquipmentInformation previousValue = this._EquipmentInformation.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentInformation.Entity = null;
						previousValue.LiquidMatterStockList.Remove(this);
					}
					this._EquipmentInformation.Entity = value;
					if ((value != null))
					{
						value.LiquidMatterStockList.Add(this);
						this._eiId = value.id;
					}
					else
					{
						this._eiId = default(Nullable<long>);
					}
					this.SendPropertyChanged("EquipmentInformation");
				}
			}
		}
		
		[Association(Name="TemperatureNo_LiquidMatterStockList", Storage="_TemperatureNo", ThisKey="tnId", OtherKey="id", IsForeignKey=true)]
		public TemperatureNo TemperatureNo
		{
			get
			{
				return this._TemperatureNo.Entity;
			}
			set
			{
				TemperatureNo previousValue = this._TemperatureNo.Entity;
				if (((previousValue != value) 
							|| (this._TemperatureNo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemperatureNo.Entity = null;
						previousValue.LiquidMatterStockList.Remove(this);
					}
					this._TemperatureNo.Entity = value;
					if ((value != null))
					{
						value.LiquidMatterStockList.Add(this);
						this._tnId = value.id;
					}
					else
					{
						this._tnId = default(Nullable<long>);
					}
					this.SendPropertyChanged("TemperatureNo");
				}
			}
		}
		
		[Association(Name="LiquidPositionNo_LiquidMatterStockList", Storage="_LiquidPositionNo", ThisKey="lpnId", OtherKey="id", IsForeignKey=true)]
		public LiquidPositionNo LiquidPositionNo
		{
			get
			{
				return this._LiquidPositionNo.Entity;
			}
			set
			{
				LiquidPositionNo previousValue = this._LiquidPositionNo.Entity;
				if (((previousValue != value) 
							|| (this._LiquidPositionNo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiquidPositionNo.Entity = null;
						previousValue.LiquidMatterStockList.Remove(this);
					}
					this._LiquidPositionNo.Entity = value;
					if ((value != null))
					{
						value.LiquidMatterStockList.Add(this);
						this._lpnId = value.id;
					}
					else
					{
						this._lpnId = default(Nullable<long>);
					}
					this.SendPropertyChanged("LiquidPositionNo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.liquidPositionNo")]
	public partial class LiquidPositionNo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _no;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _inputMan;
		
		private string _remark;
		
		private System.Nullable<decimal> _minValue;
		
		private System.Nullable<decimal> _maxValue;
		
		private string _position;
		
		private EntitySet<LiquidMatterStockList> _LiquidMatterStockList;
		
		private EntitySet<LiquidPositionHistory> _LiquidPositionHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnminValueChanging(System.Nullable<decimal> value);
    partial void OnminValueChanged();
    partial void OnmaxValueChanging(System.Nullable<decimal> value);
    partial void OnmaxValueChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    #endregion
		
		public LiquidPositionNo()
		{
			this._LiquidMatterStockList = new EntitySet<LiquidMatterStockList>(new Action<LiquidMatterStockList>(this.attach_LiquidMatterStockList), new Action<LiquidMatterStockList>(this.detach_LiquidMatterStockList));
			this._LiquidPositionHistory = new EntitySet<LiquidPositionHistory>(new Action<LiquidPositionHistory>(this.attach_LiquidPositionHistory), new Action<LiquidPositionHistory>(this.detach_LiquidPositionHistory));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_no", DbType="VarChar(50)")]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_minValue", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> minValue
		{
			get
			{
				return this._minValue;
			}
			set
			{
				if ((this._minValue != value))
				{
					this.OnminValueChanging(value);
					this.SendPropertyChanging();
					this._minValue = value;
					this.SendPropertyChanged("minValue");
					this.OnminValueChanged();
				}
			}
		}
		
		[Column(Storage="_maxValue", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> maxValue
		{
			get
			{
				return this._maxValue;
			}
			set
			{
				if ((this._maxValue != value))
				{
					this.OnmaxValueChanging(value);
					this.SendPropertyChanging();
					this._maxValue = value;
					this.SendPropertyChanged("maxValue");
					this.OnmaxValueChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="VarChar(50)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Association(Name="LiquidPositionNo_LiquidMatterStockList", Storage="_LiquidMatterStockList", ThisKey="id", OtherKey="lpnId")]
		public EntitySet<LiquidMatterStockList> LiquidMatterStockList
		{
			get
			{
				return this._LiquidMatterStockList;
			}
			set
			{
				this._LiquidMatterStockList.Assign(value);
			}
		}
		
		[Association(Name="LiquidPositionNo_LiquidPositionHistory", Storage="_LiquidPositionHistory", ThisKey="id", OtherKey="lpnId")]
		public EntitySet<LiquidPositionHistory> LiquidPositionHistory
		{
			get
			{
				return this._LiquidPositionHistory;
			}
			set
			{
				this._LiquidPositionHistory.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LiquidMatterStockList(LiquidMatterStockList entity)
		{
			this.SendPropertyChanging();
			entity.LiquidPositionNo = this;
		}
		
		private void detach_LiquidMatterStockList(LiquidMatterStockList entity)
		{
			this.SendPropertyChanging();
			entity.LiquidPositionNo = null;
		}
		
		private void attach_LiquidPositionHistory(LiquidPositionHistory entity)
		{
			this.SendPropertyChanging();
			entity.LiquidPositionNo = this;
		}
		
		private void detach_LiquidPositionHistory(LiquidPositionHistory entity)
		{
			this.SendPropertyChanging();
			entity.LiquidPositionNo = null;
		}
	}
	
	[Table(Name="dbo.liquidPositionHistory")]
	public partial class LiquidPositionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _lpnId;
		
		private System.Nullable<decimal> _value;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _inputMan;
		
		private EntityRef<LiquidPositionNo> _LiquidPositionNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnlpnIdChanging(System.Nullable<long> value);
    partial void OnlpnIdChanged();
    partial void OnvalueChanging(System.Nullable<decimal> value);
    partial void OnvalueChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    #endregion
		
		public LiquidPositionHistory()
		{
			this._LiquidPositionNo = default(EntityRef<LiquidPositionNo>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_lpnId", DbType="BigInt")]
		public System.Nullable<long> lpnId
		{
			get
			{
				return this._lpnId;
			}
			set
			{
				if ((this._lpnId != value))
				{
					if (this._LiquidPositionNo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlpnIdChanging(value);
					this.SendPropertyChanging();
					this._lpnId = value;
					this.SendPropertyChanged("lpnId");
					this.OnlpnIdChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Association(Name="LiquidPositionNo_LiquidPositionHistory", Storage="_LiquidPositionNo", ThisKey="lpnId", OtherKey="id", IsForeignKey=true)]
		public LiquidPositionNo LiquidPositionNo
		{
			get
			{
				return this._LiquidPositionNo.Entity;
			}
			set
			{
				LiquidPositionNo previousValue = this._LiquidPositionNo.Entity;
				if (((previousValue != value) 
							|| (this._LiquidPositionNo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiquidPositionNo.Entity = null;
						previousValue.LiquidPositionHistory.Remove(this);
					}
					this._LiquidPositionNo.Entity = value;
					if ((value != null))
					{
						value.LiquidPositionHistory.Add(this);
						this._lpnId = value.id;
					}
					else
					{
						this._lpnId = default(Nullable<long>);
					}
					this.SendPropertyChanged("LiquidPositionNo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.produceMeasureMonitor")]
	public partial class ProduceMeasureMonitor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _ppId;
		
		private System.Nullable<double> _realMaterialWeight1;
		
		private System.Nullable<double> _realMaterialWeight2;
		
		private System.Nullable<double> _realMaterialWeight3;
		
		private System.Nullable<double> _realMaterialWeight4;
		
		private System.Nullable<double> _realMaterialWeight5;
		
		private System.Nullable<double> _realMaterialWeight6;
		
		private System.Nullable<double> _asphaltumWeight;
		
		private System.Nullable<double> _stuffingWeight;
		
		private System.Nullable<double> _blockWeight;
		
		private System.Nullable<bool> _result;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private System.Nullable<bool> _asphaltumMark;
		
		private System.Nullable<bool> _stoneMark;
		
		private string _inputMan;
		
		private string _remark;
		
		private System.Nullable<long> _pnId;
		
		private System.Nullable<decimal> _sumWeight;
		
		private System.Nullable<bool> _temperatureMark;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<long> _pmpId;
		
		private System.Nullable<long> _eiId;
		
		private System.Nullable<decimal> _temperature;
		
		private EntityRef<EquipmentInformation> _EquipmentInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnppIdChanging(System.Nullable<long> value);
    partial void OnppIdChanged();
    partial void OnrealMaterialWeight1Changing(System.Nullable<double> value);
    partial void OnrealMaterialWeight1Changed();
    partial void OnrealMaterialWeight2Changing(System.Nullable<double> value);
    partial void OnrealMaterialWeight2Changed();
    partial void OnrealMaterialWeight3Changing(System.Nullable<double> value);
    partial void OnrealMaterialWeight3Changed();
    partial void OnrealMaterialWeight4Changing(System.Nullable<double> value);
    partial void OnrealMaterialWeight4Changed();
    partial void OnrealMaterialWeight5Changing(System.Nullable<double> value);
    partial void OnrealMaterialWeight5Changed();
    partial void OnrealMaterialWeight6Changing(System.Nullable<double> value);
    partial void OnrealMaterialWeight6Changed();
    partial void OnasphaltumWeightChanging(System.Nullable<double> value);
    partial void OnasphaltumWeightChanged();
    partial void OnstuffingWeightChanging(System.Nullable<double> value);
    partial void OnstuffingWeightChanged();
    partial void OnblockWeightChanging(System.Nullable<double> value);
    partial void OnblockWeightChanged();
    partial void OnresultChanging(System.Nullable<bool> value);
    partial void OnresultChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OnasphaltumMarkChanging(System.Nullable<bool> value);
    partial void OnasphaltumMarkChanged();
    partial void OnstoneMarkChanging(System.Nullable<bool> value);
    partial void OnstoneMarkChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnpnIdChanging(System.Nullable<long> value);
    partial void OnpnIdChanged();
    partial void OnsumWeightChanging(System.Nullable<decimal> value);
    partial void OnsumWeightChanged();
    partial void OntemperatureMarkChanging(System.Nullable<bool> value);
    partial void OntemperatureMarkChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnpmpIdChanging(System.Nullable<long> value);
    partial void OnpmpIdChanged();
    partial void OneiIdChanging(System.Nullable<long> value);
    partial void OneiIdChanged();
    partial void OntemperatureChanging(System.Nullable<decimal> value);
    partial void OntemperatureChanged();
    #endregion
		
		public ProduceMeasureMonitor()
		{
			this._EquipmentInformation = default(EntityRef<EquipmentInformation>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_ppId", DbType="BigInt")]
		public System.Nullable<long> ppId
		{
			get
			{
				return this._ppId;
			}
			set
			{
				if ((this._ppId != value))
				{
					this.OnppIdChanging(value);
					this.SendPropertyChanging();
					this._ppId = value;
					this.SendPropertyChanged("ppId");
					this.OnppIdChanged();
				}
			}
		}
		
		[Column(Storage="_realMaterialWeight1", DbType="Float")]
		public System.Nullable<double> realMaterialWeight1
		{
			get
			{
				return this._realMaterialWeight1;
			}
			set
			{
				if ((this._realMaterialWeight1 != value))
				{
					this.OnrealMaterialWeight1Changing(value);
					this.SendPropertyChanging();
					this._realMaterialWeight1 = value;
					this.SendPropertyChanged("realMaterialWeight1");
					this.OnrealMaterialWeight1Changed();
				}
			}
		}
		
		[Column(Storage="_realMaterialWeight2", DbType="Float")]
		public System.Nullable<double> realMaterialWeight2
		{
			get
			{
				return this._realMaterialWeight2;
			}
			set
			{
				if ((this._realMaterialWeight2 != value))
				{
					this.OnrealMaterialWeight2Changing(value);
					this.SendPropertyChanging();
					this._realMaterialWeight2 = value;
					this.SendPropertyChanged("realMaterialWeight2");
					this.OnrealMaterialWeight2Changed();
				}
			}
		}
		
		[Column(Storage="_realMaterialWeight3", DbType="Float")]
		public System.Nullable<double> realMaterialWeight3
		{
			get
			{
				return this._realMaterialWeight3;
			}
			set
			{
				if ((this._realMaterialWeight3 != value))
				{
					this.OnrealMaterialWeight3Changing(value);
					this.SendPropertyChanging();
					this._realMaterialWeight3 = value;
					this.SendPropertyChanged("realMaterialWeight3");
					this.OnrealMaterialWeight3Changed();
				}
			}
		}
		
		[Column(Storage="_realMaterialWeight4", DbType="Float")]
		public System.Nullable<double> realMaterialWeight4
		{
			get
			{
				return this._realMaterialWeight4;
			}
			set
			{
				if ((this._realMaterialWeight4 != value))
				{
					this.OnrealMaterialWeight4Changing(value);
					this.SendPropertyChanging();
					this._realMaterialWeight4 = value;
					this.SendPropertyChanged("realMaterialWeight4");
					this.OnrealMaterialWeight4Changed();
				}
			}
		}
		
		[Column(Storage="_realMaterialWeight5", DbType="Float")]
		public System.Nullable<double> realMaterialWeight5
		{
			get
			{
				return this._realMaterialWeight5;
			}
			set
			{
				if ((this._realMaterialWeight5 != value))
				{
					this.OnrealMaterialWeight5Changing(value);
					this.SendPropertyChanging();
					this._realMaterialWeight5 = value;
					this.SendPropertyChanged("realMaterialWeight5");
					this.OnrealMaterialWeight5Changed();
				}
			}
		}
		
		[Column(Storage="_realMaterialWeight6", DbType="Float")]
		public System.Nullable<double> realMaterialWeight6
		{
			get
			{
				return this._realMaterialWeight6;
			}
			set
			{
				if ((this._realMaterialWeight6 != value))
				{
					this.OnrealMaterialWeight6Changing(value);
					this.SendPropertyChanging();
					this._realMaterialWeight6 = value;
					this.SendPropertyChanged("realMaterialWeight6");
					this.OnrealMaterialWeight6Changed();
				}
			}
		}
		
		[Column(Storage="_asphaltumWeight", DbType="Float")]
		public System.Nullable<double> asphaltumWeight
		{
			get
			{
				return this._asphaltumWeight;
			}
			set
			{
				if ((this._asphaltumWeight != value))
				{
					this.OnasphaltumWeightChanging(value);
					this.SendPropertyChanging();
					this._asphaltumWeight = value;
					this.SendPropertyChanged("asphaltumWeight");
					this.OnasphaltumWeightChanged();
				}
			}
		}
		
		[Column(Storage="_stuffingWeight", DbType="Float")]
		public System.Nullable<double> stuffingWeight
		{
			get
			{
				return this._stuffingWeight;
			}
			set
			{
				if ((this._stuffingWeight != value))
				{
					this.OnstuffingWeightChanging(value);
					this.SendPropertyChanging();
					this._stuffingWeight = value;
					this.SendPropertyChanged("stuffingWeight");
					this.OnstuffingWeightChanged();
				}
			}
		}
		
		[Column(Storage="_blockWeight", DbType="Float")]
		public System.Nullable<double> blockWeight
		{
			get
			{
				return this._blockWeight;
			}
			set
			{
				if ((this._blockWeight != value))
				{
					this.OnblockWeightChanging(value);
					this.SendPropertyChanging();
					this._blockWeight = value;
					this.SendPropertyChanged("blockWeight");
					this.OnblockWeightChanged();
				}
			}
		}
		
		[Column(Storage="_result", DbType="Bit")]
		public System.Nullable<bool> result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_asphaltumMark", DbType="Bit")]
		public System.Nullable<bool> asphaltumMark
		{
			get
			{
				return this._asphaltumMark;
			}
			set
			{
				if ((this._asphaltumMark != value))
				{
					this.OnasphaltumMarkChanging(value);
					this.SendPropertyChanging();
					this._asphaltumMark = value;
					this.SendPropertyChanged("asphaltumMark");
					this.OnasphaltumMarkChanged();
				}
			}
		}
		
		[Column(Storage="_stoneMark", DbType="Bit")]
		public System.Nullable<bool> stoneMark
		{
			get
			{
				return this._stoneMark;
			}
			set
			{
				if ((this._stoneMark != value))
				{
					this.OnstoneMarkChanging(value);
					this.SendPropertyChanging();
					this._stoneMark = value;
					this.SendPropertyChanged("stoneMark");
					this.OnstoneMarkChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_pnId", DbType="BigInt")]
		public System.Nullable<long> pnId
		{
			get
			{
				return this._pnId;
			}
			set
			{
				if ((this._pnId != value))
				{
					this.OnpnIdChanging(value);
					this.SendPropertyChanging();
					this._pnId = value;
					this.SendPropertyChanged("pnId");
					this.OnpnIdChanged();
				}
			}
		}
		
		[Column(Storage="_sumWeight", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> sumWeight
		{
			get
			{
				return this._sumWeight;
			}
			set
			{
				if ((this._sumWeight != value))
				{
					this.OnsumWeightChanging(value);
					this.SendPropertyChanging();
					this._sumWeight = value;
					this.SendPropertyChanged("sumWeight");
					this.OnsumWeightChanged();
				}
			}
		}
		
		[Column(Storage="_temperatureMark", DbType="Bit")]
		public System.Nullable<bool> temperatureMark
		{
			get
			{
				return this._temperatureMark;
			}
			set
			{
				if ((this._temperatureMark != value))
				{
					this.OntemperatureMarkChanging(value);
					this.SendPropertyChanging();
					this._temperatureMark = value;
					this.SendPropertyChanged("temperatureMark");
					this.OntemperatureMarkChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_pmpId", DbType="BigInt")]
		public System.Nullable<long> pmpId
		{
			get
			{
				return this._pmpId;
			}
			set
			{
				if ((this._pmpId != value))
				{
					this.OnpmpIdChanging(value);
					this.SendPropertyChanging();
					this._pmpId = value;
					this.SendPropertyChanged("pmpId");
					this.OnpmpIdChanged();
				}
			}
		}
		
		[Column(Storage="_eiId", DbType="BigInt")]
		public System.Nullable<long> eiId
		{
			get
			{
				return this._eiId;
			}
			set
			{
				if ((this._eiId != value))
				{
					if (this._EquipmentInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneiIdChanging(value);
					this.SendPropertyChanging();
					this._eiId = value;
					this.SendPropertyChanged("eiId");
					this.OneiIdChanged();
				}
			}
		}
		
		[Column(Storage="_temperature", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> temperature
		{
			get
			{
				return this._temperature;
			}
			set
			{
				if ((this._temperature != value))
				{
					this.OntemperatureChanging(value);
					this.SendPropertyChanging();
					this._temperature = value;
					this.SendPropertyChanged("temperature");
					this.OntemperatureChanged();
				}
			}
		}
		
		[Association(Name="EquipmentInformation_ProduceMeasureMonitor", Storage="_EquipmentInformation", ThisKey="eiId", OtherKey="id", IsForeignKey=true)]
		public EquipmentInformation EquipmentInformation
		{
			get
			{
				return this._EquipmentInformation.Entity;
			}
			set
			{
				EquipmentInformation previousValue = this._EquipmentInformation.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentInformation.Entity = null;
						previousValue.ProduceMeasureMonitor.Remove(this);
					}
					this._EquipmentInformation.Entity = value;
					if ((value != null))
					{
						value.ProduceMeasureMonitor.Add(this);
						this._eiId = value.id;
					}
					else
					{
						this._eiId = default(Nullable<long>);
					}
					this.SendPropertyChanged("EquipmentInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.emulsificationGatherProduceLog")]
	public partial class EmulsificationGatherProduceLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<decimal> _quantity;
		
		private System.Nullable<decimal> _asphaltumConsume;
		
		private System.Nullable<long> _eiId;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private EntityRef<EquipmentInformation> _EquipmentInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnquantityChanging(System.Nullable<decimal> value);
    partial void OnquantityChanged();
    partial void OnasphaltumConsumeChanging(System.Nullable<decimal> value);
    partial void OnasphaltumConsumeChanged();
    partial void OneiIdChanging(System.Nullable<long> value);
    partial void OneiIdChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    #endregion
		
		public EmulsificationGatherProduceLog()
		{
			this._EquipmentInformation = default(EntityRef<EquipmentInformation>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_quantity", DbType="Decimal(14,3)")]
		public System.Nullable<decimal> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[Column(Storage="_asphaltumConsume", DbType="Decimal(14,3)")]
		public System.Nullable<decimal> asphaltumConsume
		{
			get
			{
				return this._asphaltumConsume;
			}
			set
			{
				if ((this._asphaltumConsume != value))
				{
					this.OnasphaltumConsumeChanging(value);
					this.SendPropertyChanging();
					this._asphaltumConsume = value;
					this.SendPropertyChanged("asphaltumConsume");
					this.OnasphaltumConsumeChanged();
				}
			}
		}
		
		[Column(Storage="_eiId", DbType="BigInt")]
		public System.Nullable<long> eiId
		{
			get
			{
				return this._eiId;
			}
			set
			{
				if ((this._eiId != value))
				{
					if (this._EquipmentInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneiIdChanging(value);
					this.SendPropertyChanging();
					this._eiId = value;
					this.SendPropertyChanged("eiId");
					this.OneiIdChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Association(Name="EquipmentInformation_EmulsificationGatherProduceLog", Storage="_EquipmentInformation", ThisKey="eiId", OtherKey="id", IsForeignKey=true)]
		public EquipmentInformation EquipmentInformation
		{
			get
			{
				return this._EquipmentInformation.Entity;
			}
			set
			{
				EquipmentInformation previousValue = this._EquipmentInformation.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentInformation.Entity = null;
						previousValue.EmulsificationGatherProduceLog.Remove(this);
					}
					this._EquipmentInformation.Entity = value;
					if ((value != null))
					{
						value.EmulsificationGatherProduceLog.Add(this);
						this._eiId = value.id;
					}
					else
					{
						this._eiId = default(Nullable<long>);
					}
					this.SendPropertyChanged("EquipmentInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.deepFatConsumeDailyStatisticsDetail")]
	public partial class DeepFatConsumeDailyStatisticsDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _eiId;
		
		private System.Nullable<decimal> _fuelWastage;
		
		private string _inputMan;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private string _remark;
		
		private System.Nullable<long> _piId;
		
		private System.Nullable<decimal> _value;
		
		private EntityRef<EquipmentInformation> _EquipmentInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OneiIdChanging(System.Nullable<long> value);
    partial void OneiIdChanged();
    partial void OnfuelWastageChanging(System.Nullable<decimal> value);
    partial void OnfuelWastageChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OnremarkChanging(string value);
    partial void OnremarkChanged();
    partial void OnpiIdChanging(System.Nullable<long> value);
    partial void OnpiIdChanged();
    partial void OnvalueChanging(System.Nullable<decimal> value);
    partial void OnvalueChanged();
    #endregion
		
		public DeepFatConsumeDailyStatisticsDetail()
		{
			this._EquipmentInformation = default(EntityRef<EquipmentInformation>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_eiId", DbType="BigInt")]
		public System.Nullable<long> eiId
		{
			get
			{
				return this._eiId;
			}
			set
			{
				if ((this._eiId != value))
				{
					if (this._EquipmentInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneiIdChanging(value);
					this.SendPropertyChanging();
					this._eiId = value;
					this.SendPropertyChanged("eiId");
					this.OneiIdChanged();
				}
			}
		}
		
		[Column(Storage="_fuelWastage", DbType="Decimal(14,2)")]
		public System.Nullable<decimal> fuelWastage
		{
			get
			{
				return this._fuelWastage;
			}
			set
			{
				if ((this._fuelWastage != value))
				{
					this.OnfuelWastageChanging(value);
					this.SendPropertyChanging();
					this._fuelWastage = value;
					this.SendPropertyChanged("fuelWastage");
					this.OnfuelWastageChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_remark", DbType="VarChar(500)")]
		public string remark
		{
			get
			{
				return this._remark;
			}
			set
			{
				if ((this._remark != value))
				{
					this.OnremarkChanging(value);
					this.SendPropertyChanging();
					this._remark = value;
					this.SendPropertyChanged("remark");
					this.OnremarkChanged();
				}
			}
		}
		
		[Column(Storage="_piId", DbType="BigInt")]
		public System.Nullable<long> piId
		{
			get
			{
				return this._piId;
			}
			set
			{
				if ((this._piId != value))
				{
					this.OnpiIdChanging(value);
					this.SendPropertyChanging();
					this._piId = value;
					this.SendPropertyChanged("piId");
					this.OnpiIdChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="Decimal(14,2)")]
		public System.Nullable<decimal> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Association(Name="EquipmentInformation_deepFatConsumeDailyStatisticsDetail", Storage="_EquipmentInformation", ThisKey="eiId", OtherKey="id", IsForeignKey=true)]
		public EquipmentInformation EquipmentInformation
		{
			get
			{
				return this._EquipmentInformation.Entity;
			}
			set
			{
				EquipmentInformation previousValue = this._EquipmentInformation.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentInformation.Entity = null;
						previousValue.DeepFatConsumeDailyStatisticsDetail.Remove(this);
					}
					this._EquipmentInformation.Entity = value;
					if ((value != null))
					{
						value.DeepFatConsumeDailyStatisticsDetail.Add(this);
						this._eiId = value.id;
					}
					else
					{
						this._eiId = default(Nullable<long>);
					}
					this.SendPropertyChanged("EquipmentInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.flowmeterHistory")]
	public partial class FlowmeterHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _fnId;
		
		private System.Nullable<decimal> _value;
		
		private System.Nullable<System.DateTime> _inputDate;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _inputMan;
		
		private System.Nullable<decimal> _value2;
		
		private EntityRef<FlowmeterNo> _FlowmeterNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnfnIdChanging(System.Nullable<long> value);
    partial void OnfnIdChanged();
    partial void OnvalueChanging(System.Nullable<decimal> value);
    partial void OnvalueChanged();
    partial void OninputDateChanging(System.Nullable<System.DateTime> value);
    partial void OninputDateChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OninputManChanging(string value);
    partial void OninputManChanged();
    partial void Onvalue2Changing(System.Nullable<decimal> value);
    partial void Onvalue2Changed();
    #endregion
		
		public FlowmeterHistory()
		{
			this._FlowmeterNo = default(EntityRef<FlowmeterNo>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_fnId", DbType="BigInt")]
		public System.Nullable<long> fnId
		{
			get
			{
				return this._fnId;
			}
			set
			{
				if ((this._fnId != value))
				{
					if (this._FlowmeterNo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfnIdChanging(value);
					this.SendPropertyChanging();
					this._fnId = value;
					this.SendPropertyChanged("fnId");
					this.OnfnIdChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="Decimal(16,4)")]
		public System.Nullable<decimal> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_inputDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> inputDate
		{
			get
			{
				return this._inputDate;
			}
			set
			{
				if ((this._inputDate != value))
				{
					this.OninputDateChanging(value);
					this.SendPropertyChanging();
					this._inputDate = value;
					this.SendPropertyChanged("inputDate");
					this.OninputDateChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_inputMan", DbType="VarChar(50)")]
		public string inputMan
		{
			get
			{
				return this._inputMan;
			}
			set
			{
				if ((this._inputMan != value))
				{
					this.OninputManChanging(value);
					this.SendPropertyChanging();
					this._inputMan = value;
					this.SendPropertyChanged("inputMan");
					this.OninputManChanged();
				}
			}
		}
		
		[Column(Storage="_value2", DbType="Decimal(16,2)")]
		public System.Nullable<decimal> value2
		{
			get
			{
				return this._value2;
			}
			set
			{
				if ((this._value2 != value))
				{
					this.Onvalue2Changing(value);
					this.SendPropertyChanging();
					this._value2 = value;
					this.SendPropertyChanged("value2");
					this.Onvalue2Changed();
				}
			}
		}
		
		[Association(Name="FlowmeterNo_flowmeterHistory", Storage="_FlowmeterNo", ThisKey="fnId", OtherKey="id", IsForeignKey=true)]
		public FlowmeterNo FlowmeterNo
		{
			get
			{
				return this._FlowmeterNo.Entity;
			}
			set
			{
				FlowmeterNo previousValue = this._FlowmeterNo.Entity;
				if (((previousValue != value) 
							|| (this._FlowmeterNo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlowmeterNo.Entity = null;
						previousValue.FlowmeterHistory.Remove(this);
					}
					this._FlowmeterNo.Entity = value;
					if ((value != null))
					{
						value.FlowmeterHistory.Add(this);
						this._fnId = value.id;
					}
					else
					{
						this._fnId = default(Nullable<long>);
					}
					this.SendPropertyChanged("FlowmeterNo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
